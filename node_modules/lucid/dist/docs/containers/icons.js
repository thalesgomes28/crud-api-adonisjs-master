'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _sortBy2 = require('lodash/sortBy');

var _sortBy3 = _interopRequireDefault(_sortBy2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _endsWith2 = require('lodash/endsWith');

var _endsWith3 = _interopRequireDefault(_endsWith2);

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _flow2 = require('lodash/flow');

var _flow3 = _interopRequireDefault(_flow2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouterDom = require('react-router-dom');

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _styleHelpers = require('../../util/style-helpers');

var _index = require('../../index');

var components = _interopRequireWildcard(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var object = _propTypes2.default.object;
var Button = components.Button,
    Expander = components.Expander;

var icons = (0, _flow3.default)(function (x) {
	return (0, _reduce3.default)(x, function (acc, val, key) {
		return acc.concat((0, _endsWith3.default)(key, 'Icon') && key !== 'Icon' ? [[key, val]] : []);
	}, []);
}, function (x) {
	return (0, _filter3.default)(x, function (_ref) {
		var _ref2 = _slicedToArray(_ref, 2),
		    Icon = _ref2[1];

		return !Icon._lucidIsPrivate;
	});
}, function (x) {
	return (0, _sortBy3.default)(x, function (_ref3) {
		var _ref4 = _slicedToArray(_ref3, 1),
		    name = _ref4[0];

		return name;
	});
})(components);

var cx = _styleHelpers.lucidClassNames.bind('Icons');

var Icons = (0, _createReactClass2.default)({
	getInitialState: function getInitialState() {
		return {
			showButtons: false
		};
	},


	propTypes: {
		router: object,
		location: object
	},

	render: function render() {
		var _this = this;

		var showButtons = this.state.showButtons;


		return _react2.default.createElement(
			'div',
			{ className: cx('&') },
			_react2.default.createElement(
				'h2',
				null,
				'Icons'
			),
			_react2.default.createElement(
				'p',
				null,
				'A list of all lucid Icons.'
			),
			_react2.default.createElement(
				'section',
				null,
				_react2.default.createElement(
					'ul',
					{ className: cx('&-list') },
					(0, _map3.default)(icons, function (_ref5) {
						var _ref6 = _slicedToArray(_ref5, 2),
						    name = _ref6[0],
						    Icon = _ref6[1];

						return _react2.default.createElement(
							'li',
							{ className: cx('&-list-item'), key: name },
							_react2.default.createElement(
								_reactRouterDom.Link,
								{
									to: {
										pathname: '/components/' + name,
										query: _this.props.location.query
									}
								},
								_react2.default.createElement(Icon, { className: cx('&-list-icon'), isClickable: true }),
								name
							)
						);
					})
				)
			),
			_react2.default.createElement(
				Expander,
				{
					Label: (showButtons ? 'Hide' : 'Show') + ' Button examples',
					isExpanded: showButtons,
					onToggle: function onToggle() {
						_this.setState({ showButtons: !showButtons });
					}
				},
				_react2.default.createElement(
					'section',
					{ className: cx('&-buttons') },
					(0, _map3.default)(icons, function (_ref7) {
						var _ref8 = _slicedToArray(_ref7, 2),
						    name = _ref8[0],
						    Icon = _ref8[1];

						return _react2.default.createElement(
							'div',
							{ className: cx('&-buttons-section'), key: name },
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, size: 'short' },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, size: 'small' },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, isActive: true },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, size: 'large' },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, kind: 'primary', size: 'short' },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, kind: 'primary', size: 'small' },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, kind: 'primary' },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, kind: 'primary', isActive: true },
								_react2.default.createElement(Icon, null)
							),
							_react2.default.createElement(
								Button,
								{ hasOnlyIcon: true, kind: 'primary', size: 'large' },
								_react2.default.createElement(Icon, null)
							)
						);
					})
				)
			)
		);
	}
});

exports.default = Icons;