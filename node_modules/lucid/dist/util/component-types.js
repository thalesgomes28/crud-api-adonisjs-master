'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _values2 = require('lodash/values');

var _values3 = _interopRequireDefault(_values2);

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _castArray2 = require('lodash/castArray');

var _castArray3 = _interopRequireDefault(_castArray2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _isPlainObject2 = require('lodash/isPlainObject');

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _reject2 = require('lodash/reject');

var _reject3 = _interopRequireDefault(_reject2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createClass = createClass;
exports.filterTypes = filterTypes;
exports.rejectTypes = rejectTypes;
exports.createElements = createElements;
exports.findTypes = findTypes;
exports.getFirst = getFirst;
exports.omitProps = omitProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _stateManagement = require('./state-management');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// creates a React component
function createClass() {
	var definition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	var _definition$_isPrivat = definition._isPrivate,
	    _isPrivate = _definition$_isPrivat === undefined ? false : _definition$_isPrivat,
	    getDefaultProps = definition.getDefaultProps,
	    _definition$statics = definition.statics,
	    statics = _definition$statics === undefined ? {} : _definition$statics,
	    _definition$component = definition.components,
	    components = _definition$component === undefined ? {} : _definition$component,
	    _definition$reducers = definition.reducers,
	    reducers = _definition$reducers === undefined ? {} : _definition$reducers,
	    _definition$selectors = definition.selectors,
	    selectors = _definition$selectors === undefined ? {} : _definition$selectors,
	    _definition$initialSt = definition.initialState,
	    initialState = _definition$initialSt === undefined ? getDefaultProps && (0, _stateManagement.omitFunctionPropsDeep)(getDefaultProps.apply(definition)) : _definition$initialSt,
	    _definition$propName = definition.propName,
	    propName = _definition$propName === undefined ? null : _definition$propName,
	    _definition$propTypes = definition.propTypes,
	    propTypes = _definition$propTypes === undefined ? {} : _definition$propTypes,
	    _definition$render = definition.render,
	    render = _definition$render === undefined ? function () {
		return null;
	} : _definition$render,
	    restDefinition = _objectWithoutProperties(definition, ['_isPrivate', 'getDefaultProps', 'statics', 'components', 'reducers', 'selectors', 'initialState', 'propName', 'propTypes', 'render']);

	var newDefinition = _extends({
		getDefaultProps: getDefaultProps
	}, restDefinition, {
		statics: _extends({}, statics, components, {
			_isPrivate: _isPrivate,
			reducers: reducers,
			selectors: selectors,
			initialState: initialState,
			propName: propName
		}),
		propTypes: (0, _assign3.default)({}, propTypes, (0, _mapValues3.default)(definition.components, function () {
			return _propTypes2.default.any;
		})),
		render: render
	});

	newDefinition.statics.definition = newDefinition;

	return (0, _createReactClass2.default)(newDefinition);
}

// return all elements matching the specified types
function filterTypes(children) {
	var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	types = [].concat(types); // coerce to Array

	return (0, _filter3.default)(_react2.default.Children.toArray(children), function (element) {
		return _react2.default.isValidElement(element) && (0, _includes3.default)(types, element.type);
	});
}

// return all elements not matching the specified types
function rejectTypes(children) {
	var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	types = [].concat(types); // coerce to Array

	return (0, _reject3.default)(_react2.default.Children.toArray(children), function (element) {
		return _react2.default.isValidElement(element) && (0, _includes3.default)(types, element.type);
	});
}

// return an array of elements (of the given type) for each of the values
function createElements(type) {
	var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	return (0, _reduce3.default)([].concat(values), function (elements, typeValue) {
		if (_react2.default.isValidElement(typeValue) && typeValue.type === type) {
			return elements.concat(typeValue);
		} else if ((0, _isPlainObject3.default)(typeValue) && !_react2.default.isValidElement(typeValue)) {
			return elements.concat(_react2.default.createElement(type, typeValue));
		} else if ((0, _isUndefined3.default)(typeValue)) {
			return elements;
		} else {
			return elements.concat(_react2.default.createElement(type, null, typeValue));
		}
	}, []);
}

// return all elements found in props and children of the specified types
function findTypes(props) {
	var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	// get elements from props (using type.propName)
	var elementsFromProps = (0, _reduce3.default)((0, _castArray3.default)(types), function (acc, type) {
		if (!(0, _isUndefined3.default)(type.propName)) {
			var propMatches = (0, _flatten3.default)((0, _values3.default)((0, _pick3.default)(props, type.propName)));
			return acc.concat(createElements(type, propMatches));
		}
		return acc;
	}, []);

	// return elements from props and elements from children
	return elementsFromProps.concat(filterTypes(props.children, types));
}

// return the first element found in props and children of the specificed type(s)
function getFirst(props, types, defaultValue) {
	return (0, _first3.default)(findTypes(props, types)) || defaultValue;
}

// Omit props defined in propTypes of the given type and any extra keys given
// in third argument
//
// We also have a "magic" prop that's always excluded called `callbackId`. That
// prop can be used to identify a component in a list without having to create
// extra closures.
function omitProps(props, type) {
	var keys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	var targetIsDOMElement = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	// We only want to exclude the `callbackId` key when we're omitting props
	// destined for a dom element
	var additionalOmittedKeys = targetIsDOMElement ? ['initialState', 'callbackId'] : ['initialState'];

	return (0, _omit3.default)(props, (0, _keys3.default)(type.propTypes).concat(keys).concat(additionalOmittedKeys));
}