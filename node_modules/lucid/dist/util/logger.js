'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.logger = exports.isNode = exports.isDevMode = undefined;

var _unset2 = require('lodash/unset');

var _unset3 = _interopRequireDefault(_unset2);

var _set2 = require('lodash/set');

var _set3 = _interopRequireDefault(_set2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.checkIsDev = checkIsDev;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*eslint no-console: 0*/
var isDevMode = exports.isDevMode = function isReactInDev() {
	// This property gets injected via Webpack.
	return process.env.NODE_ENV !== 'production'; // eslint-disable-line no-undef
}();

var isNode = exports.isNode = (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && process.title === 'node';

var logger = exports.logger = function () {
	return checkIsDev() ? {
		log: log,
		logOnce: logOnce,
		warn: warn,
		warnOnce: warnOnce,
		error: error,
		errorOnce: errorOnce,
		resetOnce: resetOnce
	} : {
		log: _noop3.default,
		logOnce: _noop3.default,
		warn: _noop3.default,
		warnOnce: _noop3.default,
		error: _noop3.default,
		errorOnce: _noop3.default,
		resetOnce: _noop3.default
	};
}();

var onceMap = {};

function once(key, fn) {
	if (!(0, _has3.default)(onceMap, key)) {
		(0, _set3.default)(onceMap, key, true);
		fn();
	}
}

function resetOnce(key) {
	(0, _unset3.default)(onceMap, key);
}

function checkIsDev() {
	return isDevMode && typeof window !== 'undefined' && typeof console !== 'undefined';
}

function log() {
	var _console;

	(_console = console).log.apply(_console, arguments);

	try {
		// --- Welcome to debugging Lucid ---
		// This error was thrown as a convenience so that you can use this
		// stack to find the callsite that caused this warning to fire.
		throw new Error(arguments.length <= 0 ? undefined : arguments[0]);
	} catch (x) {
		/* */
	}
}

function logOnce(key) {
	for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		args[_key - 1] = arguments[_key];
	}

	once(key, function () {
		return log.apply(undefined, args);
	});
}

function warn() {
	var _console2;

	(_console2 = console).warn.apply(_console2, arguments);

	try {
		// --- Welcome to debugging Lucid ---
		// This error was thrown as a convenience so that you can use this
		// stack to find the callsite that caused this warning to fire.
		throw new Error(arguments.length <= 0 ? undefined : arguments[0]);
	} catch (x) {
		/* */
	}
}

function warnOnce(key) {
	for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		args[_key2 - 1] = arguments[_key2];
	}

	once(key, function () {
		return warn.apply(undefined, args);
	});
}

function error() {
	var _console3;

	(_console3 = console).error.apply(_console3, arguments);

	try {
		// --- Welcome to debugging Lucid ---
		// This error was thrown as a convenience so that you can use this
		// stack to find the callsite that caused this warning to fire.
		throw new Error(arguments.length <= 0 ? undefined : arguments[0]);
	} catch (x) {
		/* */
	}
}

function errorOnce(key) {
	for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
		args[_key3 - 1] = arguments[_key3];
	}

	once(key, function () {
		return error.apply(undefined, args);
	});
}