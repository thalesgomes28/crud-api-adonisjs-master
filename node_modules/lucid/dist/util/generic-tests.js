'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.mockDate = undefined;

var _last3 = require('lodash/last');

var _last4 = _interopRequireDefault(_last3);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _reject2 = require('lodash/reject');

var _reject3 = _interopRequireDefault(_reject2);

var _castArray2 = require('lodash/castArray');

var _castArray3 = _interopRequireDefault(_castArray2);

var _flatMap2 = require('lodash/flatMap');

var _flatMap3 = _interopRequireDefault(_flatMap2);

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _flow2 = require('lodash/flow');

var _flow3 = _interopRequireDefault(_flow2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _startsWith2 = require('lodash/startsWith');

var _startsWith3 = _interopRequireDefault(_startsWith2);

var _pickBy2 = require('lodash/pickBy');

var _pickBy3 = _interopRequireDefault(_pickBy2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _every2 = require('lodash/every');

var _every3 = _interopRequireDefault(_every2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _identity2 = require('lodash/identity');

var _identity3 = _interopRequireDefault(_identity2);

var _constant2 = require('lodash/constant');

var _constant3 = _interopRequireDefault(_constant2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.common = common;
exports.icons = icons;
exports.controls = controls;

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _path = require('path');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _enzyme = require('enzyme');

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _index = require('../index');

var lucid = _interopRequireWildcard(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Common tests for all our components
function common(Component) {
	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$getDefaultProps = _ref.getDefaultProps,
	    getDefaultProps = _ref$getDefaultProps === undefined ? (0, _constant3.default)({}) : _ref$getDefaultProps,
	    _ref$exemptFunctionPr = _ref.exemptFunctionProps,
	    exemptFunctionProps = _ref$exemptFunctionPr === undefined ? [] : _ref$exemptFunctionPr,
	    _ref$exemptChildCompo = _ref.exemptChildComponents,
	    exemptChildComponents = _ref$exemptChildCompo === undefined ? [] : _ref$exemptChildCompo,
	    _ref$selectRoot = _ref.selectRoot,
	    selectRoot = _ref$selectRoot === undefined ? _identity3.default : _ref$selectRoot;

	function generateDefaultProps() {
		var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		return (0, _assign3.default)({}, getDefaultProps(), props);
	}

	describe('[common]', function () {
		if (!Component) {
			throw new Error('An undefined component was passed to generic tests.');
		}

		if (Component._isLucidHybridComponent) {
			throw new Error('You\'re trying to run generic tests on a hybrid component which is bad and won\'t work and will make you cry. Check your spec files for ' + Component.displayName + ' and import the raw component instead of the hybrid version.');
		}

		it('should have a `displayName` defined', function () {
			(0, _assert2.default)(Component.displayName);
		});

		it('should pass through styles to the root element', function () {
			var style = {
				backgroundColor: '#f0f'
			};
			var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(Component, _extends({}, generateDefaultProps(), { style: style })));

			var rootWrapper = selectRoot(wrapper).first();
			var rootStyle = rootWrapper.prop('style');
			(0, _assert2.default)((0, _every3.default)(style, function (val, key) {
				return val === rootStyle[key];
			}), 'root style must contain passed styles');
		});

		it('should pass through `className`', function () {
			var expectedClass = 'rAnDoM';
			var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(Component, _extends({}, generateDefaultProps(), { className: expectedClass })));
			var rootWrapper = selectRoot(wrapper).first();
			var classNames = rootWrapper.prop('className').split(' ');

			(0, _assert2.default)((0, _includes3.default)(classNames, expectedClass), '\'' + classNames + '\' should include \'' + expectedClass + '\'');
		});

		it('should have an application scoped base class', function () {
			var expectedClass = 'lucid-' + Component.displayName;
			var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(Component, generateDefaultProps()));
			var rootWrapper = selectRoot(wrapper).first();
			var classNames = rootWrapper.prop('className').split(' ');

			(0, _assert2.default)((0, _includes3.default)(classNames, expectedClass), '\'' + classNames + '\' should include \'' + Component.displayName + '\'');
		});

		it('should have only application scoped classes', function () {
			var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(Component, generateDefaultProps()));
			var rootWrapper = selectRoot(wrapper).first();
			var parentClasses = rootWrapper.prop('className').split(' ');
			var childrenClasses = rootWrapper.children().reduce(function (acc, node) {
				if (!node.prop('className')) {
					return acc;
				}

				return acc.concat(node.prop('className').split(' '));
			}, []);

			var allClasses = parentClasses.concat(childrenClasses);

			(0, _forEach3.default)(allClasses, function (className) {
				(0, _assert2.default)((0, _includes3.default)(className, 'lucid-' + Component.displayName), className + ' must be scoped');
			});
		});

		describe('function propTypes', function () {
			var funcProps = (0, _pickBy3.default)(Component.propTypes, function (propType) {
				return propType === _propTypes2.default.func;
			});

			(0, _forEach3.default)(funcProps, function (propType, propName) {
				it(propName + ' should only use onX convention for function proptypes', function () {
					(0, _assert2.default)((0, _startsWith3.default)(propName, 'on') || (0, _includes3.default)(exemptFunctionProps, propName), propName + ' must follow onX convention');
				});
			});
		});

		describe('child components', function () {
			var childComponents = (0, _omit3.default)(Component.definition.statics, ['_isPrivate', 'definition', 'propName', 'reducers', 'selectors']);

			describe('propNames in propTypes', function () {
				(0, _flow3.default)(function (x) {
					return (0, _map3.default)(x, 'propName');
				}, function (x) {
					return (0, _compact3.default)(x);
				}, function (x) {
					return (0, _flatMap3.default)(x, _castArray3.default);
				}, function (x) {
					return (0, _reject3.default)(x, function (propName) {
						return (0, _includes3.default)(exemptChildComponents, propName);
					});
				}, function (x) {
					return (0, _forEach3.default)(x, function (propName) {
						it('should include ' + propName + ' in propTypes', function () {
							(0, _assert2.default)(Component.propTypes[propName], 'must include ' + propName + ' in propTypes');
						});
					});
				})(childComponents);
			});
		});

		describe('example testing', function () {
			var fileNames = _glob2.default.sync('./src/components/**/' + Component.displayName + '/examples/*.jsx');
			(0, _each3.default)(fileNames, function (path) {
				var Example = require('../../' + path).default;
				var title = (0, _path.basename)(path, '.jsx');
				it('should match snapshot(s) for ' + title, function () {
					var shallowExample = (0, _enzyme.shallow)(_react2.default.createElement(Example, null));

					// If the root of the example is an instance of the Component under test, snapshot it.
					// Otherwise, look under the root for instances of the Component and snapshot those.
					if (shallowExample.is(Component.displayName)) {
						expect((0, _enzyme.shallow)(_react2.default.createElement(Component, shallowExample.props()))).toMatchSnapshot();
					} else {
						shallowExample.find(Component.displayName).forEach(function (example) {
							expect((0, _enzyme.shallow)(_react2.default.createElement(Component, example.props()))).toMatchSnapshot();
						});
					}
				});
			});
		});

		// Only run this test if it's a public component
		if (!Component._isPrivate) {
			it('should be available as an exported module from index.js', function () {
				(0, _assert2.default)(lucid[Component.displayName]);
			});
		}
	});
}

// Common tests for all our icon components
function icons(Component) {
	describe('[icon]', function () {
		it('should add the correct class for isClickable', function () {
			var wrapper = (0, _enzyme.mount)(_react2.default.createElement(Component, { isClickable: true }));
			var targetClassName = 'lucid-Icon-is-clickable';
			(0, _assert2.default)(wrapper.find('svg').hasClass(targetClassName), 'Missing \'' + targetClassName + '\' class');
		});
	});
}

// Common tests for all control components
function controls(Component, _ref2) {
	var callbackName = _ref2.callbackName,
	    controlSelector = _ref2.controlSelector,
	    eventType = _ref2.eventType,
	    _ref2$additionalProps = _ref2.additionalProps,
	    additionalProps = _ref2$additionalProps === undefined ? {} : _ref2$additionalProps;

	// Use DOM tests here since some of our controls use dom events under the hood
	describe('[control]', function () {
		it('should callback with `event` and `props`', function () {
			var expectedSpecialProp = 32;
			var props = _extends(_defineProperty({
				specialProp: expectedSpecialProp
			}, callbackName, _sinon2.default.spy()), additionalProps);
			var wrapper = (0, _enzyme.mount)(_react2.default.createElement(Component, props));

			wrapper.find(controlSelector).simulate(eventType);

			// Last argument should be an object with `uniqueId` and `event`

			var _last2 = (0, _last4.default)(props[callbackName].args[0]),
			    specialProp = _last2.props.specialProp,
			    event = _last2.event;

			(0, _assert2.default)(event, 'missing event');
			_assert2.default.equal(specialProp, expectedSpecialProp, 'incorrect or missing specialProp');
		});
	});
}

var NativeDate = global.Date;
var createMockDateClass = function createMockDateClass() {
	for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		args[_key] = arguments[_key];
	}

	return (0, _assign3.default)(function MockDate() {
		return new (Function.prototype.bind.apply(NativeDate, [null].concat(args)))();
	}, {
		UTC: NativeDate.UTC,
		parse: NativeDate.parse,
		now: function now() {
			return new (Function.prototype.bind.apply(NativeDate, [null].concat(args)))().getTime();
		},
		prototype: NativeDate.prototype
	});
};

var mockDate = exports.mockDate = (0, _assign3.default)(function () {
	global.Date = createMockDateClass.apply(undefined, arguments);
}, {
	restore: function restore() {
		global.Date = NativeDate;
	}
});