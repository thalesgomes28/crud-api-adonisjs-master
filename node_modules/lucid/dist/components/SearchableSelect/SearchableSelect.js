'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.SearchableSelectDumb = undefined;

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _escapeRegExp2 = require('lodash/escapeRegExp');

var _escapeRegExp3 = _interopRequireDefault(_escapeRegExp2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _componentTypes = require('../../util/component-types');

var _styleHelpers = require('../../util/style-helpers');

var _textManipulation = require('../../util/text-manipulation');

var _stateManagement = require('../../util/state-management');

var _SearchableSelect = require('./SearchableSelect.reducers');

var reducers = _interopRequireWildcard(_SearchableSelect);

var _CaretIcon = require('../Icon/CaretIcon/CaretIcon');

var _CaretIcon2 = _interopRequireDefault(_CaretIcon);

var _DropMenu = require('../DropMenu/DropMenu');

var _LoadingIcon = require('../Icon/LoadingIcon/LoadingIcon');

var _LoadingIcon2 = _interopRequireDefault(_LoadingIcon);

var _SearchField = require('../SearchField/SearchField');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cx = _styleHelpers.lucidClassNames.bind('&-SearchableSelect');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    object = _propTypes2.default.object,
    shape = _propTypes2.default.shape,
    string = _propTypes2.default.string,
    oneOfType = _propTypes2.default.oneOfType;

/**
 *
 * {"categories": ["controls", "selectors"], "madeFrom": ["DropMenu", "SearchField"]}
 *
 * A selector control (like native `<select>`) which is used to select a single option from a dropdown list using a SearchField.
 * Supports option groups with and without labels.
 */

var SearchableSelect = (0, _componentTypes.createClass)({
	displayName: 'SearchableSelect',

	reducers: reducers,

	components: {
		/**
   * Content this is displayed when nothing is selected.
   */
		Placeholder: (0, _componentTypes.createClass)({
			displayName: 'SearchableSelect.Placeholder',
			propName: 'Placeholder'
		}),
		/**
   * A selectable option in the list.
   */
		Option: (0, _componentTypes.createClass)({
			displayName: 'SearchableSelect.Option',
			propName: 'Option',
			propTypes: _DropMenu.DropMenuDumb.Option.propTypes
		}),
		/**
   * Groups `Option`s together with a non-selectable heading.
   */
		OptionGroup: (0, _componentTypes.createClass)({
			displayName: 'SearchableSelect.OptionGroup',
			propName: 'OptionGroup',
			propTypes: _DropMenu.DropMenuDumb.OptionGroup.propTypes
		}),
		SearchField: _SearchField.SearchFieldDumb
	},

	propTypes: {
		/**
   * Should be instances of {`SearchableSelect.Placeholder`, `SearchableSelect.Option`, `SearchableSelect.OptionGroup`}. Other direct child elements will not render.
   */
		children: node,
		/**
   * Appended to the component-specific class names set on the root elements. Applies to *both* the control and the flyout menu.
   */
		className: string,
		/**
   * Styles that are passed through to root element.
   */
		style: object,
		/**
   * Allows user to reset the `optionIndex` to `null` if they select the placeholder at the top of the options list.
   * If `false`, it will not render the placeholder in the menu.
   */
		hasReset: bool,
		/**
   * Disables the SearchableSelect from being clicked or focused.
   */
		isDisabled: bool,
		/**
   * Displays a centered LoadingIcon to allow for asynchronous loading of options.
   */
		isLoading: bool,
		/**
   * Applies primary color styling to the control when an item is selected. Defaults to true.
   */
		isSelectionHighlighted: bool,
		/**
   * The max height of the fly-out menu.
   */
		maxMenuHeight: oneOfType([number, string]),
		/**
   * Called when the user enters a value to search for; the set of visible Options will be filtered using the value.
   * Has the signature `(searchText, firstVisibleIndex, {props, event}) => {}` where `searchText` is the value from the `SearchField` and `firstVisibleIndex` is the index of the first option that will be visible after filtering.
   */
		onSearch: func,
		/**
   * Called when an option is selected.
   * Has the signature `(optionIndex, {props, event}) => {}` where `optionIndex` is the new `selectedIndex` or `null`.
   */
		onSelect: func,
		/**
   * The function that will be run against each Option's props to determine
   * whether it should be visible or not. The default behavior of the
   * function is to match, ignoring case, against any text node descendant of
   * the `Option`.
   *
   * Has the signature `(searchText, optionProps)`
   * If `true`, option will be visible. If `false`, the option will not be visible.
   */
		optionFilter: func,
		/**
   * The current search text to filter the list of options by.
   */
		searchText: string,
		/**
   * The currently selected `SearchableSelect.Option` index or `null` if nothing is selected.
   */
		selectedIndex: number,
		/**
   * Object of DropMenu props which are passed thru to the underlying DropMenu component.
   */
		DropMenu: shape(_DropMenu.DropMenuDumb.propTypes),
		/**
   * *Child Element* - The content rendered in the control when there is no option is selected. Also rendered in the option list to remove current selection.
   */
		Placeholder: any,
		/**
   * *Child Element* - These are menu options. The `optionIndex` is in-order of rendering regardless of group nesting, starting with index `0`.
   * Each `Option` may be passed a prop called `isDisabled` to disable selection of that `Option`.
   * Any other props pass to Option will be available from the `onSelect` handler.
   */
		Option: any,
		/**
   * *Child Element* - Used to group `Option`s within the menu. Any non-`Option`s passed in will be rendered as a label for the group.
   */
		OptionGroup: any
	},

	getDefaultProps: function getDefaultProps() {
		return {
			hasReset: true,
			isSelectionHighlighted: true,
			isDisabled: false,
			isLoading: false,
			optionFilter: _textManipulation.propsSearch,
			searchText: null,
			selectedIndex: null,
			DropMenu: _DropMenu.DropMenuDumb.getDefaultProps()
		};
	},
	getInitialState: function getInitialState() {
		return {
			optionGroups: [],
			flattenedOptionsData: [],
			ungroupedOptionData: [],
			optionGroupDataLookup: {}
		};
	},
	componentWillMount: function componentWillMount() {
		// preprocess the options data before rendering
		this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(this.props, SearchableSelect));
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		// only preprocess options data when it changes (via new props) - better performance than doing this each render
		this.setState(_DropMenu.DropMenuDumb.preprocessOptionData(nextProps, SearchableSelect));
	},
	handleSearch: function handleSearch(searchText) {
		var _props = this.props,
		    onSearch = _props.onSearch,
		    optionFilter = _props.optionFilter;
		var flattenedOptionsData = this.state.flattenedOptionsData;


		var firstVisibleIndex = (0, _get3.default)((0, _find3.default)(flattenedOptionsData, function (_ref) {
			var optionProps = _ref.optionProps;

			return optionFilter(searchText, optionProps);
		}), 'optionIndex');

		onSearch(searchText, firstVisibleIndex);
	},
	renderUnderlinedChildren: function renderUnderlinedChildren(childText, searchText) {
		var _partitionText = (0, _textManipulation.partitionText)(childText, new RegExp((0, _escapeRegExp3.default)(searchText), 'i'), searchText.length),
		    _partitionText2 = _slicedToArray(_partitionText, 3),
		    pre = _partitionText2[0],
		    match = _partitionText2[1],
		    post = _partitionText2[2];

		return [pre && _react2.default.createElement(
			'span',
			{ key: 'pre', className: cx('&-Option-underline-pre') },
			pre
		), match && _react2.default.createElement(
			'span',
			{ key: 'match', className: cx('&-Option-underline-match') },
			match
		), post && _react2.default.createElement(
			'span',
			{ key: 'post', className: cx('&-Option-underline-post') },
			post
		)];
	},
	renderOption: function renderOption(optionProps, optionIndex) {
		var _props2 = this.props,
		    isLoading = _props2.isLoading,
		    optionFilter = _props2.optionFilter,
		    searchText = _props2.searchText;


		if (searchText) {
			return _react2.default.createElement(
				_DropMenu.DropMenuDumb.Option,
				_extends({
					isDisabled: isLoading,
					isHidden: !optionFilter(searchText, optionProps),
					key: 'SearchableSelectOption' + optionIndex
				}, (0, _omit3.default)(optionProps, ['children'])),
				(0, _isString3.default)(optionProps.children) ? this.renderUnderlinedChildren(optionProps.children, searchText) : optionProps.children
			);
		}

		return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, _extends({
			isDisabled: isLoading,
			key: 'SearchableSelectOption' + optionIndex
		}, optionProps));
	},
	renderOptions: function renderOptions() {
		var _this = this;

		var searchText = this.props.searchText;
		var _state = this.state,
		    optionGroups = _state.optionGroups,
		    optionGroupDataLookup = _state.optionGroupDataLookup,
		    ungroupedOptionData = _state.ungroupedOptionData;

		// for each option group passed in, render a DropMenu.OptionGroup, any
		// label will be included in it's children, render each option inside the
		// group

		var options = (0, _map3.default)(optionGroups, function (optionGroupProps, optionGroupIndex) {
			var childOptions = (0, _map3.default)((0, _get3.default)(optionGroupDataLookup, optionGroupIndex), function (_ref2) {
				var optionProps = _ref2.optionProps,
				    optionIndex = _ref2.optionIndex;
				return _this.renderOption(optionProps, optionIndex);
			});
			var visibleChildrenCount = (0, _filter3.default)(childOptions, function (option) {
				return !option.props.isHidden;
			}).length;

			return _react2.default.createElement(
				_DropMenu.DropMenuDumb.OptionGroup,
				_extends({
					isHidden: visibleChildrenCount === 0,
					key: 'SearchableSelectOptionGroup' + optionGroupIndex
				}, optionGroupProps),
				optionGroupProps.children,
				childOptions
			);
			// then render all the ungrouped options at the end
		}).concat((0, _map3.default)(ungroupedOptionData, function (_ref3) {
			var optionProps = _ref3.optionProps,
			    optionIndex = _ref3.optionIndex;
			return _this.renderOption(optionProps, optionIndex);
		}));

		var visibleOptionsCount = (0, _filter3.default)(options, function (option) {
			return !option.props.isHidden;
		}).length;

		return visibleOptionsCount > 0 ? options : _react2.default.createElement(
			_DropMenu.DropMenuDumb.Option,
			{ isDisabled: true },
			_react2.default.createElement(
				'span',
				{ className: cx('&-noresults') },
				'No results match "',
				searchText,
				'"'
			)
		);
	},
	render: function render() {
		var props = this.props,
		    _props3 = this.props,
		    style = _props3.style,
		    className = _props3.className,
		    hasReset = _props3.hasReset,
		    isDisabled = _props3.isDisabled,
		    isLoading = _props3.isLoading,
		    isSelectionHighlighted = _props3.isSelectionHighlighted,
		    maxMenuHeight = _props3.maxMenuHeight,
		    searchText = _props3.searchText,
		    selectedIndex = _props3.selectedIndex,
		    onSelect = _props3.onSelect,
		    dropMenuProps = _props3.DropMenu;
		var direction = dropMenuProps.direction,
		    optionContainerStyle = dropMenuProps.optionContainerStyle,
		    isExpanded = dropMenuProps.isExpanded;
		var flattenedOptionsData = this.state.flattenedOptionsData;


		var searchFieldProps = (0, _get3.default)((0, _componentTypes.getFirst)(props, _SearchField.SearchFieldDumb, _react2.default.createElement(_SearchField.SearchFieldDumb, null)), 'props');
		var placeholderProps = (0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, SearchableSelect.Placeholder), 'props'));
		var placeholder = (0, _get3.default)(placeholderProps, 'children', 'Select');
		var isItemSelected = (0, _isNumber3.default)(selectedIndex);

		return _react2.default.createElement(
			_DropMenu.DropMenuDumb,
			_extends({}, dropMenuProps, {
				className: cx('&', className),
				optionContainerStyle: (0, _assign3.default)({}, optionContainerStyle, !(0, _isNil3.default)(maxMenuHeight) ? { maxHeight: maxMenuHeight } : null),
				isDisabled: isDisabled,
				isLoading: isLoading,
				onSelect: onSelect,
				selectedIndices: isItemSelected ? [selectedIndex] : [],
				style: style
			}),
			_react2.default.createElement(
				_DropMenu.DropMenuDumb.Control,
				null,
				_react2.default.createElement(
					'div',
					{
						tabIndex: 0,
						className: cx('&-Control', {
							'&-Control-is-highlighted': !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted,
							'&-Control-is-selected': !isDisabled && isItemSelected && isSelectionHighlighted || isExpanded && isSelectionHighlighted,
							'&-Control-is-expanded': isExpanded,
							'&-Control-is-disabled': isDisabled
						})
					},
					_react2.default.createElement(
						'span',
						_extends({}, !isItemSelected ? placeholderProps : null, {
							className: cx('&-Control-content', !isItemSelected ? (0, _get3.default)(placeholderProps, 'className') : null)
						}),
						isItemSelected ? flattenedOptionsData[selectedIndex].optionProps.children : placeholder
					),
					_react2.default.createElement(_CaretIcon2.default, { direction: isExpanded ? direction : 'down', size: 8 })
				)
			),
			_react2.default.createElement(
				_DropMenu.DropMenuDumb.Header,
				{ className: cx('&-Search-container') },
				_react2.default.createElement(_SearchField.SearchFieldDumb, _extends({}, searchFieldProps, {
					onChange: this.handleSearch,
					value: searchText
				}))
			),
			isLoading && _react2.default.createElement(
				_DropMenu.DropMenuDumb.Option,
				{
					key: 'SearchableSelectLoading',
					className: cx('&-Loading'),
					isDisabled: true
				},
				_react2.default.createElement(_LoadingIcon2.default, null)
			),
			hasReset && isItemSelected && _react2.default.createElement(
				_DropMenu.DropMenuDumb.NullOption,
				placeholderProps,
				placeholder
			),
			this.renderOptions()
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(SearchableSelect);
exports.SearchableSelectDumb = SearchableSelect;