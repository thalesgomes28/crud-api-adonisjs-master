'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _identity2 = require('lodash/identity');

var _identity3 = _interopRequireDefault(_identity2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _chartHelpers = require('../../util/chart-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Axis');

var string = _propTypes2.default.string,
    array = _propTypes2.default.array,
    func = _propTypes2.default.func,
    number = _propTypes2.default.number,
    oneOf = _propTypes2.default.oneOf;

/**
 * {"categories": ["visualizations", "chart primitives"]}
 *
 * *For use within an `svg`*
 *
 * Axes are used to help render human-readable reference marks on charts. They
 * can either be horizontal or vertical and really only need a scale to be able
 * to draw properly.
 *
 * This component is a very close sister to d3's svg axis and most of the logic
 * was ported from there.
 */

var Axis = (0, _componentTypes.createClass)({
	displayName: 'Axis',

	propTypes: {
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,
		/**
   * Must be a d3 scale. Lucid exposes the `lucid.d3Scale` library for use
   * here.
   */
		scale: func.isRequired,
		/**
   * Size of the ticks for each discrete tick mark.
   */
		innerTickSize: number,
		/**
   * Size of the tick marks found at the beginning and end of the axis. It's
   * common to set this to `0` to remove them.
   */
		outerTickSize: number,
		/**
   * An optional function that can format ticks. Generally this shouldn't be
   * needed since d3 has very good default formatters for most data.
   *
   * Signature: `(tick) => {}`
   */
		tickFormat: func,
		/**
   * If you need fine grained control over the axis ticks, you can pass them
   * in this array.
   */
		ticks: array,
		/**
   * Determines the spacing between each tick and its text.
   */
		tickPadding: number,
		/**
   * Determines the orientation of the ticks. `left` and `right` will
   * generate a vertical axis, whereas `top` and `bottom` will generate a
   * horizontal axis.
   */
		orient: oneOf(['top', 'bottom', 'left', 'right']),
		/**
   * Control the number of ticks displayed.
   *
   * If the scale is time based or linear, this number acts a "hint" per the
   * default behavior of D3. If it's an ordinal scale, this number is treated
   * as an absolute number of ticks to display and is powered by our own
   * utility function `discreteTicks`.
   */
		tickCount: number
	},

	getDefaultProps: function getDefaultProps() {
		return {
			innerTickSize: 6, // same as d3
			outerTickSize: 6, // same as d3
			tickPadding: 3, // same as d3
			orient: 'bottom',
			tickCount: null
		};
	},
	render: function render() {
		var _props = this.props,
		    scale = _props.scale,
		    className = _props.className,
		    orient = _props.orient,
		    tickCount = _props.tickCount,
		    _props$ticks = _props.ticks,
		    ticks = _props$ticks === undefined ? scale.ticks ? scale.ticks(tickCount) : (0, _chartHelpers.discreteTicks)(scale.domain(), tickCount) : _props$ticks,
		    innerTickSize = _props.innerTickSize,
		    outerTickSize = _props.outerTickSize,
		    _props$tickFormat = _props.tickFormat,
		    tickFormat = _props$tickFormat === undefined ? scale.tickFormat ? scale.tickFormat() : _identity3.default : _props$tickFormat,
		    tickPadding = _props.tickPadding,
		    passThroughs = _objectWithoutProperties(_props, ['scale', 'className', 'orient', 'tickCount', 'ticks', 'innerTickSize', 'outerTickSize', 'tickFormat', 'tickPadding']);

		var tickSpacing = Math.max(innerTickSize, 0) + tickPadding;

		// Domain
		var range = scale.range();
		var sign = orient === 'top' || orient === 'left' ? -1 : 1;
		var isH = orient === 'top' || orient === 'bottom'; // is horizontal

		var scaleNormalized = scale;

		// Only band scales have `bandwidth`, this conditional helps center the
		// ticks on the bands
		if (scale.bandwidth) {
			var bandModifier = scale.bandwidth() / 2;
			scaleNormalized = function scaleNormalized(d) {
				return scale(d) + bandModifier;
			};
		}

		return _react2.default.createElement(
			'g',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Axis), { className: cx(className, '&') }),
			isH ? _react2.default.createElement('path', {
				className: cx('&-domain'),
				d: 'M' + range[0] + ',' + sign * outerTickSize + 'V0H' + range[1] + 'V' + sign * outerTickSize
			}) : _react2.default.createElement('path', {
				className: cx('&-domain'),
				d: 'M' + sign * outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + sign * outerTickSize
			}),
			(0, _map3.default)(ticks, function (tick) {
				return _react2.default.createElement(
					'g',
					{
						key: tick,
						transform: 'translate(' + (isH ? scaleNormalized(tick) : 0) + ', ' + (isH ? 0 : scaleNormalized(tick)) + ')'
					},
					_react2.default.createElement('line', {
						className: cx('&-tick'),
						x2: isH ? 0 : sign * innerTickSize,
						y2: isH ? sign * innerTickSize : 0
					}),
					_react2.default.createElement(
						'text',
						{
							className: cx('&-tick-text'),
							x: isH ? 0 : sign * tickSpacing,
							y: isH ? sign * tickSpacing : 0,
							dy: isH ? sign < 0 ? '0em' : '.71em' // magic d3 number
							: '.32em' // magic d3 number
							,
							style: {
								textAnchor: isH ? 'middle' : sign < 0 ? 'end' : 'start'
							}
						},
						tickFormat(tick)
					)
				);
			})
		);
	}
});

exports.default = Axis;