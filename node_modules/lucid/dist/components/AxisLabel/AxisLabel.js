'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _startsWith2 = require('lodash/startsWith');

var _startsWith3 = _interopRequireDefault(_startsWith2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-AxisLabel');

var number = _propTypes2.default.number,
    string = _propTypes2.default.string,
    oneOf = _propTypes2.default.oneOf,
    object = _propTypes2.default.object;

/**
 * {"categories": ["visualizations", "chart primitives"]}
 *
 * *For use within an `svg`*
 *
 * Centered labels for axes that typically are fit into the margins of a chart.
 */

var AxisLabel = (0, _componentTypes.createClass)({
	displayName: 'AxisLabel',

	propTypes: {
		/**
   * Passed through to the root element.
   */
		style: object,
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,
		/**
   * Height of the margin this label should fit into.
   */
		height: number.isRequired,
		/**
   * Width of the margin this label should fit into.
   */
		width: number.isRequired,
		/**
   * Strings should match an existing color class unless they start with a
   * '#' for specific colors. E.g.:
   *
   * - `COLOR_0`
   * - `COLOR_GOOD`
   * - `'#123abc'`
   */
		color: string,
		/**
   * Contents of the label, should only ever be a string since we use a `text`
   * under the hood.
   */
		label: string,
		/**
   * Determine orientation of the label.
   */
		orient: oneOf(['top', 'bottom', 'left', 'right'])
	},

	getDefaultProps: function getDefaultProps() {
		return {
			color: '#000'
		};
	},
	render: function render() {
		var _props = this.props,
		    height = _props.height,
		    width = _props.width,
		    orient = _props.orient,
		    label = _props.label,
		    color = _props.color,
		    style = _props.style,
		    className = _props.className,
		    passThroughs = _objectWithoutProperties(_props, ['height', 'width', 'orient', 'label', 'color', 'style', 'className']);

		var isH = orient === 'top' || orient === 'bottom';
		var isCustomColor = (0, _startsWith3.default)(color, '#');
		var colorStyle = isCustomColor ? { fill: color } : null;

		return _react2.default.createElement(
			'text',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, AxisLabel), {
				style: _extends({}, colorStyle, style),
				className: cx(className, '&', _defineProperty({}, '&-' + color, !isCustomColor)),
				x: isH ? width / 2 : height / 2 * -1,
				y: orient === 'right' ? width : orient === 'bottom' ? height : 0,
				dy: orient === 'top' || orient === 'left' ? '1em' : '-.32em',
				transform: isH ? '' : 'rotate(-90)'
			}),
			label
		);
	}
});

exports.default = AxisLabel;