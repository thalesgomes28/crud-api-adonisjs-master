'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _Checkbox = require('../Checkbox/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-CheckboxLabeled');
var any = _propTypes2.default.any,
    node = _propTypes2.default.node,
    object = _propTypes2.default.object,
    string = _propTypes2.default.string;

/**
 * {"categories": ["controls", "toggles"], "extend": "Checkbox", "madeFrom": ["Checkbox"]}
 *
 * This is a composite of the `Checkbox` component and the native `label`
 * element.
 */

var CheckboxLabeled = (0, _componentTypes.createClass)({
	displayName: 'CheckboxLabeled',

	components: {
		/*
   * Renders a `<label>` for the `<Checkbox>`
   */
		Label: (0, _componentTypes.createClass)({
			displayName: 'CheckboxLabeled.Label',
			propName: 'Label',
			propTypes: {
				/**
     * Used to identify the purpose of this checkbox to the user -- can
     * be any renderable content.
     */
				children: node
			}
		})
	},

	propTypes: _extends({}, _Checkbox2.default.propTypes, {

		/**
   * Appended to the component-specific class names set on the root
   * element.
   */
		className: string,

		/**
   * Passed through to the root element.
   */
		style: object,

		/**
   * Child element whose children are used to identify the purpose of this
   * checkbox to the user.
   */
		Label: any
	}),

	getDefaultProps: function getDefaultProps() {
		return {
			isIndeterminate: false,
			isDisabled: false,
			isSelected: false,
			onSelect: _noop3.default
		};
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    isIndeterminate = _props.isIndeterminate,
		    isDisabled = _props.isDisabled,
		    isSelected = _props.isSelected,
		    onSelect = _props.onSelect,
		    style = _props.style,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'isIndeterminate', 'isDisabled', 'isSelected', 'onSelect', 'style']);

		var labelChildProps = (0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, CheckboxLabeled.Label), 'props'));

		return _react2.default.createElement(
			'label',
			{
				className: cx('&', {
					'&-is-disabled': isDisabled,
					'&-is-selected': isIndeterminate || isSelected
				}, className),
				style: style
			},
			_react2.default.createElement(_Checkbox2.default, _extends({
				className: cx('&-Checkbox', className),
				isDisabled: isDisabled,
				isIndeterminate: isIndeterminate,
				isSelected: isSelected,
				onSelect: onSelect
			}, (0, _componentTypes.omitProps)(passThroughs, CheckboxLabeled, [], false))),
			_react2.default.createElement('div', _extends({}, labelChildProps, {
				className: cx('&-label', (0, _get3.default)(labelChildProps, 'className', null))
			}))
		);
	}
});

exports.default = CheckboxLabeled;