'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cx = _styleHelpers.lucidClassNames.bind('&-DragCaptureZone');
var func = _propTypes2.default.func,
    string = _propTypes2.default.string;

/**
 * {"categories": ["utility"]}
 *
 * This is a helper component used to capture mouse events to determine when the
 * user starts, is and stops dragging.
 */

var DragCaptureZone = (0, _componentTypes.createClass)({
	displayName: 'DragCaptureZone',
	propTypes: {
		/**
   * Appended to the component-specific class names set on the root
   * element.
   */
		className: string,

		/**
   * Called as the user drags the mouse.
   *
   * Signature: `({ dx, dy, pageX, pageY }, { event, props }) => {}`
   */
		onDrag: func,

		/**
   * Called when the user releases the mouse button after having dragged.
   *
   * Signature: `({ dx, dy, pageX, pageY }, { event, props }) => {}`
   */
		onDragEnd: func,

		/**
   * Called when the user presses the mouse button down while over the
   * component.
   *
   * Signature: `({ dx, dy, pageX, pageY }, { event, props }) => {}`
   */
		onDragStart: func,
		/**
   * Called when the drag event is canceled due to user interaction.
   * For example: if a system alert pops up during a touch event.
   *
   * Signature: `({ event, props }) => {}`
   */
		onDragCancel: func
	},

	getDefaultProps: function getDefaultProps() {
		return {
			onDrag: _noop3.default,
			onDragEnd: _noop3.default,
			onDragStart: _noop3.default,
			onDragCancel: _noop3.default
		};
	},
	getInitialState: function getInitialState() {
		return {
			pageX: 0,
			pageY: 0
		};
	},
	render: function render() {
		var _this = this;

		return _react2.default.createElement('div', _extends({}, (0, _componentTypes.omitProps)(this.props, DragCaptureZone), {
			className: cx('&', this.props.className),
			key: 'DragCaptureZone',
			onMouseDown: this.handleDragStart,
			ref: function ref(_ref) {
				_this.elementRef = _ref;
			}
		}));
	},
	componentDidMount: function componentDidMount() {
		//add event listeners directly on the DOM element to allow preventDefault
		//calls which are not honored due to react's event delegation
		//reference: https://github.com/facebook/react/issues/8968
		this.elementRef.addEventListener('touchstart', this.handleDragStart);
		this.elementRef.addEventListener('touchmove', this.handleDrag);
		this.elementRef.addEventListener('touchend', this.handleDragEnd);
		this.elementRef.addEventListener('touchcancel', this.handleDragCancel);
	},
	componentWillUnmount: function componentWillUnmount() {
		this.elementRef.removeEventListener('touchstart', this.handleDragStart);
		this.elementRef.removeEventListener('touchmove', this.handleDrag);
		this.elementRef.removeEventListener('touchend', this.handleDragEnd);
		this.elementRef.removeEventListener('touchcancel', this.handleDragCancel);
		window.document.removeEventListener('mousemove', this.handleDrag);
		window.document.removeEventListener('mouseup', this.handleDragEnd);
	},
	handleDrag: function handleDrag(event) {
		var pageX = void 0;
		var pageY = void 0;

		/* istanbul ignore next */
		if (event.touches) {
			pageX = event.touches[0].pageX;
			pageY = event.touches[0].pageY;
		} else {
			pageX = event.pageX;
			pageY = event.pageY;
		}

		event.preventDefault();

		this.props.onDrag({
			dX: pageX - this.state.pageX,
			dY: pageY - this.state.pageY,
			pageX: pageX,
			pageY: pageY
		}, {
			event: event,
			props: this.props
		});
	},
	handleDragEnd: function handleDragEnd(event) {
		var pageX = void 0;
		var pageY = void 0;

		/* istanbul ignore next */
		if (event.changedTouches) {
			pageX = event.changedTouches[0].pageX;
			pageY = event.changedTouches[0].pageY;
		} else {
			pageX = event.pageX;
			pageY = event.pageY;

			window.document.removeEventListener('mousemove', this.handleDrag);
			window.document.removeEventListener('mouseup', this.handleDragEnd);
		}

		event.preventDefault();

		this.props.onDragEnd({
			dX: pageX - this.state.pageX,
			dY: pageY - this.state.pageY,
			pageX: pageX,
			pageY: pageY
		}, {
			event: event,
			props: this.props
		});

		this.setState({
			pageX: 0,
			pageY: 0
		});
	},
	handleDragStart: function handleDragStart(event) {
		var pageX = void 0;
		var pageY = void 0;

		/* istanbul ignore next */
		if (event.touches) {
			pageX = event.touches[0].pageX;
			pageY = event.touches[0].pageY;
		} else {
			pageX = event.pageX;
			pageY = event.pageY;

			window.document.addEventListener('mousemove', this.handleDrag);
			window.document.addEventListener('mouseup', this.handleDragEnd);
		}

		event.preventDefault();

		this.props.onDragStart({
			dX: 0,
			dY: 0,
			pageX: pageX,
			pageY: pageY
		}, {
			event: event,
			props: this.props
		});

		this.setState({
			pageX: pageX,
			pageY: pageY
		});
	},
	handleDragCancel: function handleDragCancel(event) {
		this.props.onDragCancel({
			event: event,
			props: this.props
		});

		this.setState({
			pageX: 0,
			pageY: 0
		});
	}
});

exports.default = DragCaptureZone;