'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Button');

var arrayOf = _propTypes2.default.arrayOf,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    oneOf = _propTypes2.default.oneOf,
    oneOfType = _propTypes2.default.oneOfType,
    string = _propTypes2.default.string;

/**
 *
 * {"categories": ["controls", "buttons"]}
 *
 * A basic button. Any props that are not explicitly called out below will be
 * passed through to the native `button` component.
 */

var Button = (0, _componentTypes.createClass)({
	displayName: 'Button',
	propName: 'Button',
	propTypes: {
		/**
   * Disables the Button by greying it out
   */
		isDisabled: bool,
		/**
   * Activates the Button by giving it a "pressed down" look
   */
		isActive: bool,
		/**
   * Class names that are appended to the defaults
   */
		className: string,
		/**
   * Set this to `true` if you want the Button to only contain
   * an icon.
   */
		hasOnlyIcon: bool,
		/**
   * Any valid React children
   */
		children: oneOfType([node, arrayOf(node)]),
		/**
   * Style variations of the Button
   */
		kind: oneOf(['primary', 'link', 'success', 'warning', 'danger', 'info']),
		/**
   * Size variations of the Button
   */
		size: oneOf(['short', 'small', 'large']),
		/**
   * Called when the user clicks the `Button`.
   *
   * Signature: `({ event, props }) => {}`
   */
		onClick: func,
		/**
   * Form element type variations of Button. Defaults to 'button' to avoid
   * being triggered by 'Enter' anywhere on the page. Passed through to DOM
   * Button.
   */
		type: string
	},

	getDefaultProps: function getDefaultProps() {
		return {
			isDisabled: false,
			isActive: false,
			onClick: _noop3.default,
			type: 'button',
			hasOnlyIcon: false
		};
	},
	handleClick: function handleClick(event) {
		var _props = this.props,
		    isDisabled = _props.isDisabled,
		    onClick = _props.onClick;

		var domNode = _reactDom2.default.findDOMNode(this);

		if (!isDisabled) {
			// required to correctly apply the focus state in Safari and Firefox
			domNode.focus();
			onClick({ event: event, props: this.props });
		}
	},
	render: function render() {
		var _props2 = this.props,
		    isDisabled = _props2.isDisabled,
		    isActive = _props2.isActive,
		    hasOnlyIcon = _props2.hasOnlyIcon,
		    kind = _props2.kind,
		    size = _props2.size,
		    className = _props2.className,
		    children = _props2.children,
		    type = _props2.type,
		    passThroughs = _objectWithoutProperties(_props2, ['isDisabled', 'isActive', 'hasOnlyIcon', 'kind', 'size', 'className', 'children', 'type']);

		return _react2.default.createElement(
			'button',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Button, ['callbackId']), {
				className: cx('&', {
					'&-is-disabled': isDisabled,
					'&-is-active': isActive,
					'&-primary': kind === 'primary',
					'&-link': kind === 'link',
					'&-success': kind === 'success',
					'&-warning': kind === 'warning',
					'&-danger': kind === 'danger',
					'&-info': kind === 'info',
					'&-short': size === 'short',
					'&-small': size === 'small',
					'&-large': size === 'large',
					'&-has-only-icon': hasOnlyIcon
				}, className),
				onClick: this.handleClick,
				disabled: isDisabled,
				ref: 'button',
				type: type
			}),
			_react2.default.createElement(
				'span',
				{ className: cx('&-content') },
				children
			)
		);
	}
});

exports.default = Button;