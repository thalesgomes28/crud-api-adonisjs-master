'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.DateSelectDumb = undefined;

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _clamp2 = require('lodash/clamp');

var _clamp3 = _interopRequireDefault(_clamp2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _stateManagement = require('../../util/state-management');

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _DateSelect = require('./DateSelect.reducers');

var reducers = _interopRequireWildcard(_DateSelect);

var _InfiniteSlidePanel = require('../InfiniteSlidePanel/InfiniteSlidePanel');

var _InfiniteSlidePanel2 = _interopRequireDefault(_InfiniteSlidePanel);

var _CalendarMonth = require('../CalendarMonth/CalendarMonth');

var _CalendarMonth2 = _interopRequireDefault(_CalendarMonth);

var _ChevronThinIcon = require('../Icon/ChevronThinIcon/ChevronThinIcon');

var _ChevronThinIcon2 = _interopRequireDefault(_ChevronThinIcon);

var _reactDayPicker = require('react-day-picker');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-DateSelect');

var NAV_BUTTON_SIZE = 32;
var clampMonthsShown = function clampMonthsShown(monthsShown) {
	return (0, _clamp3.default)(monthsShown, 1, 6);
};

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    instanceOf = _propTypes2.default.instanceOf,
    number = _propTypes2.default.number,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string;

/**
 * {"categories": ["controls", "selectors"], "madeFrom": ["InfiniteSlidePanel", "CalendarMonth"]}
 *
 * Date selection component capabaple of supporting single date and date range
 * selections.
 */

var DateSelect = (0, _componentTypes.createClass)({
	displayName: 'DateSelect',

	components: {
		/**
   * Child component to pass thru props to underlying CalendarMonth.
   */
		CalendarMonth: (0, _componentTypes.createClass)({
			displayName: 'DateSelect.CalendarMonth',
			propName: 'CalendarMonth'
		})
	},

	propTypes: {
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,

		/**
   * Number of calendar months to show. Min 1, suggested max 3. Actual max is
   * 6.
   */
		monthsShown: number,

		/**
   * Number of calendar months rendered at any given time (including those
   * out of view).
   *
   * In practice it should be at least (2 * monthsShown) + 2. It's got some
   * issues that still need to be ironed out but it works.
   */
		calendarsRendered: number,

		/**
   * The offset of the leftmost month in view, where 0 is the `initialMonth`.
   * Negative values will show previous months.
   */
		offset: number,

		/**
   * Sets the start date in a date range.
   */
		from: instanceOf(Date),

		/**
   * Sets the end date in a date range.
   */
		to: instanceOf(Date),

		/**
   * The next selection that is expected. Primarily used to preview expected
   * ranges when the cursor is on a target date.
   */
		selectMode: oneOf(['day', 'from', 'to']),

		/**
   * Sets first month in view on render. The 0 value for the `offset` prop
   * refers to this month.
   */
		initialMonth: instanceOf(Date),

		/**
   * Sets selected days. Passed through to `CalendarMonth` ->
   * `react-day-picker`. Can be a `Date`, array of `Date`s or a function with
   * the signature `(date) => Boolean`.
   */
		selectedDays: any,

		/**
   * Sets disabled days. Passed through to `CalendarMonth` ->
   * `react-day-picker`. Can be a `Date`, array of `Date`s or a function with
   * the signature `(date) => Boolean`.
   */
		disabledDays: any,

		/**
   * Display a divider between each month.
   */
		showDivider: bool,

		/**
   * Called when user's swipe would change the month `offset`. Callback
   * passes number of months swiped by the user (positive for forward swipes,
   * negative for backwards swipes).
   *
   * Signature: `(monthsSwiped, { event, props }) => {}`
   */
		onSwipe: func,

		/**
   * Called when user clicks the previous button.
   *
   * Signature: `({ event, props }) => {}`
   */
		onPrev: func,

		/**
   * Called when user clicks the next button.
   *
   * Signature: `({ event, props }) => {}`
   */
		onNext: func,

		/**
   * Called when user selects a date. Callback passes a Date object as the
   * first argument.
   *
   * Signature: `(selectedDate, { event, props }) => {}`
   */
		onSelectDate: func,

		/**
   * Render initial font size relative to size of the component so it scales with the calendar size.
   */
		isFontSizeRelative: bool,

		/**
   * Highlight dates and ranges based on cursor position.
   */
		showCursorHighlight: bool
	},

	getDefaultProps: function getDefaultProps() {
		return {
			monthsShown: 1,
			calendarsRendered: 6,
			offset: 0,
			from: null,
			to: null,
			initialMonth: new Date(),
			selectedDays: null,
			disabledDays: null,
			showDivider: false,
			onSwipe: _noop3.default,
			onPrev: _noop3.default,
			onNext: _noop3.default,
			onSelectDate: _noop3.default,
			isFontSizeRelative: false,
			showCursorHighlight: true
		};
	},


	reducers: reducers,

	getInitialState: function getInitialState() {
		return {
			cursor: null
		};
	},
	handleDayClick: function handleDayClick(day, _ref, event) {
		var disabled = _ref.disabled;
		var onSelectDate = this.props.onSelectDate;


		if (!disabled) {
			onSelectDate(day, { event: event, props: this.props });
		}
	},
	handleDayMouseEnter: function handleDayMouseEnter(day, _ref2) {
		var disabled = _ref2.disabled;

		if (disabled) {
			this.setState({
				cursor: null
			});
		} else {
			this.setState({
				cursor: day
			});
		}
	},
	handleDayMouseLeave: function handleDayMouseLeave() {
		this.setState({
			cursor: null
		});
	},
	handlePrev: function handlePrev(event) {
		this.props.onPrev({ event: event, props: this.props });
	},
	handleNext: function handleNext(event) {
		this.props.onNext({ event: event, props: this.props });
	},
	componentWillMount: function componentWillMount() {
		this.initialMonth = new Date(this.props.initialMonth);
	},
	componentDidMount: function componentDidMount() {
		var _props = this.props,
		    isFontSizeRelative = _props.isFontSizeRelative,
		    monthsShownRaw = _props.monthsShown;


		var monthsShown = clampMonthsShown(monthsShownRaw);

		if (isFontSizeRelative) {
			var rootElement = _reactDom2.default.findDOMNode(this.rootRef);

			var _rootElement$getBound = rootElement.getBoundingClientRect(),
			    width = _rootElement$getBound.width,
			    height = _rootElement$getBound.height;

			var navButtonsWidth = NAV_BUTTON_SIZE * 2;
			var oneMonthShownWidth = (width - navButtonsWidth) / monthsShown + navButtonsWidth;
			var size = Math.sqrt(oneMonthShownWidth * height);
			var relativeFontSize = Math.round(size / 24);
			var relativeMinWidth = (width - navButtonsWidth) / monthsShown * 10.1075 / relativeFontSize * monthsShown + navButtonsWidth;

			rootElement.style.fontSize = relativeFontSize + 'px';
			rootElement.style.minWidth = relativeMinWidth + 'px';
		}
	},
	render: function render() {
		var _this = this;

		var _props2 = this.props,
		    className = _props2.className,
		    monthsShownRaw = _props2.monthsShown,
		    calendarsRendered = _props2.calendarsRendered,
		    offset = _props2.offset,
		    from = _props2.from,
		    to = _props2.to,
		    selectMode = _props2.selectMode,
		    selectedDays = _props2.selectedDays,
		    disabledDays = _props2.disabledDays,
		    showDivider = _props2.showDivider,
		    onSwipe = _props2.onSwipe,
		    showCursorHighlight = _props2.showCursorHighlight,
		    passThroughs = _objectWithoutProperties(_props2, ['className', 'monthsShown', 'calendarsRendered', 'offset', 'from', 'to', 'selectMode', 'selectedDays', 'disabledDays', 'showDivider', 'onSwipe', 'showCursorHighlight']);

		var cursor = this.state.cursor;

		var isRangeSameDay = _reactDayPicker.DateUtils.isSameDay(from, to);

		var calendarMonth = (0, _componentTypes.getFirst)(this.props, DateSelect.CalendarMonth, _react2.default.createElement(DateSelect.CalendarMonth, null));
		var monthsShown = clampMonthsShown(monthsShownRaw);

		/* istanbul ignore next */
		return _react2.default.createElement(
			'section',
			_extends({
				ref: function ref(_ref3) {
					_this.rootRef = _ref3;
				},
				className: cx('&', className, {
					'&-show-divider': showDivider
				}),
				style: _extends({
					minWidth: NAV_BUTTON_SIZE * 2 + 185 * monthsShown
				}, passThroughs.style)
			}, (0, _componentTypes.omitProps)(passThroughs, DateSelect)),
			_react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_ChevronThinIcon2.default, {
					className: cx('&-chevron'),
					size: NAV_BUTTON_SIZE,
					isClickable: true,
					direction: 'left',
					onClick: this.handlePrev
				})
			),
			_react2.default.createElement(
				_InfiniteSlidePanel2.default,
				{
					className: cx('&-InfiniteSlidePanel'),
					totalSlides: calendarsRendered,
					slidesToShow: monthsShown,
					offset: offset,
					onSwipe: onSwipe
				},
				_react2.default.createElement(
					_InfiniteSlidePanel2.default.Slide,
					{ className: cx('&-slide') },
					function (slideOffset) {
						return _react2.default.createElement(
							'div',
							{ className: cx('&-slide-content') },
							_react2.default.createElement(_CalendarMonth2.default, _extends({
								className: cx('&-CalendarMonth'),
								monthOffset: slideOffset,
								initialMonth: _this.initialMonth,
								cursor: cursor,
								from: isRangeSameDay ? null : from,
								to: isRangeSameDay ? null : to,
								selectedDays: isRangeSameDay ? from : selectedDays,
								disabledDays: disabledDays,
								selectMode: selectMode,
								onDayClick: _this.handleDayClick,
								onDayMouseEnter: showCursorHighlight ? _this.handleDayMouseEnter : null,
								onDayMouseLeave: showCursorHighlight ? _this.handleDayMouseLeave : null
								// Only update CalendarMonths within frame or one position
								// away. This has issues and doesnt always behave quite right
								, shouldComponentUpdate: slideOffset - offset >= -1 && slideOffset - offset < monthsShown + 1
							}, calendarMonth.props))
						);
					}
				)
			),
			_react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_ChevronThinIcon2.default, {
					className: cx('&-chevron'),
					size: NAV_BUTTON_SIZE,
					isClickable: true,
					direction: 'right',
					onClick: this.handleNext
				})
			)
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(DateSelect);
exports.DateSelectDumb = DateSelect;