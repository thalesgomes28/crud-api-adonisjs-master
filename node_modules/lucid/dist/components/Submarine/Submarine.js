'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.SubmarineDumb = undefined;

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _Submarine = require('./Submarine.reducers');

var reducers = _interopRequireWildcard(_Submarine);

var _SplitHorizontal = require('../SplitHorizontal/SplitHorizontal');

var _SplitHorizontal2 = _interopRequireDefault(_SplitHorizontal);

var _ChevronIcon = require('../Icon/ChevronIcon/ChevronIcon');

var _ChevronIcon2 = _interopRequireDefault(_ChevronIcon);

var _GripperHorizontalIcon = require('../Icon/GripperHorizontalIcon/GripperHorizontalIcon');

var _GripperHorizontalIcon2 = _interopRequireDefault(_GripperHorizontalIcon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Submarine');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    string = _propTypes2.default.string,
    oneOf = _propTypes2.default.oneOf,
    oneOfType = _propTypes2.default.oneOfType;

/**
 * {"categories": ["layout"], "madeFrom": ["SplitHorizontal", "ChevronIcon", "GripperHorizontalIcon"]}
 *
 * `Submarine` renders a collapsible, resizeable side bar panel next to primary content.
 */

var Submarine = (0, _componentTypes.createClass)({
	displayName: 'Submarine',

	reducers: reducers,

	propTypes: {
		/**
   * Appended to the component-specific class names set on the root
   * element. Value is run through the `classnames` library.
   */
		className: string,
		/**
   * Direct children must be types {Submarine.Primary, Submarine.Bar, Submarine.Title}.
   * All content is composed as children of these respective elements.
   */
		children: node,
		/**
   * Sets the starting height of the Bar.
   */
		height: oneOfType([number, string]),
		/**
   * Force the Submarine to be expanded or collapsed.
   */
		isExpanded: bool,
		/**
   * Indicates if the Submarine should be shown or not.
   * This will override the value of isExpanded.
   */
		isHidden: bool,
		/**
   * Indicates if the Title should be shown when the Submarine is collapsed
   */
		isTitleShownCollapsed: bool,
		/**
   * Allows animated expand and collapse behavior.
   */
		isAnimated: bool,
		/**
   * Render the Submarine to the top or bottom of primary content.
   */
		position: oneOf(['top', 'bottom']),
		/**
   * Disable user resizing of the Submarine.
   */
		isResizeDisabled: bool,
		/**
   * Set the title of the Submarine.
   */
		Title: any,
		/**
   * Called when the user is currently resizing the Submarine.
   *
   * Signature: `(height, { event, props }) => {}`
   */
		onResizing: func,
		/**
   * Called when the user resizes the Submarine.
   *
   * Signature: `(height, { event, props }) => {}`
   */
		onResize: func,
		/**
   * Called when the user expands or collapses the Submarine.
   *
   * Signature: `({ event, props }) => {}`
   */
		onToggle: func
	},

	components: {
		Bar: (0, _componentTypes.createClass)({
			displayName: 'Submarine.Bar',
			propTypes: {
				/**
     * Submarine content. Also can define <Submarine.Title> here as well.
     */
				children: node,
				/**
     * Set the title of the Submarine. (alias for `Submarine.Title`)
     */
				Title: any
			}
		}),

		Primary: (0, _componentTypes.createClass)({
			displayName: 'SplitHorizontal.Primary',
			propTypes: {
				/**
     * Primary content rendered beside the Submarine.
     */
				children: node
			}
		}),

		Title: (0, _componentTypes.createClass)({
			displayName: 'Submarine.Title',
			propName: ['Title'],
			propTypes: {
				/**
     * Submarine title.
     */
				children: node
			}
		})
	},

	getDefaultProps: function getDefaultProps() {
		return {
			isExpanded: true,
			isAnimated: true,
			height: 250,
			position: 'bottom',
			isResizeDisabled: false,
			isHidden: false,
			isTitleShownCollapsed: false,
			onResizing: _noop3.default,
			onResize: _noop3.default,
			onToggle: _noop3.default
		};
	},
	handleExpanderClick: function handleExpanderClick(event) {
		var onToggle = this.props.onToggle;


		onToggle({ props: this.props, event: event });
	},
	handleResizing: function handleResizing(height, _ref) {
		var event = _ref.event;
		var onResizing = this.props.onResizing;


		onResizing(height, { props: this.props, event: event });
	},
	handleResize: function handleResize(height, _ref2) {
		var event = _ref2.event;
		var onResize = this.props.onResize;


		onResize(height, { props: this.props, event: event });
	},
	render: function render() {
		var _props = this.props,
		    children = _props.children,
		    className = _props.className,
		    isExpanded = _props.isExpanded,
		    isAnimated = _props.isAnimated,
		    position = _props.position,
		    isResizeDisabled = _props.isResizeDisabled,
		    height = _props.height,
		    isHidden = _props.isHidden,
		    isTitleShownCollapsed = _props.isTitleShownCollapsed,
		    passThroughs = _objectWithoutProperties(_props, ['children', 'className', 'isExpanded', 'isAnimated', 'position', 'isResizeDisabled', 'height', 'isHidden', 'isTitleShownCollapsed']);

		var primaryProps = (0, _get3.default)((0, _first3.default)((0, _componentTypes.filterTypes)(children, Submarine.Primary)), 'props', {}); // props from first Primary
		var barProps = (0, _get3.default)((0, _first3.default)((0, _componentTypes.filterTypes)(children, Submarine.Bar)), 'props', {}); // props from first Bar
		var titleProps = (0, _get3.default)((0, _componentTypes.findTypes)(barProps, Submarine.Title).concat((0, _componentTypes.findTypes)(this.props, Submarine.Title)), // get titles from Bar and parent Submarine
		'[0].props', // select props from the first title element
		_react2.default.createElement(Submarine.Title, null).props // default props
		);

		var PrimaryPane = void 0,
		    BarPane = void 0; // using Left/Right Pane as primary depends on position
		if (position !== 'bottom') {
			PrimaryPane = _SplitHorizontal2.default.BottomPane;
			BarPane = _SplitHorizontal2.default.TopPane;
		} else {
			PrimaryPane = _SplitHorizontal2.default.TopPane;
			BarPane = _SplitHorizontal2.default.BottomPane;
		}

		// leave 33px of sidebar to stick out when collapsed, or 0px if hidden
		var collapseShift = isHidden ? 0 : 33;

		return _react2.default.createElement(
			_SplitHorizontal2.default,
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Submarine, [], false), {
				className: cx('&', {
					'&-is-resize-disabled': isResizeDisabled,
					'&-is-position-bottom': position === 'bottom',
					'&-is-position-top': position !== 'bottom'
				}, className),
				isAnimated: isAnimated,
				isExpanded: isExpanded && !isHidden,
				collapseShift: collapseShift,
				onResizing: this.handleResizing,
				onResize: this.handleResize
			}),
			_react2.default.createElement(
				BarPane,
				_extends({}, (0, _componentTypes.omitProps)(barProps, Submarine.Bar, [], false), {
					className: cx('&-Bar', barProps.className),
					height: height
				}),
				_react2.default.createElement('div', { className: cx('&-Bar-overlay') }),
				_react2.default.createElement(
					'div',
					{ className: cx('&-Bar-header') },
					_react2.default.createElement('div', _extends({}, titleProps, {
						className: cx('&-Bar-Title', { '&-Bar-Title-is-shown-collapsed': isTitleShownCollapsed }, titleProps.className)
					})),
					_react2.default.createElement(
						'div',
						{
							className: cx('&-expander'),
							onMouseDown: this.handleExpanderClick
						},
						_react2.default.createElement(_ChevronIcon2.default, {
							direction: isExpanded && position === 'bottom' || !isExpanded && position !== 'bottom' ? 'down' : 'up'
						})
					)
				),
				_react2.default.createElement(
					'div',
					{ className: cx('&-Bar-content') },
					barProps.children
				)
			),
			_react2.default.createElement(
				_SplitHorizontal2.default.Divider,
				{ className: cx('&-Divider') },
				_react2.default.createElement(_GripperHorizontalIcon2.default, { className: cx('&-Divider-gripper') })
			),
			_react2.default.createElement(PrimaryPane, _extends({}, primaryProps, {
				className: cx('&-Primary', primaryProps.className),
				isPrimary: true
			}))
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(Submarine);
exports.SubmarineDumb = Submarine;