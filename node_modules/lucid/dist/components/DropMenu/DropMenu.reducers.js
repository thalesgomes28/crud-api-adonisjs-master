'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _isNull2 = require('lodash/isNull');

var _isNull3 = _interopRequireDefault(_isNull2);

var _last2 = require('lodash/last');

var _last3 = _interopRequireDefault(_last2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.onExpand = onExpand;
exports.onCollapse = onCollapse;
exports.onSelect = onSelect;
exports.onFocusNext = onFocusNext;
exports.onFocusPrev = onFocusPrev;
exports.onFocusOption = onFocusOption;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function onExpand(state) {
	var selectedIndices = state.selectedIndices;


	return _extends({}, state, {
		isExpanded: true,
		focusedIndex: (0, _isEmpty3.default)(selectedIndices) ? null : (0, _last3.default)(selectedIndices)
	});
}

function onCollapse(state) {
	return _extends({}, state, {
		isExpanded: false
	});
}

function onSelect(state, optionIndex) {
	return _extends({}, state, {
		selectedIndices: [optionIndex],
		isExpanded: false
	});
}

function onFocusNext(state) {
	var focusedIndex = state.focusedIndex;

	var nextFocusedIndex = focusedIndex;

	if ((0, _isNull3.default)(focusedIndex)) {
		nextFocusedIndex = 0;
	} else if ((0, _isNumber3.default)(focusedIndex)) {
		nextFocusedIndex = focusedIndex + 1;
	}

	return _extends({}, state, {
		focusedIndex: nextFocusedIndex
	});
}

function onFocusPrev(state) {
	var focusedIndex = state.focusedIndex;

	var nextFocusedIndex = focusedIndex;

	if ((0, _isNull3.default)(focusedIndex) || focusedIndex === 0) {
		nextFocusedIndex = null;
	} else if ((0, _isNumber3.default)(focusedIndex)) {
		nextFocusedIndex = focusedIndex - 1;
	}

	return _extends({}, state, {
		focusedIndex: nextFocusedIndex
	});
}

function onFocusOption(state, optionIndex) {
	return _extends({}, state, {
		focusedIndex: optionIndex
	});
}