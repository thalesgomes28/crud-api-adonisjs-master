'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _startsWith2 = require('lodash/startsWith');

var _startsWith3 = _interopRequireDefault(_startsWith2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _charts = require('../../constants/charts');

var chartConstants = _interopRequireWildcard(_charts);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Line');

var string = _propTypes2.default.string,
    object = _propTypes2.default.object,
    bool = _propTypes2.default.bool;

/**
 * {"categories": ["visualizations", "geoms"]}
 *
 * *For use within an `svg`*
 *
 * Lines are typically used for line charts and are pretty much a thin wrapper
 * around svg paths.
 *
 */

var Line = (0, _componentTypes.createClass)({
	displayName: 'Line',

	propTypes: {
		/**
   * Passed through to the root element.
   */
		style: object,
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,
		/**
   * The path for the line.
   */
		d: string,
		/**
   * Strings should match an existing color class unless they start with a
   * '#' for specific colors. E.g.:
   *
   * - `COLOR_0`
   * - `COLOR_GOOD`
   * - `'#123abc'`
   */
		color: string,
		/**
   * Display a dotted line.
   */
		isDotted: bool
	},

	getDefaultProps: function getDefaultProps() {
		return {
			color: chartConstants.COLOR_0,
			isDotted: false
		};
	},
	render: function render() {
		var _cx;

		var _props = this.props,
		    className = _props.className,
		    color = _props.color,
		    isDotted = _props.isDotted,
		    d = _props.d,
		    style = _props.style,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'color', 'isDotted', 'd', 'style']);

		var isCustomColor = (0, _startsWith3.default)(color, '#');
		var colorStyle = isCustomColor ? { fill: color, stroke: color } : null;

		return _react2.default.createElement('path', _extends({}, (0, _componentTypes.omitProps)(passThroughs, Line), {
			style: _extends({}, style, colorStyle),
			className: cx(className, '&', (_cx = {}, _defineProperty(_cx, '&-' + color, !isCustomColor), _defineProperty(_cx, '&-is-dotted', isDotted), _cx)),
			d: d
		}));
	}
});

exports.default = Line;