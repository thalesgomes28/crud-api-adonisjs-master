'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _take2 = require('lodash/take');

var _take3 = _interopRequireDefault(_take2);

var _takeRight2 = require('lodash/takeRight');

var _takeRight3 = _interopRequireDefault(_takeRight2);

var _times2 = require('lodash/times');

var _times3 = _interopRequireDefault(_times2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _SlidePanel = require('../SlidePanel/SlidePanel');

var _SlidePanel2 = _interopRequireDefault(_SlidePanel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-InfiniteSlidePanel');

var func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    oneOfType = _propTypes2.default.oneOfType,
    string = _propTypes2.default.string;


var modulo = function modulo(n, a) {
	return a - n * Math.floor(a / n);
};

/** {"categories": ["helpers"], "madeFrom": ["SlidePanel"]}
 *
 * A container for rendering an infinite set of horizontal slides. Translation
 * between slides is controlled by passing in a new `offset`.  Can hook into
 * touch events to update the `offset`. This component is made from SlidePanel,
 * so it accepts the same props.
 */
var InfiniteSlidePanel = (0, _componentTypes.createClass)({
	displayName: 'InfiniteSlidePanel',
	_isPrivate: true,

	components: {
		Slide: (0, _componentTypes.createClass)({
			displayName: 'InfiniteSlidePanel.Slide',
			propName: 'Slide'
		})
	},

	propTypes: {
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,

		/**
   * The only allowed child is a render function which is passed the current
   * slide's offset and returns the slide contents:
   *   `(slideOffset) => { //returns React.PropTypes.node }`
   * Alternatively, you could pass one <InfiniteSlidePanel.Slide {...}>
   * element with the render function. The only reason do to the latter is to
   * pass addiontal props to the slide element.
   */
		children: oneOfType([node, func]),

		/**
   * The offset of the left-most rendered slide.
   */
		offset: number,

		/**
   * Max number of viewable slides to show simultaneously.
   */
		slidesToShow: number,

		/**
   * Called when a user's swipe would change the offset. Callback passes
   * number of slides by the user (positive for forward swipes, negative for
   * backwards swipes).
   *
   * Signature: `(slidesSwiped, { event, props }) => {}`
   */
		onSwipe: func,

		/**
   * The number of slides rendered at any given time. A good rule-of-thumb is
   * that this should be at least 4 times the `slidesToShow` value.
   */
		totalSlides: number
	},

	getDefaultProps: function getDefaultProps() {
		return {
			offset: 0,
			slidesToShow: 1,
			onSwipe: _noop3.default,
			totalSlides: 8
		};
	},


	render: function render() {
		var _props = this.props,
		    children = _props.children,
		    className = _props.className,
		    offset = _props.offset,
		    slidesToShow = _props.slidesToShow,
		    onSwipe = _props.onSwipe,
		    totalSlides = _props.totalSlides,
		    passThroughs = _objectWithoutProperties(_props, ['children', 'className', 'offset', 'slidesToShow', 'onSwipe', 'totalSlides']);

		var slide = (0, _componentTypes.getFirst)(this.props, InfiniteSlidePanel.Slide, _react2.default.createElement(
			InfiniteSlidePanel.Slide,
			null,
			children
		));
		var slideChildRenderFunction = slide.props.children;
		if (!(0, _isFunction3.default)(slideChildRenderFunction)) {
			throw new Error('InfiniteSlidePanel children must be a single function `(slideOffset) => { /* returns React.PropTypes.node */ }`');
		}

		var halfSlides = Math.floor(totalSlides / 2);
		var circularOffset = modulo(totalSlides, offset);
		var forwardSlideOffsets = (0, _times3.default)(totalSlides - halfSlides, function (n) {
			return offset + n;
		});
		var backwardSlideOffsets = (0, _times3.default)(halfSlides, function (n) {
			return offset + n - halfSlides;
		});
		var transposedSlideOffsets = forwardSlideOffsets.concat(backwardSlideOffsets);
		var slideOffsetArray = (0, _takeRight3.default)(transposedSlideOffsets, circularOffset).concat((0, _take3.default)(transposedSlideOffsets, totalSlides - circularOffset));

		return _react2.default.createElement(
			_SlidePanel2.default,
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, InfiniteSlidePanel, [], false), {
				className: cx('&', className),
				offset: offset,
				slidesToShow: slidesToShow,
				onSwipe: onSwipe,
				isLooped: true
			}),
			(0, _map3.default)(slideOffsetArray, function (slideOffset, elementOffset) {
				return _react2.default.createElement(
					_SlidePanel2.default.Slide,
					_extends({
						key: elementOffset
					}, slide.props, {
						className: cx({
							'&-Slide-in-frame': slideOffset - offset < slidesToShow && slideOffset - offset >= 0
						}, slide.props.className)
					}),
					slideChildRenderFunction(slideOffset)
				);
			})
		);
	}
});

exports.default = InfiniteSlidePanel;