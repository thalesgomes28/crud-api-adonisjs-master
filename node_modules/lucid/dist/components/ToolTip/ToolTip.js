'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ToolTipDumb = undefined;

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ContextMenu = require('../ContextMenu/ContextMenu');

var _ContextMenu2 = _interopRequireDefault(_ContextMenu);

var _CrossIcon = require('../Icon/CrossIcon/CrossIcon');

var _CrossIcon2 = _interopRequireDefault(_CrossIcon);

var _ToolTip = require('./ToolTip.reducers');

var reducers = _interopRequireWildcard(_ToolTip);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-ToolTip');
var flyOutCx = cx.bind('&-FlyOut');

var bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    object = _propTypes2.default.object,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string,
    oneOfType = _propTypes2.default.oneOfType;
var Target = _ContextMenu2.default.Target,
    FlyOut = _ContextMenu2.default.FlyOut;

/**
 * {"categories": ["communication"], "madeFrom": ["ContextMenu"]}
 *
 * A utility component that creates a transient message anchored to another
 * component.
 */

var ToolTip = (0, _componentTypes.createClass)({
	displayName: 'ToolTip',

	reducers: reducers,

	propTypes: {
		/**
   * `children` should include exactly one ToolTip.Target and one ToolTip.FlyOut.
   */
		children: node,
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,
		/**
   * Set this to `true` if you want to have a `x` close icon.
   */
		isCloseable: bool,
		/**
   * Style variations of the `ToolTip`.
   */
		kind: oneOf(['primary', 'success', 'warning', 'danger', 'info', 'default']),
		/**
   * Called when the user closes the `Banner`.
   *
   * Signature: `({ event, props }) => {}`
   */
		onClose: func,
		/**
   * Passed through to the root target element.
   */
		style: object,
		/**
   * Passed through to the root FlyOut element.
   */
		flyOutStyle: object,
		/**
   * maximum width of the ToolTip FlyOut. Defaults to 200px.
   */
		flyOutMaxWidth: oneOfType([number, string]),
		/**
   * direction of the FlyOut relative to Target. Defaults to `'down'`.
   */
		direction: oneOf(['down', 'up', 'right', 'left']),
		/**
   * alignment of the Flyout relative to Target in the cross axis from `direction` Defaults to `'start'`
   */
		alignment: oneOf(['start', 'center', 'end']),
		/**
   * Indicates whether the ToolTip will render or not. Defaults to `true`.
   */
		isExpanded: bool,
		/**
   * Called when cursor moves over the target
   * Signature: `({ props, event }) => {}`
   */
		onMouseOver: func,
		/**
   * Called when cursor leaves the target and the ToolTip
   * Signature: `({ props, event }) => {}`
   */
		onMouseOut: func,
		/**
   * The `id` of the FlyOut portal element that is appended to `document.body`. Defaults to a generated `id`.
   */
		portalId: string
	},

	components: {
		/**
   * The hover target that will trigger the ToolTip to be displayed.
   */
		Target: (0, _componentTypes.createClass)({
			displayName: 'ToolTip.Target'
		}),
		/**
   * The title displayed at the top of the ToolTip.
   */
		Title: (0, _componentTypes.createClass)({
			displayName: 'ToolTip.Title'
		}),
		/**
   * The body of the ToolTip displayed below the Title.
   */
		Body: (0, _componentTypes.createClass)({
			displayName: 'ToolTip.Body'
		})
	},

	getDefaultProps: function getDefaultProps() {
		return {
			alignment: _ContextMenu2.default.CENTER,
			direction: _ContextMenu2.default.UP,
			flyOutStyle: {},
			isCloseable: false,
			isExpanded: false,
			kind: 'default',
			onClose: _noop3.default,
			onMouseOut: _noop3.default,
			onMouseOver: _noop3.default,
			portalId: null
		};
	},
	getInitialState: function getInitialState() {
		return {
			isMouseOverFlyout: false,
			isMouseOverTarget: false
		};
	},
	handleMouseOut: function handleMouseOut(event) {
		var _this = this;

		setTimeout(function () {
			var props = _this.props,
			    _state = _this.state,
			    isMouseOverFlyout = _state.isMouseOverFlyout,
			    isMouseOverTarget = _state.isMouseOverTarget,
			    onMouseOut = _this.props.onMouseOut;

			if (!isMouseOverFlyout && !isMouseOverTarget) {
				onMouseOut({ props: props, event: event });
			}
		}, 100);
	},
	handleMouseOverFlyout: function handleMouseOverFlyout() {
		this.setState({ isMouseOverFlyout: true });
	},
	handleMouseOutFlyout: function handleMouseOutFlyout() {
		this.setState({ isMouseOverFlyout: false });
		this.handleMouseOut();
	},
	handleMouseOverTarget: function handleMouseOverTarget(event) {
		this.setState({ isMouseOverTarget: true });
		this.props.onMouseOver({ props: this.props, event: event });
	},
	handleMouseOutTarget: function handleMouseOutTarget() {
		this.setState({ isMouseOverTarget: false });
		this.handleMouseOut();
	},
	handleClose: function handleClose(event) {
		this.props.onClose({ event: event, props: this.props });
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    alignment = _props.alignment,
		    direction = _props.direction,
		    flyOutMaxWidth = _props.flyOutMaxWidth,
		    flyOutStyle = _props.flyOutStyle,
		    isCloseable = _props.isCloseable,
		    isExpanded = _props.isExpanded,
		    kind = _props.kind,
		    portalId = _props.portalId,
		    style = _props.style,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'alignment', 'direction', 'flyOutMaxWidth', 'flyOutStyle', 'isCloseable', 'isExpanded', 'kind', 'portalId', 'style']);

		var targetProps = (0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, ToolTip.Target), 'props'));
		var title = (0, _get3.default)((0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, ToolTip.Title), 'props')), 'children');
		var body = (0, _get3.default)((0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, ToolTip.Body), 'props')), 'children');
		var getAlignmentOffset = function getAlignmentOffset(n) {
			return alignment === _ContextMenu2.default.CENTER ? 0 : alignment === _ContextMenu2.default.START ? n / 2 - 22.5 : -(n / 2 - 22.5);
		};

		return _react2.default.createElement(
			_ContextMenu2.default,
			_extends({
				className: cx('&', className),
				alignment: _ContextMenu2.default.CENTER,
				direction: direction,
				directonOffset: 15,
				getAlignmentOffset: getAlignmentOffset,
				isExpanded: isExpanded,
				style: style,
				portalId: portalId
			}, (0, _componentTypes.omitProps)(passThroughs, ToolTip, [], false), {
				onMouseOver: this.handleMouseOverTarget,
				onMouseOut: this.handleMouseOutTarget
			}),
			_react2.default.createElement(
				Target,
				_extends({}, targetProps, {
					className: cx((0, _get3.default)(targetProps, 'className'), '&-Target')
				}),
				(0, _get3.default)(targetProps, 'children')
			),
			_react2.default.createElement(
				FlyOut,
				{
					style: _extends({}, flyOutStyle, {
						maxWidth: flyOutMaxWidth || flyOutStyle.maxWidth || 200
					}),
					className: flyOutCx(className, '&', '&-' + direction, '&-' + alignment, '&-' + kind),
					onMouseOver: this.handleMouseOverFlyout,
					onMouseOut: this.handleMouseOutFlyout
				},
				isCloseable ? _react2.default.createElement(_CrossIcon2.default, {
					onClick: this.handleClose,
					className: flyOutCx('&-close')
				}) : null,
				!(0, _isNil3.default)(title) ? _react2.default.createElement(
					'h2',
					{ className: flyOutCx('&-Title') },
					title
				) : null,
				body
			)
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(ToolTip);
exports.ToolTipDumb = ToolTip;