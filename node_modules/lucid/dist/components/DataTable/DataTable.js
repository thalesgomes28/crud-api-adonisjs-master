'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _times2 = require('lodash/times');

var _times3 = _interopRequireDefault(_times2);

var _toString2 = require('lodash/toString');

var _toString3 = _interopRequireDefault(_toString2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _isNull2 = require('lodash/isNull');

var _isNull3 = _interopRequireDefault(_isNull2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _partial2 = require('lodash/partial');

var _partial3 = _interopRequireDefault(_partial2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _every2 = require('lodash/every');

var _every3 = _interopRequireDefault(_every2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _size2 = require('lodash/size');

var _size3 = _interopRequireDefault(_size2);

var _clamp2 = require('lodash/clamp');

var _clamp3 = _interopRequireDefault(_clamp2);

var _some2 = require('lodash/some');

var _some3 = _interopRequireDefault(_some2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _reduce2 = require('lodash/reduce');

var _reduce3 = _interopRequireDefault(_reduce2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _Checkbox = require('../Checkbox/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _EmptyStateWrapper = require('../EmptyStateWrapper/EmptyStateWrapper');

var _EmptyStateWrapper2 = _interopRequireDefault(_EmptyStateWrapper);

var _ScrollTable = require('../ScrollTable/ScrollTable');

var _ScrollTable2 = _interopRequireDefault(_ScrollTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Thead = _ScrollTable2.default.Thead,
    Tbody = _ScrollTable2.default.Tbody,
    Tr = _ScrollTable2.default.Tr,
    Th = _ScrollTable2.default.Th,
    Td = _ScrollTable2.default.Td;


var cx = _styleHelpers.lucidClassNames.bind('&-DataTable');

var any = _propTypes2.default.any,
    func = _propTypes2.default.func,
    number = _propTypes2.default.number,
    object = _propTypes2.default.object,
    string = _propTypes2.default.string,
    bool = _propTypes2.default.bool,
    arrayOf = _propTypes2.default.arrayOf;

/**
 *
 * {"categories": ["table"], "madeFrom": ["Checkbox", "EmptyStateWrapper", "ScrollTable"]}
 *
 * `DataTable` provides a simple abstraction over the `Table` component to make it easier to define data-driven tables and render an array of objects.
 */

var DataTable = (0, _componentTypes.createClass)({
	displayName: 'DataTable',

	propTypes: {
		/**
   * Class names that are appended to the defaults.
   */
		className: string,
		/**
   * Array of objects to be rendered in the table. Object keys match the `field` of each defined `DataTable.Column`.
   */
		data: arrayOf(object),
		/**
   * The text to display in cells which have no data.
   */
		emptyCellText: string,
		/**
   * Render each row item to be navigable, allowing `onRowClick` to be triggered.
   */
		isActionable: bool,
		/**
   * If `true`, the table will be set to fill the width of its parent container.
   */
		isFullWidth: bool,
		/**
   * Controls the visibility of the `LoadingMessage`.
   */
		isLoading: bool,
		/**
   * Render a checkbox in the first column allowing `onSelect` and `onSelectAll` to be triggered.
   */
		isSelectable: bool,
		/**
   * Styles that are passed through to the root container.
   */
		style: object,
		/**
   * The minimum number of rows to rendered. If not enough data is provided, the remainder will be shown as empty rows.
   */
		minRows: number,
		/**
   * Handler for row click. Signature is `(object, index, { props, event }) => {...}`
   */
		onRowClick: func,
		/**
   * Handler for checkbox selection. Signature is `(object, index, { props, event }) => {...}`
   */
		onSelect: func,
		/**
   * Handler for checkbox selection in the table header. Signature is `({ props, event }) => {...}`
   */
		onSelectAll: func,
		/**
   * Handler for column header click (for sorting). Signature is `(field, { props, event }) => {...}`
   */
		onSort: func,
		/**
   * *Child Element*
   *
   * Used to define a column of the table. It accepts the same props as `Table.Th` in addition to:
   *
   * - the required prop `field`
   * - the optional prop `title`
   */
		Column: any,
		/**
   * *Child Element*
   *
   * Used to Group defined `Column`s in the table. It accepts the same props as `Table.Th` in addition to:
   *
   * - the optional prop `title`
   */
		ColumnGroup: any
	},

	getDefaultProps: function getDefaultProps() {
		return {
			emptyCellText: '--',
			isActionable: false,
			isSelectable: false,
			onRowClick: _noop3.default,
			onSelect: _noop3.default,
			onSelectAll: _noop3.default,
			onSort: _noop3.default,
			minRows: 10
		};
	},


	components: {
		/**
   * Renders a `Th` for the table. It accepts all the props of `Table.Th`
   */
		Column: (0, _componentTypes.createClass)({
			displayName: 'DataTable.Column',
			propName: 'Column',
			propTypes: {
				field: string.isRequired,
				title: string
			}
		}),
		/**
   * Renders a group of `Th`s.  It accepts all the props of Table.Th
   */
		ColumnGroup: (0, _componentTypes.createClass)({
			displayName: 'DataTable.ColumnGroup',
			propName: 'ColumnGroup',
			propTypes: {
				title: string
			},
			getDefaultProps: function getDefaultProps() {
				return { align: 'center' };
			}
		}),
		/**
   * Renders wrapper when the data table has no data.
   */
		EmptyStateWrapper: _EmptyStateWrapper2.default
	},

	statics: {
		shouldColumnHandleSort: function shouldColumnHandleSort(column) {
			return (0, _isNil3.default)(column.isSortable) ? column.isSorted : column.isSortable;
		}
	},

	handleSelect: function handleSelect(rowIndex, _ref) {
		var event = _ref.event;
		var _props = this.props,
		    data = _props.data,
		    onSelect = _props.onSelect;


		onSelect(data[rowIndex], rowIndex, { props: this.props, event: event });
	},
	handleSelectAll: function handleSelectAll(_ref2) {
		var event = _ref2.event;
		var onSelectAll = this.props.onSelectAll;


		onSelectAll({ props: this.props, event: event });
	},
	handleRowClick: function handleRowClick(rowIndex, event) {
		var _props2 = this.props,
		    data = _props2.data,
		    onRowClick = _props2.onRowClick;


		var targetTagName = event.target.tagName.toLowerCase();
		if (targetTagName === 'td' || targetTagName === 'tr') {
			onRowClick(data[rowIndex], rowIndex, { props: this.props, event: event });
		}
	},
	handleSort: function handleSort(field, event) {
		var onSort = this.props.onSort;


		event.stopPropagation();
		event.preventDefault();
		event.bubbles = false;
		onSort(field, { props: this.props, event: event });
	},
	render: function render() {
		var _this = this;

		var _props3 = this.props,
		    className = _props3.className,
		    data = _props3.data,
		    emptyCellText = _props3.emptyCellText,
		    isActionable = _props3.isActionable,
		    isFullWidth = _props3.isFullWidth,
		    isLoading = _props3.isLoading,
		    isSelectable = _props3.isSelectable,
		    style = _props3.style,
		    minRows = _props3.minRows,
		    passThroughs = _objectWithoutProperties(_props3, ['className', 'data', 'emptyCellText', 'isActionable', 'isFullWidth', 'isLoading', 'isSelectable', 'style', 'minRows']);

		var childComponentElements = (0, _componentTypes.findTypes)(this.props, [DataTable.Column, DataTable.ColumnGroup]);
		var flattenedColumns = (0, _reduce3.default)(childComponentElements, function (acc, childComponentElement) {
			if (childComponentElement.type === DataTable.Column) {
				return acc.concat([{ props: childComponentElement.props, columnGroupProps: null }]);
			}
			if (childComponentElement.type === DataTable.ColumnGroup) {
				return acc.concat((0, _map3.default)((0, _componentTypes.findTypes)(childComponentElement.props, DataTable.Column), function (columnChildComponent) {
					return {
						props: columnChildComponent.props,
						columnGroupProps: childComponentElement.props
					};
				}));
			}
		}, []);

		var hasGroupedColumns = (0, _some3.default)(childComponentElements, function (childComponentElement) {
			return childComponentElement.type === DataTable.ColumnGroup;
		});

		var emptyStateWrapper = (0, _componentTypes.getFirst)(this.props, DataTable.EmptyStateWrapper, _react2.default.createElement(DataTable.EmptyStateWrapper, {
			Title: 'No items found.',
			Body: 'Try creating a new object or removing a filter.'
		}));

		var fillerRowCount = (0, _clamp3.default)(minRows - (0, _size3.default)(data), 0, Infinity);

		return _react2.default.createElement(
			_EmptyStateWrapper2.default,
			_extends({}, emptyStateWrapper.props, {
				isEmpty: (0, _isEmpty3.default)(data),
				isLoading: isLoading
			}),
			emptyStateWrapper.props.children,
			_react2.default.createElement(
				_ScrollTable2.default,
				_extends({
					style: style,
					tableWidth: isFullWidth ? '100%' : null
				}, (0, _componentTypes.omitProps)(passThroughs, DataTable, [], false), {
					className: cx('&', {
						'&-full-width': isFullWidth
					}, className)
				}),
				_react2.default.createElement(
					Thead,
					null,
					_react2.default.createElement(
						Tr,
						null,
						isSelectable ? _react2.default.createElement(
							Th,
							{ rowSpan: hasGroupedColumns ? 2 : null, width: 24 },
							_react2.default.createElement(_Checkbox2.default, {
								isSelected: (0, _every3.default)(data, 'isSelected'),
								onSelect: this.handleSelectAll
							})
						) : null,
						(0, _map3.default)(childComponentElements, function (_ref3, index) {
							var props = _ref3.props,
							    type = _ref3.type;
							return type === DataTable.Column ? _react2.default.createElement(
								Th,
								_extends({}, (0, _omit3.default)(props, ['field', 'children', 'width', 'title']), {
									onClick: DataTable.shouldColumnHandleSort(props) ? (0, _partial3.default)(_this.handleSort, props.field) : null,
									style: {
										width: props.width
									},
									rowSpan: hasGroupedColumns ? 2 : null,
									key: (0, _get3.default)(props, 'field', index)
								}),
								props.title || props.children
							) : _react2.default.createElement(
								Th,
								_extends({
									colSpan: (0, _size3.default)((0, _componentTypes.filterTypes)(props.children, DataTable.Column))
								}, (0, _omit3.default)(props, ['field', 'children', 'width', 'title']), {
									key: (0, _get3.default)(props, 'field', index)
								}),
								props.title || props.children
							);
						})
					),
					hasGroupedColumns ? _react2.default.createElement(
						Tr,
						null,
						(0, _reduce3.default)(flattenedColumns, function (acc, _ref4, index) {
							var columnProps = _ref4.props,
							    columnGroupProps = _ref4.columnGroupProps;
							return acc.concat((0, _isNull3.default)(columnGroupProps) ? [] : [_react2.default.createElement(
								Th,
								_extends({}, (0, _componentTypes.omitProps)(columnProps, DataTable.Column, [], false), {
									onClick: DataTable.shouldColumnHandleSort(columnProps) ? (0, _partial3.default)(_this.handleSort, columnProps.field) : null,
									style: {
										width: columnProps.width
									},
									key: (0, _get3.default)(columnProps, 'field', index)
								}),
								columnProps.title || columnProps.children
							)]);
						}, [])
					) : null
				),
				_react2.default.createElement(
					Tbody,
					null,
					(0, _map3.default)(data, function (row, index) {
						return _react2.default.createElement(
							Tr,
							_extends({}, (0, _pick3.default)(row, ['isDisabled', 'isActive', 'isSelected']), {
								onClick: (0, _partial3.default)(_this.handleRowClick, index),
								isActionable: isActionable,
								key: 'row' + index
							}),
							isSelectable ? _react2.default.createElement(
								Td,
								null,
								_react2.default.createElement(_Checkbox2.default, {
									isSelected: row.isSelected,
									onSelect: (0, _partial3.default)(_this.handleSelect, index)
								})
							) : null,
							(0, _map3.default)(flattenedColumns, function (_ref5, columnIndex) {
								var columnProps = _ref5.props;

								var cellValue = (0, _get3.default)(row, columnProps.field);
								var isEmpty = (0, _isEmpty3.default)((0, _toString3.default)(cellValue));

								return _react2.default.createElement(
									Td,
									_extends({}, (0, _omit3.default)(columnProps, ['field', 'children', 'width', 'title', 'isSortable', 'isSorted', 'isResizable']), {
										style: {
											width: columnProps.width
										},
										key: 'row' + index + (0, _get3.default)(columnProps, 'field', columnIndex)
									}),
									isEmpty ? emptyCellText : cellValue
								);
							})
						);
					}),
					(0, _times3.default)(fillerRowCount, function (index) {
						return _react2.default.createElement(
							Tr,
							{ isDisabled: true, key: 'row' + index, style: { height: '32px' } },
							isSelectable ? _react2.default.createElement(Td, null) : null,
							(0, _map3.default)(flattenedColumns, function (_ref6, columnIndex) {
								var columnProps = _ref6.props;
								return _react2.default.createElement(Td, _extends({}, (0, _omit3.default)(columnProps, ['field', 'children', 'width', 'title', 'isSortable', 'isSorted', 'isResizable']), {
									style: {
										width: columnProps.width
									},
									key: 'row' + index + (0, _get3.default)(columnProps, 'field', columnIndex)
								}));
							})
						);
					})
				)
			)
		);
	}
});

exports.default = DataTable;