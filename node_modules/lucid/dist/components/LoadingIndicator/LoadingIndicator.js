'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _OverlayWrapper = require('../OverlayWrapper/OverlayWrapper');

var _OverlayWrapper2 = _interopRequireDefault(_OverlayWrapper);

var _LoadingMessage = require('../LoadingMessage/LoadingMessage');

var _LoadingMessage2 = _interopRequireDefault(_LoadingMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cx = _styleHelpers.lucidClassNames.bind('&-LoadingIndicator');

var bool = _propTypes2.default.bool,
    node = _propTypes2.default.node,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string;

/**
 *
 * {"categories": ["communication"], "madeFrom": ["OverlayWrapper", "LoadingMessage"]}
 *
 * A loading indicator wrapper with optional overlay.
 *
 */

var LoadingIndicator = (0, _componentTypes.createClass)({
	displayName: 'LoadingIndicator',
	propTypes: {
		/**
   * Set this to `false` if you don't want the semi-transparent overlay over
   * the wrapped content
   */
		hasOverlay: bool,
		/**
   * Class names that are appended to the defaults.
   */
		className: string,
		/**
   * Any valid React children.
   */
		children: node,
		/**
   * Controls the visibility of the `LoadingMessage` and overlay.
   */
		isLoading: bool,
		/**
   * Style variations for the overlay behind the loading indicator.
   */
		overlayKind: oneOf(['light', 'dark'])
	},

	components: { LoadingMessage: _LoadingMessage2.default },

	getDefaultProps: function getDefaultProps() {
		return {
			hasOverlay: true,
			isLoading: false,
			overlayKind: 'light'
		};
	},
	render: function render() {
		var props = this.props,
		    _props = this.props,
		    children = _props.children,
		    className = _props.className,
		    isLoading = _props.isLoading;
		var LoadingMessage = LoadingIndicator.LoadingMessage;


		var messageElement = (0, _componentTypes.getFirst)(props, LoadingMessage, _react2.default.createElement(LoadingMessage, null));
		var otherChildren = (0, _componentTypes.rejectTypes)(children, LoadingMessage);

		return _react2.default.createElement(
			_OverlayWrapper2.default,
			_extends({}, (0, _omit3.default)(props, ['children', 'className', 'isLoading']), {
				className: cx('&', className),
				isVisible: isLoading
			}),
			otherChildren,
			_react2.default.createElement(
				_OverlayWrapper2.default.Message,
				null,
				messageElement
			)
		);
	}
});

exports.default = LoadingIndicator;