'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _elementResizeDetector = require('element-resize-detector');

var _elementResizeDetector2 = _interopRequireDefault(_elementResizeDetector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Resizer');

var func = _propTypes2.default.func,
    string = _propTypes2.default.string;

/**
 * {"categories": ["utility"]}
 *
 * This is a helper component used for getting the width and height of a
 * containing element. This component doesn't take normal children. It expects
 * you to pass a single function for children. It will then call that function
 * with new `width` and `height` values if the container size changes.
 */

var Resizer = (0, _componentTypes.createClass)({
	displayName: 'Resizer',
	propTypes: {
		/**
   * Appended to the component-specific class names set on the root elements.
   */
		className: string,
		/**
   * A function that returns your rendered content with the signature:
   *
   * `(width, height) => {}`
   */
		children: func
	},

	getInitialState: function getInitialState() {
		return {
			width: 0,
			height: 0
		};
	},
	handleResize: function handleResize(_ref) {
		var offsetWidth = _ref.offsetWidth,
		    offsetHeight = _ref.offsetHeight;

		this.setState({
			width: offsetWidth,
			height: offsetHeight
		});
	},
	componentDidMount: function componentDidMount() {
		this.resizeDetector = (0, _elementResizeDetector2.default)({ strategy: 'scroll' });
		this.resizeDetector.listenTo(this._element, this.handleResize);
	},
	componentWillUnmount: function componentWillUnmount() {
		this.resizeDetector.removeListener(this._element, this.handleResize);
	},
	render: function render() {
		var _this = this;

		var _props = this.props,
		    className = _props.className,
		    passThroughs = _objectWithoutProperties(_props, ['className']);

		var _state = this.state,
		    width = _state.width,
		    height = _state.height;


		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Resizer), {
				className: cx('&', className),
				ref: function ref(_ref2) {
					return _this._element = _ref2;
				}
			}),
			this.props.children(width, height)
		);
	}
});

exports.default = Resizer;