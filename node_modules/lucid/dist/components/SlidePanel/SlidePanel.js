'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _delay2 = require('lodash/delay');

var _delay3 = _interopRequireDefault(_delay2);

var _size2 = require('lodash/size');

var _size3 = _interopRequireDefault(_size2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactMotion = require('react-motion');

var _motionSpring = require('../../constants/motion-spring');

var _styleHelpers = require('../../util/style-helpers');

var _domHelpers = require('../../util/dom-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-SlidePanel');

var bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    string = _propTypes2.default.string;


var modulo = function modulo(n, a) {
	return a - n * Math.floor(a / n);
};

/**
 * {"categories": ["helpers"]}
 *
 * A container for rendering a set of horizontal slides at at a particular
 * offset. Translation between slides is controlled by passing in a new `offset`.
 * Can hook into touch events to update the `offset`.
 */
var SlidePanel = (0, _componentTypes.createClass)({
	displayName: 'SlidePanel',
	_isPrivate: true,

	components: {
		Slide: (0, _componentTypes.createClass)({
			displayName: 'SlidePanel.Slide',
			propName: 'Slide'
		})
	},

	propTypes: {
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,

		/**
   * SlidePanel.Slide elements are passed in as children.
   */
		children: node,

		/**
   * Max number of viewable slides to show simultaneously.
   */
		slidesToShow: number,

		/**
   * The offset of the left-most rendered slide.
   */
		offset: number,

		/**
   * Animate slides transitions from changes in `offset`.
   */
		isAnimated: bool,

		/**
   * Slides are rendered in a continuous loop, where the first slide repeats
   * after the last slide and vice-versa. DOM elements are re-ordered and
   * re-used.
   */
		isLooped: bool,

		/**
   * Called when a user's swipe would change the offset. Callback passes
   * number of slides by the user (positive for forward swipes, negative for
   * backwards swipes).
   *
   * Signature: `(slidesSwiped, { event, props }) => {}`
   */
		onSwipe: func
	},

	getDefaultProps: function getDefaultProps() {
		return {
			slidesToShow: 1,
			offset: 0,
			isAnimated: true,
			onSwipe: _noop3.default,
			isLooped: false
		};
	},
	getInitialState: function getInitialState() {
		return {
			translateXPixel: 0
		};
	},
	handleTouchStart: function handleTouchStart(event) {
		this.startX = event.touches[0].screenX;
		this.isAnimated = false;
		this.isDragging = true;
	},
	handleTouchMove: function handleTouchMove(event) {
		var dX = event.touches[0].screenX - this.startX;
		this.setState({
			translateXPixel: dX
		});
	},
	handleTouchEnd: function handleTouchEnd(event) {
		var dX = event.changedTouches[0].screenX - this.startX;
		var slideWidth = this.rootNode.getBoundingClientRect().width / this.props.slidesToShow;
		var slidesSwiped = Math.round(dX / slideWidth);

		if (slidesSwiped !== 0) {
			this.props.onSwipe(-1 * slidesSwiped, { event: event, props: this.props });
		}
		this.setState({
			translateXPixel: 0
		});
		this.isAnimated = this.props.isAnimated;
		this.isDragging = false;
	},
	componentWillMount: function componentWillMount() {
		var slides = (0, _componentTypes.findTypes)(this.props, SlidePanel.Slide);
		this.isAnimated = this.props.isAnimated;
		this.isDragging = false;
		this.offsetTranslate = this.props.isLooped ? Math.floor((0, _size3.default)(slides) / 2) : 0;
	},
	componentDidMount: function componentDidMount() {
		var slides = (0, _componentTypes.findTypes)(this.props, SlidePanel.Slide);
		this.slideStrip = this.rootNode.querySelector('.lucid-SlidePanel-slidestrip');
		if (this.props.isLooped) {
			(0, _domHelpers.shiftChildren)(this.slideStrip, Math.floor((0, _size3.default)(slides) / 2));
		}
	},
	componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
		var _this = this;

		var slides = (0, _componentTypes.findTypes)(this.props, SlidePanel.Slide);
		var offsetDiff = this.props.offset - prevProps.offset;
		if (offsetDiff !== 0) {
			if (this.props.isLooped) {
				this.offsetTranslate = modulo((0, _size3.default)(slides), this.offsetTranslate - offsetDiff);
				(0, _delay3.default)(function () {
					(0, _domHelpers.shiftChildren)(_this.slideStrip, -offsetDiff);
					_this.isAnimated = false;
					_this.forceUpdate();
					_this.isAnimated = _this.props.isAnimated;
				}, 200);
			}
		}
	},


	render: function render() {
		var _this2 = this;

		var _props = this.props,
		    className = _props.className,
		    slidesToShow = _props.slidesToShow,
		    realOffset = _props.offset,
		    isLooped = _props.isLooped,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'slidesToShow', 'offset', 'isLooped']);

		var offset = realOffset + this.offsetTranslate;

		var slides = (0, _componentTypes.findTypes)(this.props, SlidePanel.Slide);
		var translateXPercentage = -1 * (100 / slidesToShow) * (isLooped ? modulo((0, _size3.default)(slides), offset) : offset);

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, SlidePanel), {
				ref: function ref(domNode) {
					_this2.rootNode = domNode;
				},
				className: cx('&', className)
			}),
			_react2.default.createElement(
				_reactMotion.Motion,
				{
					style: this.isAnimated ? {
						translateXPercentage: (0, _reactMotion.spring)(translateXPercentage, _motionSpring.QUICK_SLIDE_MOTION),
						translateXPixel: (0, _reactMotion.spring)(this.state.translateXPixel, _motionSpring.QUICK_SLIDE_MOTION)
					} : {
						translateXPercentage: translateXPercentage,
						translateXPixel: this.state.translateXPixel
					}
				},
				function (tween) {
					return _react2.default.createElement(
						'div',
						_extends({}, (0, _componentTypes.omitProps)(passThroughs, SlidePanel), {
							className: cx('&-slidestrip', className),
							style: {
								transform: _this2.isDragging ? 'translateX(calc(' + tween.translateXPercentage + '% + ' + _this2.state.translateXPixel + 'px))' : 'translateX(calc(' + tween.translateXPercentage + '% + ' + tween.translateXPixel + 'px))'
							},
							onTouchStart: _this2.handleTouchStart,
							onTouchMove: _this2.handleTouchMove,
							onTouchEnd: _this2.handleTouchEnd,
							onTouchCancel: _noop3.default
						}),
						(0, _map3.default)(slides, function (slide, offset) {
							return _react2.default.createElement('div', _extends({
								key: offset
							}, slide.props, {
								className: cx('&-Slide', slide.props.className),
								style: _extends({
									flexGrow: 1,
									flexShrink: 0,
									flexBasis: 100 / slidesToShow + '%'
								}, slide.props.style)
							}));
						})
					);
				}
			)
		);
	}
});

exports.default = SlidePanel;