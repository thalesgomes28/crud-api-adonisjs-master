'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ButtonGroupDumb = undefined;

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Button = require('../Button/Button');

var _Button2 = _interopRequireDefault(_Button);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _ButtonGroup = require('./ButtonGroup.reducers');

var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

var _stateManagement = require('../../util/state-management');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-ButtonGroup');

var any = _propTypes2.default.any,
    func = _propTypes2.default.func,
    arrayOf = _propTypes2.default.arrayOf,
    number = _propTypes2.default.number;

/**
 *
 * {"categories": ["controls", "buttons"], "madeFrom": ["Button"]}
 *
 * Button groups allow you to pair buttons together to form a seamless cluster.
 * Any props not explicitly called out are spread on to the root component.
 */

var ButtonGroup = (0, _componentTypes.createClass)({
	displayName: 'ButtonGroup',

	components: {
		/**
   * Renders a `<Button`> inside the `ButtonGroup`.
   */
		Button: (0, _componentTypes.createClass)({
			displayName: 'ButtonGroup.Button'
		})
	},

	reducers: _ButtonGroup2.default,

	propTypes: {
		/**
   * A function that is called with the index of the child button clicked.
   * `props` refers to the child button props.
   *
   * Signature: `(selectedIndex, { event, props }) => {}`
   */
		onSelect: func,

		/**
   * Appended to the component-specific class names set on the root
   * element. Value is run through the `classnames` library.
   */
		className: any,

		/**
   * All children should be `ButtonGroup.Button`s and they support the same
   * props as `Button`s.
   */
		children: any,

		/**
   * An array of currently selected `ButtonGroup.Button`s indices. You can
   * also pass the prop `isActive` to individual `ButtonGroup.Button`
   * components.
   */
		selectedIndices: arrayOf(number)
	},

	getDefaultProps: function getDefaultProps() {
		return {
			onSelect: _noop3.default,
			className: null,
			children: null,
			selectedIndices: []
		};
	},
	handleSelect: function handleSelect(_ref) {
		var event = _ref.event,
		    childProps = _ref.props;
		var callbackId = childProps.callbackId;

		var clickedButtonProps = (0, _get3.default)((0, _componentTypes.findTypes)(this.props, ButtonGroup.Button)[callbackId], 'props', {});

		// If the consumer passed in an `onClick` to the child `ButtonGroup.Button`
		// component, we should make sure to call that in addition to the
		// `ButtonGroup`'s `onSelect`.
		if ((0, _isFunction3.default)(clickedButtonProps.onClick)) {
			clickedButtonProps.onClick({ event: event, props: childProps });
		}

		this.props.onSelect(callbackId, { event: event, props: childProps });
	},
	render: function render() {
		var _this = this;

		var _props = this.props,
		    selectedIndices = _props.selectedIndices,
		    className = _props.className,
		    children = _props.children,
		    passThroughs = _objectWithoutProperties(_props, ['selectedIndices', 'className', 'children']);

		var buttonChildProps = (0, _map3.default)((0, _componentTypes.findTypes)(this.props, ButtonGroup.Button), 'props');

		return _react2.default.createElement(
			'span',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, ButtonGroup), {
				className: cx('&', className)
			}),
			(0, _map3.default)(buttonChildProps, function (buttonChildProp, index) {
				return (
					// The order of the spread operator below is important. If the
					// consumer puts `isActive` directly on a `ButtonGroup.Button`, we
					// want that to take precedence over the `selectedIndices` prop on
					// the parent `ButtonGroup`. However, we want our `onClick` at the
					// bottom because we manually handle passing the event to the
					// `ButtonGroup.Button`'s `onClick` if it exists.
					_react2.default.createElement(_Button2.default, _extends({
						isActive: (0, _includes3.default)(selectedIndices, index)
					}, buttonChildProp, {
						key: index,
						callbackId: index,
						onClick: _this.handleSelect
					}))
				);
			}),
			children
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(ButtonGroup);
exports.ButtonGroupDumb = ButtonGroup;