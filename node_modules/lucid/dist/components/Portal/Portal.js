'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _componentTypes = require('../../util/component-types');

var _styleHelpers = require('../../util/style-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cx = _styleHelpers.lucidClassNames.bind('&-Portal');

var any = _propTypes2.default.any,
    node = _propTypes2.default.node,
    string = _propTypes2.default.string;

/**
 *
 * {"categories": ["utility"]}
 *
 * A Portal component is used to render content in a container that is appended
 * to `document.body`.
 */

var Portal = (0, _componentTypes.createClass)({
	displayName: 'Portal',
	propTypes: {
		/**
   * any valid React children
   */
		children: node,
		/**
   * Appended to the component-specific class names set on the root
   * element. Value is run through the `classnames` library.
   */
		className: any,
		/**
   * The `id` of the portal element that is appended to `document.body`.
   */
		portalId: string.isRequired
	},
	render: function render() {
		return null;
	},
	componentDidMount: function componentDidMount() {
		var portalId = this.props.portalId;


		var portalElement = window.document.getElementById(portalId);
		if (!portalElement) {
			portalElement = window.document.createElement('div');
			portalElement.id = portalId;
			window.document.body.appendChild(portalElement);
		}
		this.portalElement = portalElement;
		this.componentDidUpdate();
	},
	componentWillUnmount: function componentWillUnmount() {
		window.document.body.removeChild(this.portalElement);
	},
	componentDidUpdate: function componentDidUpdate() {
		_reactDom2.default.render(_react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(this.props, Portal), {
				className: cx('&', this.props.className)
			}),
			this.props.children
		), this.portalElement);
	}
});

exports.default = Portal;