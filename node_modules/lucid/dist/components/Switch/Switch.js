'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Switch');
var bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    object = _propTypes2.default.object,
    string = _propTypes2.default.string;

/**
 * {"categories": ["controls", "toggles"]}
 *
 * This is a toggle -- a component that is in one of two particular states at
 * any given moment in time -- that uses a visualization of a physical on/off
 * switch made popular by smartphone OSes to reflect its current state.
 *
 * It uses a hidden native check box control under the hood but leverages other
 * HTML elements to visualize its state.
 */

var Switch = (0, _componentTypes.createClass)({
	displayName: 'Switch',
	propTypes: {
		/**
   * Appended to the component-specific class names set on the root
   * element.
   */
		className: string,

		/**
   * Indicates whether the component should appear and act disabled by
   * having a "greyed out" palette and ignoring user interactions.
   */
		isDisabled: bool,

		/**
   * Indicates that the component is in the "selected" state when true
   * and in the "unselected" state when false.
   */
		isSelected: bool,

		/**
   * Called when the user clicks on the component or when they press the
   * space key while the component is in focus.
   *
   * Signature: `(isSelected, { event, props }) => {}`
   */
		onSelect: func,

		/**
   * Passed through to the root element.
   */
		style: object
	},

	getDefaultProps: function getDefaultProps() {
		return {
			isDisabled: false,
			isSelected: false,
			onSelect: _noop3.default
		};
	},
	componentDidMount: function componentDidMount() {
		this.nativeElement = this.refs.nativeElement;
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    isDisabled = _props.isDisabled,
		    isSelected = _props.isSelected,
		    style = _props.style,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'isDisabled', 'isSelected', 'style']);

		return _react2.default.createElement(
			'span',
			{
				className: cx('&', {
					'&-is-disabled': isDisabled,
					'&-is-selected': isSelected
				}, className),
				onClick: this.handleClicked,
				onTouchEnd: this.handleClicked,
				style: style
			},
			_react2.default.createElement('input', _extends({
				onChange: _noop3.default
			}, (0, _componentTypes.omitProps)(passThroughs, Switch, 'children'), {
				checked: isSelected,
				className: cx('&-native'),
				disabled: isDisabled,
				ref: 'nativeElement',
				type: 'checkbox'
			})),
			_react2.default.createElement('span', { className: cx('&-visualization-container') }),
			_react2.default.createElement('span', { className: cx('&-visualization-glow') }),
			_react2.default.createElement('span', { className: cx('&-visualization-handle') })
		);
	},
	handleClicked: function handleClicked(event) {
		var _props2 = this.props,
		    isDisabled = _props2.isDisabled,
		    isSelected = _props2.isSelected,
		    onSelect = _props2.onSelect;


		event.preventDefault();

		if (!isDisabled) {
			onSelect(!isSelected, { event: event, props: this.props });
			this.nativeElement.focus();
		}
	}
});

exports.default = Switch;