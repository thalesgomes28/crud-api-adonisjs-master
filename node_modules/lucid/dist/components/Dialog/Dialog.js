'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Overlay = require('../Overlay/Overlay');

var _Overlay2 = _interopRequireDefault(_Overlay);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Dialog');

var node = _propTypes2.default.node,
    oneOf = _propTypes2.default.oneOf;


var SMALL = 'small';
var MEDIUM = 'medium';
var LARGE = 'large';

/**
 * {"categories": ["layout"], "extend": "Overlay", "madeFrom": ["Portal", "Overlay"]}
 *
 * Dialog is used to pop open a window so the user doesn't lose the context of
 * the page behind it. Extra props are spread through to the underlying `Overlay`
 */
var Dialog = (0, _componentTypes.createClass)({
	displayName: 'Dialog',

	components: {
		/**
   * Renders a `<header>`.
   */
		Header: (0, _componentTypes.createClass)({
			displayName: 'Dialog.Header',
			propName: 'Header'
		}),
		/**
   * Renders a `<footer>`.
   */
		Footer: (0, _componentTypes.createClass)({
			displayName: 'Dialog.Footer',
			propName: 'Footer'
		})
	},

	propTypes: _extends({}, _Overlay2.default.propTypes, {

		/**
   * Size variations that only affect the width of the dialog. All the sizes
   * will grow in height until they get too big, at which point they will
   * scroll inside.
   */
		size: oneOf(['small', 'medium', 'large']),

		/**
   * *Child Element* - Header contents. Only one `Header` is used.
   */
		Header: node,

		/**
   * *Child Element* - Footer contents. Only one `Footer` is used.
   */
		Footer: node
	}),

	getDefaultProps: function getDefaultProps() {
		return {
			size: MEDIUM
		};
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    size = _props.size,
		    isShown = _props.isShown,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'size', 'isShown']);

		var headerChildProp = (0, _get3.default)((0, _componentTypes.getFirst)(this.props, Dialog.Header), 'props', {});
		var footerChildProp = (0, _get3.default)((0, _componentTypes.getFirst)(this.props, Dialog.Footer), 'props', null);

		return _react2.default.createElement(
			_Overlay2.default,
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Dialog, [], false), (0, _pick3.default)(passThroughs, (0, _keys3.default)(_Overlay2.default.propTypes)), {
				isShown: isShown,
				className: cx('&', className)
			}),
			_react2.default.createElement(
				'div',
				{
					className: cx('&-window', {
						'&-window-is-small': size === SMALL,
						'&-window-is-medium': size === MEDIUM,
						'&-window-is-large': size === LARGE
					})
				},
				_react2.default.createElement('header', _extends({}, headerChildProp, { className: cx('&-header') })),
				_react2.default.createElement(
					'section',
					{ className: cx('&-body') },
					this.props.children
				),
				footerChildProp && _react2.default.createElement('footer', _extends({}, footerChildProp, { className: cx('&-footer') }))
			)
		);
	}
});

exports.default = Dialog;