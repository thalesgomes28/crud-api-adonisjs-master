'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _MinusCircleIcon = require('../Icon/MinusCircleIcon/MinusCircleIcon');

var _MinusCircleIcon2 = _interopRequireDefault(_MinusCircleIcon);

var _SuccessIcon = require('../Icon/SuccessIcon/SuccessIcon');

var _SuccessIcon2 = _interopRequireDefault(_SuccessIcon);

var _CrossIcon = require('../Icon/CrossIcon/CrossIcon');

var _CrossIcon2 = _interopRequireDefault(_CrossIcon);

var _InfoIcon = require('../Icon/InfoIcon/InfoIcon');

var _InfoIcon2 = _interopRequireDefault(_InfoIcon);

var _WarningIcon = require('../Icon/WarningIcon/WarningIcon');

var _WarningIcon2 = _interopRequireDefault(_WarningIcon);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var createElement = _react2.default.createElement;
var bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    string = _propTypes2.default.string,
    node = _propTypes2.default.node,
    oneOf = _propTypes2.default.oneOf;


var cx = _styleHelpers.lucidClassNames.bind('&-Selection');

var responsiveMap = {
	small: 'small',
	medium: 'small',
	large: 'large'
};

function defaultIcon(kind, responsiveMode) {
	return kind === 'default' ? null : kind === 'container' ? null : kind === 'success' ? _react2.default.createElement(_SuccessIcon2.default, {
		className: cx('&-Icon', '&-Icon-is-' + responsiveMode)
	}) : kind === 'danger' ? _react2.default.createElement(_MinusCircleIcon2.default, {
		className: cx('&-Icon', '&-Icon-is-' + responsiveMode)
	}) : kind === 'info' ? _react2.default.createElement(_InfoIcon2.default, {
		className: cx('&-Icon', '&-Icon-is-' + responsiveMode)
	}) : kind === 'warning' ? _react2.default.createElement(_WarningIcon2.default, {
		className: cx('&-Icon', '&-Icon-is-' + responsiveMode)
	}) : null;
}

/**
 *
 * {"categories": ["communication"]}
 *
 * Used to indicate selections. It's very similar to `Tag` but is meant to be
 * used in areas of the UI that have more space available to them.
 */
var Selection = (0, _componentTypes.createClass)({
	displayName: 'Selection',

	components: {
		Label: (0, _componentTypes.createClass)({
			displayName: 'Selection.Label',
			propName: 'Label'
		}),

		Icon: (0, _componentTypes.createClass)({
			displayName: 'Selection.Icon',
			propName: 'Icon'
		})
	},

	propTypes: {
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,
		/**
   * Applies an icon and styles for the kind of selection.
   */
		kind: oneOf(['default', 'container', 'success', 'danger', 'info', 'warning']),
		/**
   * Shows or hides the little "x" for a given item.
   */
		isRemovable: bool,
		/**
   * Gives the selection a background. This is desirable when you only have
   * one level of nested selections.
   */
		hasBackground: bool,
		/**
   * Make the content text bold. This is desirable when you only have
   * one level of nested selections.
   */
		isBold: bool,
		/**
   * Called when the close button is clicked.
   *
   * Signature: `({ props, event }) => {}`
   */
		onRemove: func,
		/**
   * Label of the component.
   */
		Label: node,
		/**
   * Display a custom icon for the selection. Generally you shouldn't need
   * this prop since the `kind` prop will pick the correct icon for you.
   */
		Icon: node,
		/**
   * Arbitrary children.
   */
		children: node,
		/**
   * Adjusts the display of this component. This should typically be driven
   * by screen size. Currently `small` and `large` are explicitly handled
   * by this component.
   */
		responsiveMode: oneOf(['small', 'medium', 'large'])
	},

	getDefaultProps: function getDefaultProps() {
		return {
			kind: 'default',
			isRemovable: true,
			onRemove: _noop3.default,
			hasBackground: false,
			isBold: false,
			responsiveMode: 'large'
		};
	},
	handleRemove: function handleRemove(event) {
		this.props.onRemove({ props: this.props, event: event });
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    kind = _props.kind,
		    isRemovable = _props.isRemovable,
		    children = _props.children,
		    hasBackground = _props.hasBackground,
		    isBold = _props.isBold,
		    responsiveModeInput = _props.responsiveMode,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'kind', 'isRemovable', 'children', 'hasBackground', 'isBold', 'responsiveMode']);

		var responsiveMode = responsiveMap[responsiveModeInput];
		var isSmall = responsiveMode === 'small';

		var selectionChildren = (0, _componentTypes.filterTypes)(children, Selection);
		var otherChildren = (0, _componentTypes.rejectTypes)(children, Selection);
		var labelProps = (0, _get3.default)((0, _componentTypes.getFirst)(this.props, Selection.Label), 'props', {});
		var iconElement = (0, _componentTypes.getFirst)(this.props, Selection.Icon);
		var iconChildren = (0, _get3.default)(iconElement, 'props.children');
		var icon = iconChildren ? createElement(iconChildren.type, _extends({}, iconChildren.props, {
			className: cx('&-Icon', iconChildren.props.className)
		})) : defaultIcon(kind, responsiveMode);

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Selection), {
				className: cx('&', '&-is-' + responsiveMode, kind && '&-' + kind, {
					'&-has-background': hasBackground,
					'&-is-bold': isBold
				}, className)
			}),
			icon,
			_react2.default.createElement(
				'div',
				{ className: cx('&-content') },
				_react2.default.createElement(
					'div',
					{ className: cx('&-label-container') },
					_react2.default.createElement('span', _extends({}, labelProps, {
						className: cx('&-label', isSmall && '&-label-is-small')
					})),
					isRemovable ? _react2.default.createElement(_CrossIcon2.default, {
						isClickable: true,
						size: isSmall ? 44 : 26,
						viewBox: isSmall ? '-6 -6 28 28' : '-3 -2 20 20',
						className: cx('&-close-button'),
						onClick: this.handleRemove
					}) : null
				),
				(0, _isEmpty3.default)(selectionChildren) ? null : _react2.default.createElement(
					'div',
					{ className: cx('&-children-container') },
					(0, _map3.default)(selectionChildren, function (_ref, i) {
						var props = _ref.props;
						return _react2.default.createElement(Selection, _extends({
							key: (0, _get3.default)((0, _componentTypes.getFirst)(props, Selection.Label), ['props', 'children'], {}) + i
						}, props));
					})
				),
				otherChildren
			)
		);
	}
});

exports.default = Selection;