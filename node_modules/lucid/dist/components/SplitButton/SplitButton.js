'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.SplitButtonDumb = undefined;

var _every2 = require('lodash/every');

var _every3 = _interopRequireDefault(_every2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _map4 = require('lodash/map');

var _map5 = _interopRequireDefault(_map4);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _Button = require('../Button/Button');

var _Button2 = _interopRequireDefault(_Button);

var _ButtonGroup = require('../ButtonGroup/ButtonGroup');

var _CaretIcon = require('../Icon/CaretIcon/CaretIcon');

var _CaretIcon2 = _interopRequireDefault(_CaretIcon);

var _DropMenu = require('../DropMenu/DropMenu');

var _SplitButton = require('./SplitButton.reducers');

var reducers = _interopRequireWildcard(_SplitButton);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-SplitButton');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    oneOf = _propTypes2.default.oneOf,
    shape = _propTypes2.default.shape,
    string = _propTypes2.default.string;

/**
 *
 * {"categories": ["controls", "buttons"], "madeFrom": ["Button", "DropMenu"]}
 *
 * SplitButtons allow you to combine a single main `Button` together with a
 * list of additional Buttons with actions which will be rendered within a
 * DropMenu.
 */

var SplitButton = (0, _componentTypes.createClass)({
	displayName: 'SplitButton',

	components: {
		/**
   * One of many potential `Button`s to render in this `SplitButton`. The
   * first `Button` will be used as the Primary button, while all others will
   * be rendered within the `DropMenu` below.
   */
		Button: (0, _componentTypes.createClass)({
			displayName: 'SplitButton.Button',
			propTypes: {
				/**
     * The children to render within the `Button`.
     */
				children: any,
				/**
     * Disables selection of the `Button`.
     */
				isDisabled: bool,
				/**
     * Called when the user clicks the `Button`.
     *
     * Signature: `({ event, props }) => {}`
     */
				onClick: func
			}
		})
	},

	reducers: reducers,

	propTypes: {
		/**
   * Object of DropMenu props which are passed through to the underlying
   * DropMenu component.
   */
		DropMenu: shape(_DropMenu.DropMenuDumb.propTypes),

		/**
   * All children should be `ButtonGroup.Button`s and they support the same
   * props as `Button`s.
   */
		children: node,

		/**
   * Appended to the component-specific class names set on the root
   * element. Value is run through the `classnames` library.
   */
		className: string,

		/**
   * Sets the direction the flyout menu will render relative to the
   * SplitButton.
   */
		direction: oneOf(['up', 'down']),

		/**
   * Style variations of the SplitButton.
   */
		kind: oneOf(['primary', 'success', 'warning', 'danger', 'info']),

		/**
   * Size variations of the SplitButton.
   */
		size: oneOf(['short', 'small', 'large']),

		/**
   * Form element type variations of SplitButton. Defaults to 'button' to avoid
   * being triggered by 'Enter' anywhere on the page. Passed through to DOM
   * Button.
   */
		type: string
	},

	getDefaultProps: function getDefaultProps() {
		return {
			direction: 'down',
			type: 'button',
			DropMenu: _DropMenu.DropMenuDumb.getDefaultProps()
		};
	},


	// Handles clicks on the Primary Button
	handleClick: function handleClick(_ref) {
		var event = _ref.event;

		var clickedButtonProps = (0, _get3.default)((0, _componentTypes.getFirst)(this.props, SplitButton.Button), 'props');

		// Stop propagation to prevent this `Click` from expanding the `DropMenu`
		event.stopPropagation();
		this.handleButtonClick(clickedButtonProps, event);
	},


	// Handles clicks in the DropMenu
	handleSelect: function handleSelect(optionIndex, _ref2) {
		var event = _ref2.event;

		var buttonChildProps = (0, _map5.default)((0, _componentTypes.filterTypes)(this.props.children, SplitButton.Button), 'props');
		this.handleButtonClick(buttonChildProps[optionIndex + 1], event);
	},
	handleButtonClick: function handleButtonClick(buttonProps, event) {
		var onCollapse = this.props.DropMenu.onCollapse;


		onCollapse();

		if ((0, _has3.default)(buttonProps, 'onClick')) {
			buttonProps.onClick({ event: event, props: buttonProps });
		}
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    kind = _props.kind,
		    direction = _props.direction,
		    type = _props.type,
		    size = _props.size,
		    dropMenuProps = _props.DropMenu,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'kind', 'direction', 'type', 'size', 'DropMenu']);

		var isExpanded = dropMenuProps.isExpanded;

		var _map2 = (0, _map5.default)((0, _componentTypes.filterTypes)(this.props.children, SplitButton.Button), 'props'),
		    _map3 = _toArray(_map2),
		    primaryButtonProps = _map3[0],
		    buttonChildProps = _map3.slice(1);

		return _react2.default.createElement(
			_DropMenu.DropMenuDumb,
			_extends({}, dropMenuProps, (0, _componentTypes.omitProps)(passThroughs, SplitButton, [], false), {
				direction: direction,
				className: cx('&', className),
				onSelect: this.handleSelect
			}),
			_react2.default.createElement(
				_DropMenu.DropMenuDumb.Control,
				null,
				_react2.default.createElement(
					_ButtonGroup.ButtonGroupDumb,
					null,
					_react2.default.createElement(_Button2.default, _extends({}, primaryButtonProps, {
						className: cx('&-Button-primary', (0, _get3.default)(primaryButtonProps, 'className')),
						kind: kind,
						type: type,
						size: size,
						onClick: this.handleClick
					})),
					_react2.default.createElement(
						_Button2.default,
						{
							className: cx('&-Button-drop'),
							hasOnlyIcon: true,
							isActive: isExpanded,
							kind: kind,
							isDisabled: (0, _every3.default)([primaryButtonProps].concat(_toConsumableArray(buttonChildProps)), 'isDisabled')
						},
						_react2.default.createElement(_CaretIcon2.default, {
							className: cx('&-CaretIcon'),
							direction: direction,
							size: 8
						})
					)
				)
			),
			(0, _map5.default)(buttonChildProps, function (buttonChildProp, index) {
				return _react2.default.createElement(_DropMenu.DropMenuDumb.Option, _extends({}, buttonChildProp, { key: index }));
			})
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(SplitButton);
exports.SplitButtonDumb = SplitButton;