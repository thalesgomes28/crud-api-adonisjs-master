'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.VerticalTabsDumb = undefined;

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _findLastIndex2 = require('lodash/findLastIndex');

var _findLastIndex3 = _interopRequireDefault(_findLastIndex2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _VerticalTabs = require('./VerticalTabs.reducers');

var reducers = _interopRequireWildcard(_VerticalTabs);

var _VerticalListMenu = require('../VerticalListMenu/VerticalListMenu');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-VerticalTabs');

var string = _propTypes2.default.string,
    number = _propTypes2.default.number,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func;

/**
 *
 * {"categories": ["navigation"], "madeFrom": ["VerticalListMenu"]}
 *
 * `VerticalTabs` provides vertically tabbed navigation. It has a flexible
 * interface that allows tab content to be passed as regular React children or
 * through props.
 */

var VerticalTabs = (0, _componentTypes.createClass)({
	displayName: 'VerticalTabs',

	components: {
		/**
   * Content that will be rendered in a tab. Be sure to nest a Title inside
   * each Tab or provide it as a prop.
   */
		Tab: (0, _componentTypes.createClass)({
			displayName: 'VerticalTabs.Tab',
			propName: 'Tab',
			propTypes: {
				/**
     * Determines if the Tab is selected.
     */
				isSelected: bool
			}
		}),
		/**
   * Titles can be provided as a child or prop to a Tab.
   */
		Title: (0, _componentTypes.createClass)({
			displayName: 'VerticalTabs.Title',
			propName: 'Title'
		})
	},

	reducers: reducers,

	propTypes: {
		/**
   * Class names that are appended to the defaults.
   */
		className: string,

		/**
   * Indicates which of the `VerticalTabs.Tab` children is currently
   * selected. The index of the last `VerticalTabs.Tab` child with
   * `isSelected` equal to `true` takes precedence over this prop.
   */
		selectedIndex: number,

		/**
   * Callback for when the user clicks a tab. Called with the index of the
   * tab that was clicked.
   *
   * Signature: `(index, { event, props}) => {}`
   */
		onSelect: func
	},

	getDefaultProps: function getDefaultProps() {
		return {
			selectedIndex: 0,
			onSelect: _noop3.default
		};
	},
	render: function render() {
		var _props = this.props,
		    className = _props.className,
		    onSelect = _props.onSelect,
		    selectedIndex = _props.selectedIndex,
		    passThroughs = _objectWithoutProperties(_props, ['className', 'onSelect', 'selectedIndex']);

		// Grab props array from each Tab


		var tabChildProps = (0, _map3.default)((0, _componentTypes.findTypes)(this.props, VerticalTabs.Tab), 'props');

		var selectedIndexFromChildren = (0, _findLastIndex3.default)(tabChildProps, {
			isSelected: true
		});

		var actualSelectedIndex = selectedIndexFromChildren !== -1 ? selectedIndexFromChildren : selectedIndex;

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, VerticalTabs), {
				className: cx('&', className)
			}),
			_react2.default.createElement(
				_VerticalListMenu.VerticalListMenuDumb,
				{
					selectedIndices: [actualSelectedIndex],
					onSelect: onSelect
				},
				(0, _map3.default)(tabChildProps, function (tabChildProp, index) {
					return _react2.default.createElement(
						_VerticalListMenu.VerticalListMenuDumb.Item,
						{
							className: cx('&-Tab', {
								'&-Tab-is-active': actualSelectedIndex === index
							}),
							key: index
						},
						_react2.default.createElement(
							'span',
							{ className: cx('&-Tab-content') },
							(0, _get3.default)((0, _componentTypes.getFirst)(tabChildProp, VerticalTabs.Title), 'props.children', '')
						)
					);
				})
			),
			_react2.default.createElement(
				'div',
				{ className: cx('&-content') },
				(0, _get3.default)(tabChildProps, [actualSelectedIndex, 'children'])
			)
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(VerticalTabs);
exports.VerticalTabsDumb = VerticalTabs;