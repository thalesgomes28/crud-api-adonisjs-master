'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.TabsDumb = undefined;

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _findLastIndex2 = require('lodash/findLastIndex');

var _findLastIndex3 = _interopRequireDefault(_findLastIndex2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _Tabs = require('./Tabs.reducers');

var reducers = _interopRequireWildcard(_Tabs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Tabs');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    number = _propTypes2.default.number,
    string = _propTypes2.default.string;

/**
 *
 * Content that will be rendered in a tab. Be sure to nest a Title inside
 * each Tab or provide it as a prop. Props other than `isDisabled`, `isSelected`,
 * and `Title` can be inferred from the parent `Tabs` component, but directly
 * provided `props` will take precedence.
 */

var Tab = (0, _componentTypes.createClass)({
	displayName: 'Tabs.Tab',

	propName: 'Tab',

	propTypes: {
		/**
   * The index of this `Tab` within the list of `Tabs`.
   */
		index: number,

		/**
   * Styles a `Tab` as disabled. This is typically used with
   * `isProgressive` to disable steps that have not been completed
   * and should not be selected until the current step has been
   * completed.
   */
		isDisabled: bool,

		/**
   * If `true`, this `Tab` is the last `Tab` in the list of `Tabs`.
   */
		isLastTab: bool,

		/**
   * If `true` then the active `Tab` will appear open on the bottom.
   */
		isOpen: bool,

		/**
   * If `true`, the `Tab` will appear as a `Progressive` tab.
   */
		isProgressive: bool,

		/**
   * If `true`, the `Tab` will appear selected.
   */
		isSelected: bool,

		/**
   * Callback for when the user clicks a `Tab`. Called with the index of the
   * `Tab` that was clicked.
   */
		onSelect: func,

		/**
   * The content to be rendered as the `Title` of the `Tab`.
   */
		Title: node,

		/**
   * If `true` component will be styled to be more visually prominent for use with page-level navigation.
   */
		isNavigation: bool
	},

	handleClick: function handleClick(event) {
		var props = this.props,
		    _props = this.props,
		    index = _props.index,
		    onSelect = _props.onSelect,
		    passThroughs = _objectWithoutProperties(_props, ['index', 'onSelect']);

		if (!props.isDisabled) {
			onSelect(index, passThroughs, event);
		}
	},
	render: function render() {
		var _props2 = this.props,
		    isDisabled = _props2.isDisabled,
		    isLastTab = _props2.isLastTab,
		    isOpen = _props2.isOpen,
		    isProgressive = _props2.isProgressive,
		    isSelected = _props2.isSelected,
		    Title = _props2.Title,
		    isNavigation = _props2.isNavigation,
		    passThroughs = _objectWithoutProperties(_props2, ['isDisabled', 'isLastTab', 'isOpen', 'isProgressive', 'isSelected', 'Title', 'isNavigation']);

		return _react2.default.createElement(
			'li',
			_extends({
				className: cx('&-Tab', {
					'&-Tab-is-active': isSelected,
					'&-Tab-is-disabled': isDisabled,
					'&-Tab-is-active-and-open': isOpen && isSelected,
					'&-Tab-is-progressive': isProgressive && !isLastTab
				}),
				onClick: this.handleClick
			}, passThroughs),
			_react2.default.createElement(
				'span',
				{ className: cx('&-Tab-content') },
				Title
			),
			isProgressive && !isLastTab && _react2.default.createElement(
				'span',
				{ className: cx('&-Tab-arrow') },
				_react2.default.createElement(
					'svg',
					{
						className: cx('&-Tab-arrow-svg'),
						viewBox: isNavigation ? '0 0 8 37' : '0 0 8 28'
					},
					_react2.default.createElement('polygon', {
						className: cx('&-Tab-arrow-background'),
						fill: '#fff',
						points: isNavigation ? '0,0 8,18.5 0,37' : '0,0 8,14 0,28'
					}),
					_react2.default.createElement('polyline', {
						className: cx('&-Tab-arrow-tab-line'),
						fill: '#fff',
						points: '0,0 1,1 0,1'
					}),
					_react2.default.createElement('polyline', {
						className: cx('&-Tab-arrow-line'),
						fill: 'none',
						stroke: '#fff',
						strokeWidth: '1',
						points: isNavigation ? '0,37 7.3,18.5 0,0' : '0,28 7.9,14 0,0'
					})
				)
			)
		);
	}
});

/**
 *
 * {"categories": ["navigation"]}
 *
 * `Tabs` provides tabbed navigation. It has a flexible interface that allows
 * tab content to be passed as regular React children or through props.
 */
var Tabs = (0, _componentTypes.createClass)({
	displayName: 'Tabs',

	components: {
		Tab: Tab,
		/**
   * Titles can be provided as a child or prop to a Tab.
   */
		Title: (0, _componentTypes.createClass)({
			displayName: 'Tabs.Title',
			propName: 'Title'
		})
	},

	reducers: reducers,

	propTypes: {
		/**
   * Class names that are appended to the defaults.
   */
		className: string,

		/**
   * Indicates which of the `Tabs.Tab` children is currently selected. The
   * index of the last `Tabs.Tab` child with `isSelected` equal to `true`
   * takes precedence over this prop.
   */
		selectedIndex: number,

		/**
   * Callback for when the user clicks a tab. Called with the index of the
   * tab that was clicked.
   */
		onSelect: func,

		/**
   * If `true` then the active tab will appear open on the bottom.
   */
		isOpen: bool,

		/**
   * Style the tabs as a progression. This is typically used for a work flow
   * where the user needs to move forward and backward through a series of
   * steps.
   */
		isProgressive: bool,

		/**
   * Set the multiline className. This is typically used for styling the Tab.Title bar
   * for improved readability when there are multiple React elements in the tab headers.
   */
		hasMultilineTitle: bool,

		/**
   *  If `true` the width will be evenly distributed to all tabs.  `False` typically used in conjunction with `Tab.width`
   */
		hasFullWidthTabs: bool,

		/**
   * If `true` component will be styled to be more visually prominent for use with page-level navigation.
   */
		isNavigation: bool,

		/**
   * *Child Element*
   *
   * Can be used to define one or more individual `Tab`s in the sequence of `Tabs`.
   *
   */
		Tab: any
	},

	getDefaultProps: function getDefaultProps() {
		return {
			selectedIndex: 0,
			onSelect: _noop3.default,
			isOpen: true,
			isProgressive: false,
			hasMultilineTitle: false,
			hasFullWidthTabs: true,
			isNavigation: false
		};
	},
	handleClicked: function handleClicked(index, tabProps, event) {
		var onSelect = this.props.onSelect;


		onSelect(index, { event: event, props: tabProps });
	},
	render: function render() {
		var _this = this;

		var _props3 = this.props,
		    className = _props3.className,
		    hasMultilineTitle = _props3.hasMultilineTitle,
		    isOpen = _props3.isOpen,
		    isProgressive = _props3.isProgressive,
		    selectedIndex = _props3.selectedIndex,
		    hasFullWidthTabs = _props3.hasFullWidthTabs,
		    isNavigation = _props3.isNavigation,
		    passThroughs = _objectWithoutProperties(_props3, ['className', 'hasMultilineTitle', 'isOpen', 'isProgressive', 'selectedIndex', 'hasFullWidthTabs', 'isNavigation']);

		// Grab props array from each Tab


		var tabChildProps = (0, _map3.default)((0, _componentTypes.findTypes)(this.props, Tab), 'props');

		var selectedIndexFromChildren = (0, _findLastIndex3.default)(tabChildProps, {
			isSelected: true
		});

		var actualSelectedIndex = selectedIndexFromChildren !== -1 ? selectedIndexFromChildren : selectedIndex;

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Tabs), { className: cx('&', className) }),
			_react2.default.createElement(
				'ul',
				{
					className: cx('&-bar', {
						'&-bar-is-multiline': hasMultilineTitle,
						'&-variable-width': !hasFullWidthTabs,
						'&-navigation-tabs': isNavigation
					})
				},
				(0, _map3.default)(tabChildProps, function (tabProps, index) {
					return _react2.default.createElement(Tab, _extends({
						key: index,
						index: index,
						isLastTab: index === tabChildProps.length - 1,
						isOpen: isOpen,
						isProgressive: isProgressive,
						isNavigation: isNavigation,
						isSelected: index === actualSelectedIndex,
						onSelect: _this.handleClicked,
						Title: (0, _get3.default)((0, _componentTypes.getFirst)(tabProps, Tabs.Title), 'props.children', '')
					}, tabProps));
				})
			),
			_react2.default.createElement(
				'div',
				{ className: cx('&-content') },
				(0, _get3.default)(tabChildProps, [actualSelectedIndex, 'children'])
			)
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(Tabs);
exports.TabsDumb = Tabs;