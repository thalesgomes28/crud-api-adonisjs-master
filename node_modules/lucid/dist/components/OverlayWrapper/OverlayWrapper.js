'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _CSSTransitionGroup = require('react-transition-group/CSSTransitionGroup');

var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-OverlayWrapper');

var bool = _propTypes2.default.bool,
    node = _propTypes2.default.node,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string;

/**
 *
 * {"categories": ["utility"]}
 *
 * A wrapper with optional overlay to wrap content. `Overlay` is meant for overlaying an entire page, while this component is meant to wrap another component and cover its content.
 *
 */

var OverlayWrapper = (0, _componentTypes.createClass)({
	displayName: 'OverlayWrapper',
	propTypes: {
		/**
   * Controls whether the message should be displayed over the wrapped content.
   */
		isVisible: bool,
		/**
   * Set this to `false` if you don't want the semi-transparent overlay over
   * the wrapped content.
   */
		hasOverlay: bool,
		/**
   * Class names that are appended to the defaults.
   */
		className: string,
		/**
   * Any valid React children.
   */
		children: node,
		/**
   * Style variations for the overlay behind the message.
   */
		overlayKind: oneOf(['light', 'dark']),
		/**
   * *Child Element*
   *
   * The Message to display in the overlay.
   */
		Message: node
	},

	components: {
		Message: (0, _componentTypes.createClass)({
			displayName: 'OverlayWrapper.Message',
			propName: 'Message',
			propTypes: {
				/**
     * Any valid React children.
     */
				children: node
			}
		})
	},

	getDefaultProps: function getDefaultProps() {
		return {
			hasOverlay: true,
			overlayKind: 'light'
		};
	},
	render: function render() {
		var props = this.props,
		    _props = this.props,
		    hasOverlay = _props.hasOverlay,
		    isVisible = _props.isVisible,
		    className = _props.className,
		    children = _props.children,
		    overlayKind = _props.overlayKind,
		    passThroughs = _objectWithoutProperties(_props, ['hasOverlay', 'isVisible', 'className', 'children', 'overlayKind']);

		var Message = OverlayWrapper.Message;


		var messageElementProp = (0, _get3.default)((0, _componentTypes.getFirst)(props, Message), 'props', {});
		var otherChildren = (0, _componentTypes.rejectTypes)(children, [Message]);

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, OverlayWrapper), {
				className: cx('&', className)
			}),
			otherChildren,
			_react2.default.createElement(
				_CSSTransitionGroup2.default,
				{
					transitionName: cx('&-message-container'),
					transitionEnterTimeout: 300,
					transitionLeaveTimeout: 300
				},
				isVisible && _react2.default.createElement(
					'div',
					{
						className: cx('&-message-container', {
							'&-has-overlay': hasOverlay,
							'&-kind-light': hasOverlay && overlayKind === 'light'
						})
					},
					_react2.default.createElement('div', messageElementProp)
				)
			)
		);
	}
});

exports.default = OverlayWrapper;