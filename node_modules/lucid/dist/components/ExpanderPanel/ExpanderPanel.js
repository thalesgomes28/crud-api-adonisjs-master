'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ExpanderPanelDumb = undefined;

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _ChevronIcon = require('../Icon/ChevronIcon/ChevronIcon');

var _ChevronIcon2 = _interopRequireDefault(_ChevronIcon);

var _Collapsible = require('../Collapsible/Collapsible');

var _Collapsible2 = _interopRequireDefault(_Collapsible);

var _Panel = require('../Panel/Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var _Expander = require('../Expander/Expander.reducers');

var reducers = _interopRequireWildcard(_Expander);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-ExpanderPanel');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    object = _propTypes2.default.object,
    string = _propTypes2.default.string;

/**
 * {"categories": ["layout"], "madeFrom": ["ChevronIcon", "Expander", "Panel"]}
 *
 * This is a container that provides a toggle that controls when the content is
 * shown.
 */

var ExpanderPanel = (0, _componentTypes.createClass)({
	displayName: 'ExpanderPanel',

	components: {
		/**
   * Renders a `<span>` of content next to the `ChevronIcon` in the `Panel.Header`
   */
		Header: (0, _componentTypes.createClass)({
			displayName: 'ExpanderPanel.Header',
			propName: 'Header',
			propTypes: {
				/**
     * Used to identify the purpose of this switch to the user -- can be
     * any renderable content.
     */
				children: node
			}
		})
	},

	reducers: reducers,

	propTypes: {
		/**
   * Expandable content.
   */
		children: node,

		/**
   * Appended to the component-specific class names set on the root
   * element.
   */
		className: string,

		/**
   * Indicates that the component is in the "expanded" state when true
   * and in the "unexpanded" state when false.
   */
		isExpanded: bool,

		/**
   * Indicates that the component is in the "disabled" state when true
   * and in the "enabled" state when false.
   */
		isDisabled: bool,

		/**
   * Controls the presence of padding on the inner content.
   */
		hasPadding: bool,

		/**
   * Called when the user clicks on the component's header.
   *
   * Signature: `(isExpanded, { event, props }) => {}`
   */
		onToggle: func,

		/**
   * Passed through to the root element.
   */
		style: object,

		/**
   * prop alternative to Header child component
   * passed through to the underlying ExpanderPanel
   */
		Header: any
	},

	getDefaultProps: function getDefaultProps() {
		return {
			isExpanded: false,
			onToggle: _noop3.default,
			hasPadding: true
		};
	},
	handleToggle: function handleToggle(event) {
		if (!this.props.isDisabled) {
			this.props.onToggle(!this.props.isExpanded, {
				event: event,
				props: this.props
			});
		}
	},
	render: function render() {
		var _props = this.props,
		    children = _props.children,
		    className = _props.className,
		    isExpanded = _props.isExpanded,
		    isDisabled = _props.isDisabled,
		    hasPadding = _props.hasPadding,
		    style = _props.style,
		    passThroughs = _objectWithoutProperties(_props, ['children', 'className', 'isExpanded', 'isDisabled', 'hasPadding', 'style']);

		var headerChildProps = (0, _get3.default)((0, _componentTypes.getFirst)(this.props, ExpanderPanel.Header), 'props');

		return _react2.default.createElement(
			_Panel2.default,
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, ExpanderPanel, [], false), {
				className: cx('&', {
					'&-is-collapsed': !isExpanded,
					'&-is-disabled': isDisabled
				}, className),
				style: style
			}),
			_react2.default.createElement(
				_Panel2.default.Header,
				{ className: cx('&-header'), onClick: this.handleToggle },
				_react2.default.createElement(
					'span',
					{ className: cx('&-icon') },
					_react2.default.createElement(_ChevronIcon2.default, { direction: isExpanded ? 'up' : 'down' })
				),
				_react2.default.createElement('span', headerChildProps)
			),
			_react2.default.createElement(
				_Collapsible2.default,
				{
					isExpanded: isExpanded,
					className: cx('&-content', {
						'&-content-is-expanded': isExpanded
					})
				},
				_react2.default.createElement(
					'div',
					{
						className: cx('&-content-inner', {
							'&-content-inner-has-padding': hasPadding
						})
					},
					children
				)
			)
		);
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(ExpanderPanel);
exports.ExpanderPanelDumb = ExpanderPanel;