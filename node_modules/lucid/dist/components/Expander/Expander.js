'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ExpanderDumb = undefined;

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _first2 = require('lodash/first');

var _first3 = _interopRequireDefault(_first2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CSSTransitionGroup = require('react-transition-group/CSSTransitionGroup');

var _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _ChevronIcon = require('../Icon/ChevronIcon/ChevronIcon');

var _ChevronIcon2 = _interopRequireDefault(_ChevronIcon);

var _Collapsible = require('../Collapsible/Collapsible');

var _Collapsible2 = _interopRequireDefault(_Collapsible);

var _Expander = require('./Expander.reducers');

var reducers = _interopRequireWildcard(_Expander);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-Expander');

var any = _propTypes2.default.any,
    bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    node = _propTypes2.default.node,
    object = _propTypes2.default.object,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string;

/**
 * {"categories": ["layout"], "madeFrom": ["ChevronIcon"]}
 *
 * This is a container that provides a toggle that controls when the content is
 * shown.
 */

var Expander = (0, _componentTypes.createClass)({
	displayName: 'Expander',

	components: {
		/**
   * Renders a `<span>` to be shown next to the expander icon.
   */
		Label: (0, _componentTypes.createClass)({
			displayName: 'Expander.Label',
			propName: 'Label',
			propTypes: {
				/**
     * Used to identify the purpose of this switch to the user -- can be
     * any renderable content.
     */
				children: node
			}
		})
	},

	reducers: reducers,

	propTypes: {
		/**
   * Expandable content.
   */
		children: node,

		/**
   * Appended to the component-specific class names set on the root
   * element.
   */
		className: string,

		/**
   * Indicates that the component is in the "expanded" state when true
   * and in the "unexpanded" state when false.
   */
		isExpanded: bool,

		/**
   * Called when the user clicks on the component's header.
   *
   * Signature: `(isExpanded, { event, props }) => {}`
   */
		onToggle: func,

		/**
   * Passed through to the root element.
   */
		style: object,

		/**
   * Child element whose children represents content to be shown next to
   * the expander icon.
   */
		Label: any,

		/**
   * Renders different variants of Expander. 'simple' is default. 'highlighted' is more prominant.
   */
		kind: oneOf(['simple', 'highlighted'])
	},

	getDefaultProps: function getDefaultProps() {
		return {
			isExpanded: false,
			onToggle: _noop3.default,
			kind: 'simple'
		};
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		var currentLabel = (0, _get3.default)((0, _componentTypes.getFirst)(this.props, Expander.Label), 'props.children', null);
		var nextLabel = (0, _get3.default)((0, _componentTypes.getFirst)(nextProps, Expander.Label), 'props.children', null);

		if (currentLabel !== nextLabel) {
			this._labelKey++;
		}
	},
	componentWillMount: function componentWillMount() {
		this._labelKey = 0;
	},
	render: function render() {
		var _props = this.props,
		    children = _props.children,
		    className = _props.className,
		    isExpanded = _props.isExpanded,
		    style = _props.style,
		    kind = _props.kind,
		    passThroughs = _objectWithoutProperties(_props, ['children', 'className', 'isExpanded', 'style', 'kind']);

		var labelChildProp = (0, _first3.default)((0, _map3.default)((0, _componentTypes.findTypes)(this.props, Expander.Label), 'props'));

		return _react2.default.createElement(
			'div',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, Expander), {
				className: cx('&', {
					'&-is-expanded': isExpanded,
					'&-kind-highlighted': kind === 'highlighted'
				}, className),
				style: style
			}),
			_react2.default.createElement(
				'header',
				{ className: cx('&-header'), onClick: this.handleToggle },
				_react2.default.createElement(
					'span',
					{ className: cx('&-icon') },
					_react2.default.createElement(_ChevronIcon2.default, { direction: isExpanded ? 'up' : 'down' })
				),
				_react2.default.createElement(
					_CSSTransitionGroup2.default,
					{
						transitionName: cx('&-text'),
						transitionEnterTimeout: 100,
						transitionLeaveTimeout: 100,
						className: cx('&-text')
					},
					labelChildProp ? _react2.default.createElement(
						'span',
						{ key: this._labelKey },
						labelChildProp.children
					) : null
				)
			),
			_react2.default.createElement(
				_Collapsible2.default,
				{
					isExpanded: isExpanded,
					rootType: 'section',
					className: cx('&-content')
				},
				children
			)
		);
	},
	handleToggle: function handleToggle(event) {
		this.props.onToggle(!this.props.isExpanded, {
			event: event,
			props: this.props
		});
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(Expander);
exports.ExpanderDumb = Expander;