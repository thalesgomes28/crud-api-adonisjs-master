'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _matches2 = require('lodash/matches');

var _matches3 = _interopRequireDefault(_matches2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _defer2 = require('lodash/defer');

var _defer3 = _interopRequireDefault(_defer2);

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _constant2 = require('lodash/constant');

var _constant3 = _interopRequireDefault(_constant2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Portal = require('../Portal/Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _componentTypes = require('../../util/component-types');

var _domHelpers = require('../../util/dom-helpers');

var _styleHelpers = require('../../util/style-helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = _styleHelpers.lucidClassNames.bind('&-ContextMenu');

var bool = _propTypes2.default.bool,
    node = _propTypes2.default.node,
    func = _propTypes2.default.func,
    number = _propTypes2.default.number,
    object = _propTypes2.default.object,
    oneOf = _propTypes2.default.oneOf,
    string = _propTypes2.default.string;

/**
 *
 * {"categories": ["utility"], "madeFrom": ["Portal"]}
 *
 * A ContextMenu component is used to render a target and a flyout which is positioned relative to the target.
 */

var ContextMenu = (0, _componentTypes.createClass)({
	displayName: 'ContextMenu',
	propTypes: {
		/**
   * `children` should include exactly one ContextMenu.Target and one ContextMenu.FlyOut.
   */
		children: node,
		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,
		/**
   * Passed through to the root element.
   */
		style: object,
		/**
   * direction of the FlyOut relative to Target. Defaults to `'down'`.
   */
		direction: oneOf(['down', 'up', 'right', 'left']),
		/**
   * the px offset along the axis of the direction
   */
		directonOffset: number,
		/**
   * alignment of the Flyout relative to Target in the cross axis from `direction` Defaults to `'start'`
   */
		alignment: oneOf(['start', 'center', 'end']),
		/**
   * the px offset along the axis of the alignment
   */
		alignmentOffset: number,
		/**
   * an alternative to `alignmentOffset`, a function that is applied with the width/height of the flyout. the result is used as the `alignmentOffset`
   */
		getAlignmentOffset: func,
		/**
   * The number of px's to grow or shrink the minWidth of the FlyOut
   */
		minWidthOffset: number,
		/**
   * Indicates whether the FlyOut will render or not. Defaults to `true`.
   */
		isExpanded: bool,
		/**
   * Called when a click event happenens outside of the ContextMenu, with the signature `({ props, event }) => { ... }`
   */
		onClickOut: func,
		/**
   * The `id` of the FlyOut portal element that is appended to `document.body`. Defaults to a generated `id`.
   */
		portalId: string
	},

	components: {
		/**
   * Renders an element of `elementType` (defaults to `<span>`) that the menu `FlyOut` anchors to.
   */
		Target: (0, _componentTypes.createClass)({
			displayName: 'ContextMenu.Target',
			propTypes: {
				elementType: string
			},
			getDefaultProps: function getDefaultProps() {
				return {
					elementType: 'span'
				};
			}
		}),
		/*
   * Renders a `<Portal>` anchored to the `Target`.
   */
		FlyOut: (0, _componentTypes.createClass)({
			displayName: 'ContextMenu.FlyOut',
			propTypes: {
				style: object
			}
		})
	},

	getDefaultProps: function getDefaultProps() {
		return {
			direction: 'down',
			directonOffset: 0,
			minWidthOffset: 0,
			alignment: 'start',
			// no default alignmentOffset so it can default to result of `getAlignmentOffset`
			getAlignmentOffset: (0, _constant3.default)(0),
			isExpanded: true,
			onClickOut: null,
			portalId: null
		};
	},
	getInitialState: function getInitialState() {
		var portalId = this.props.portalId;

		return {
			portalId: portalId || (0, _uniqueId3.default)('ContextMenu-Portal-'),
			targetRect: {
				bottom: 0,
				top: 0,
				left: 0,
				right: 0,
				height: 0,
				width: 0
			},
			flyOutHeight: 0,
			flyOutWidth: 0
		};
	},
	componentDidMount: function componentDidMount() {
		var _this = this;

		(0, _defer3.default)(function () {
			return _this.alignFlyOut();
		});
		this.updateTargetRectangleIntervalId = setInterval(function () {
			if (_this.props.isExpanded) {
				_this.alignFlyOut();
			}
		}, 10);

		document.body.addEventListener('touchstart', this.handleBodyClick);
		document.body.addEventListener('click', this.handleBodyClick);
	},
	componentWillUnmount: function componentWillUnmount() {
		clearInterval(this.updateTargetRectangleIntervalId);
		document.body.removeEventListener('click', this.handleBodyClick);
	},
	handleBodyClick: function handleBodyClick(event) {
		var props = this.props,
		    onClickOut = this.props.onClickOut,
		    _refs = this.refs,
		    flyOutPortal = _refs.flyOutPortal,
		    target = _refs.target;


		if (onClickOut && flyOutPortal) {
			var flyOutEl = flyOutPortal.portalElement.firstChild;
			var wasALabelClick = event.target.nodeName === 'INPUT' && (0, _domHelpers.sharesAncestor)(event.target, target, 'LABEL');

			// Attempt to detect <label> click and ignore it
			if (wasALabelClick) {
				return;
			}

			if (!(flyOutEl.contains(event.target) || target.contains(event.target))) {
				onClickOut({ props: props, event: event });
			}
		}
	},
	componentWillReceiveProps: function componentWillReceiveProps() {
		this.alignFlyOut();
	},


	statics: {
		CENTER: 'center',
		DOWN: 'down',
		END: 'end',
		LEFT: 'left',
		RIGHT: 'right',
		START: 'start',
		UP: 'up'
	},

	getFlyoutPosition: function getFlyoutPosition() {
		var _props = this.props,
		    alignment = _props.alignment,
		    getAlignmentOffset = _props.getAlignmentOffset,
		    direction = _props.direction,
		    directonOffset = _props.directonOffset,
		    _state = this.state,
		    flyOutHeight = _state.flyOutHeight,
		    flyOutWidth = _state.flyOutWidth,
		    _state$targetRect = _state.targetRect,
		    bottom = _state$targetRect.bottom,
		    left = _state$targetRect.left,
		    right = _state$targetRect.right,
		    top = _state$targetRect.top,
		    width = _state$targetRect.width,
		    height = _state$targetRect.height,
		    flyOutPortal = this.refs.flyOutPortal;


		if (!flyOutPortal) {
			return {};
		}

		var alignmentOffset = !(0, _isUndefined3.default)(this.props.alignmentOffset) ? this.props.alignmentOffset : alignment === ContextMenu.CENTER ? getAlignmentOffset((0, _includes3.default)([ContextMenu.UP, ContextMenu.DOWN], direction) ? flyOutWidth : flyOutHeight) : 0;

		var CENTER = ContextMenu.CENTER,
		    DOWN = ContextMenu.DOWN,
		    END = ContextMenu.END,
		    LEFT = ContextMenu.LEFT,
		    RIGHT = ContextMenu.RIGHT,
		    START = ContextMenu.START,
		    UP = ContextMenu.UP;
		var clientWidth = document.body.clientWidth;

		// default styling hides portal because its position can't be calculated
		// properly until after 1st render so here we unhide it if the ref exists

		var style = {
			opacity: 1,
			maxHeight: 'none',
			left: 'auto',
			top: 'auto'
		};
		var matcher = (0, _matches3.default)({ direction: direction, alignment: alignment });

		if (matcher({ direction: UP, alignment: START })) {
			return _extends({}, style, {
				top: top - flyOutHeight - directonOffset,
				left: left - alignmentOffset
			});
		}
		if (matcher({ direction: UP, alignment: END })) {
			return _extends({}, style, {
				top: top - flyOutHeight - directonOffset,
				right: clientWidth - right - alignmentOffset
			});
		}
		if (matcher({ direction: UP, alignment: CENTER })) {
			return _extends({}, style, {
				top: top - flyOutHeight - directonOffset,
				left: left + width / 2 - flyOutWidth / 2 + alignmentOffset
			});
		}
		if (matcher({ direction: DOWN, alignment: START })) {
			return _extends({}, style, {
				top: bottom + directonOffset,
				left: left - alignmentOffset
			});
		}
		if (matcher({ direction: DOWN, alignment: END })) {
			return _extends({}, style, {
				top: bottom + directonOffset,
				right: clientWidth - right - alignmentOffset
			});
		}
		if (matcher({ direction: DOWN, alignment: CENTER })) {
			return _extends({}, style, {
				top: bottom + directonOffset,
				left: left + width / 2 - flyOutWidth / 2 + alignmentOffset
			});
		}
		if (matcher({ direction: LEFT, alignment: START })) {
			return _extends({}, style, {
				top: top - alignmentOffset,
				right: clientWidth - left + directonOffset
			});
		}
		if (matcher({ direction: LEFT, alignment: END })) {
			return _extends({}, style, {
				top: top - flyOutHeight + height + alignmentOffset,
				right: clientWidth - left + directonOffset
			});
		}
		if (matcher({ direction: LEFT, alignment: CENTER })) {
			return _extends({}, style, {
				top: top - flyOutHeight / 2 + height / 2 + alignmentOffset,
				right: clientWidth - left + directonOffset
			});
		}
		if (matcher({ direction: RIGHT, alignment: START })) {
			return _extends({}, style, {
				top: top - alignmentOffset,
				left: left + width + directonOffset
			});
		}
		if (matcher({ direction: RIGHT, alignment: END })) {
			return _extends({}, style, {
				top: top - flyOutHeight + height + alignmentOffset,
				left: left + width + directonOffset
			});
		}
		if (matcher({ direction: RIGHT, alignment: CENTER })) {
			return _extends({}, style, {
				top: top - flyOutHeight / 2 + height / 2 + alignmentOffset,
				left: left + width + directonOffset
			});
		}
	},
	alignFlyOut: function alignFlyOut() {
		var _refs2 = this.refs,
		    flyOutPortal = _refs2.flyOutPortal,
		    target = _refs2.target;


		if (!target || !flyOutPortal) {
			return;
		}

		var targetRect = (0, _domHelpers.getAbsoluteBoundingClientRect)(target);

		if (!flyOutPortal) {
			return this.setState({
				targetRect: targetRect
			});
		}

		var flyOutEl = flyOutPortal.portalElement.firstChild;

		var _flyOutEl$getBounding = flyOutEl.getBoundingClientRect(),
		    height = _flyOutEl$getBounding.height,
		    width = _flyOutEl$getBounding.width;

		this.setState({
			targetRect: targetRect,
			flyOutHeight: height,
			flyOutWidth: width
		});
	},
	render: function render() {
		var _props2 = this.props,
		    className = _props2.className,
		    direction = _props2.direction,
		    isExpanded = _props2.isExpanded,
		    style = _props2.style,
		    minWidthOffset = _props2.minWidthOffset,
		    passThroughs = _objectWithoutProperties(_props2, ['className', 'direction', 'isExpanded', 'style', 'minWidthOffset']),
		    _state2 = this.state,
		    portalId = _state2.portalId,
		    targetRect = _state2.targetRect;

		var targetElement = (0, _componentTypes.getFirst)(this.props, ContextMenu.Target);
		var targetChildren = (0, _get3.default)(targetElement, 'props.children', null);
		var TargetElementType = targetElement.props.elementType;

		var flyoutElement = (0, _componentTypes.getFirst)(this.props, ContextMenu.FlyOut);
		var flyProps = (0, _get3.default)(flyoutElement, 'props', {});

		return _react2.default.createElement(
			TargetElementType,
			_extends({
				ref: 'target'
			}, (0, _componentTypes.omitProps)(passThroughs, ContextMenu), {
				className: cx('&', className),
				style: style
			}),
			targetChildren,
			isExpanded ? _react2.default.createElement(
				_Portal2.default,
				_extends({
					ref: 'flyOutPortal'
				}, flyProps, {
					className: cx('&-FlyOut', '&-FlyOut-' + direction, flyProps.className),
					portalId: portalId,
					style: _extends({
						minWidth: targetRect.width + minWidthOffset
					}, this.getFlyoutPosition(), flyProps.style)
				}),
				flyProps.children
			) : null
		);
	}
});

exports.default = ContextMenu;