'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.VerticalListMenuDumb = undefined;

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _partial2 = require('lodash/partial');

var _partial3 = _interopRequireDefault(_partial2);

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _noop2 = require('lodash/noop');

var _noop3 = _interopRequireDefault(_noop2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styleHelpers = require('../../util/style-helpers');

var _componentTypes = require('../../util/component-types');

var _stateManagement = require('../../util/state-management');

var _VerticalListMenu = require('./VerticalListMenu.reducers');

var reducers = _interopRequireWildcard(_VerticalListMenu);

var _ChevronIcon = require('../Icon/ChevronIcon/ChevronIcon');

var _ChevronIcon2 = _interopRequireDefault(_ChevronIcon);

var _Collapsible = require('../Collapsible/Collapsible');

var _Collapsible2 = _interopRequireDefault(_Collapsible);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var cx = (0, _styleHelpers.bindClassNames)('lucid-VerticalListMenu');

var func = _propTypes2.default.func,
    arrayOf = _propTypes2.default.arrayOf,
    bool = _propTypes2.default.bool,
    string = _propTypes2.default.string,
    number = _propTypes2.default.number,
    node = _propTypes2.default.node,
    object = _propTypes2.default.object,
    shape = _propTypes2.default.shape;

/**
 * {"categories": ["navigation"], "madeFrom": ["ChevronIcon"]}
 *
 * Used primarily for navigation lists. It supports nesting `VerticalListMenu`s
 * below `VerticalListMenu.Item`s and animating expanding of those sub lists.
 * The default reducer behavior is for only one `VerticalListMenu.Item` to be
 * selected at any given time; that is easily overridden by handling `onSelect`
 * yourself.
 */

var VerticalListMenu = (0, _componentTypes.createClass)({
	displayName: 'VerticalListMenu',

	reducers: reducers,

	components: {
		/**
   * A child item that can contain content or another VerticalListMenu.
   */
		Item: (0, _componentTypes.createClass)({
			displayName: 'VerticalListMenu.Item',
			propTypes: {
				/**
     * Show or hide the expand button. Should be `true` if you want to nest
     * menus.
     */
				hasExpander: bool,
				/**
     * Determines the visibility of nested menus.
     */
				isExpanded: bool,
				/**
     * If `true` then a small bar on the left side of the item will be
     * shown indicating this item is selected.
     */
				isSelected: bool,
				/**
     * Determines the visibility of the small bar on the left when the user
     * hovers over the item. This should indicate to the user that an item
     * is clickable.
     */
				isActionable: bool,
				/**
     * Called when the user clicks the main body of the item.
     *
     * Signature: `(index, { event, props}) => {}`
     */
				onSelect: func,
				/**
     * Called when the user clicks the expand button.
     *
     * Signature: `(index, { event, props}) => {}`
     */
				onToggle: func,
				/**
     * Props that are passed through to the underlying Collapsible
     * component if the item has children.
     */
				Collapsible: shape(_Collapsible2.default.propTypes)
			}
		})
	},

	propTypes: {
		/**
   * Regular `children` aren't really used in this component, but if you do
   * add them they will be placed at the end of the component. You should be
   * using `VerticalListMenu.Item`s instead of regular children.
   */
		children: node,

		/**
   * Appended to the component-specific class names set on the root element.
   */
		className: string,

		/**
   * Passed through to the root element.
   */
		style: object,

		/**
   * Indicates which of the `VerticalListMenu.Item` children are currently
   * selected. You can also put the `isSelected` prop directly on the
   * `VerticalListMenu.Item`s if you wish.
   */
		selectedIndices: arrayOf(number),

		/**
   * Indicates which of the `VerticalListMenu.Item` children are currently
   * expanded. You can also put the `isExpanded` prop directly on the
   * `VerticalListMenu.Item`s if you wish.
   */
		expandedIndices: arrayOf(number),

		/**
   * Callback fired when the user selects a `VerticalListMenu.Item`.
   *
   * Signature: `(index, { event, props }) => {}`
   */
		onSelect: func,

		/**
   * Callback fired when the user expands or collapses an expandable `VerticalListMenu.Item`.
   *
   * Signature: `(index, { event, props }) => {}`
   */
		onToggle: func
	},

	getDefaultProps: function getDefaultProps() {
		return {
			onSelect: _noop3.default,
			onToggle: _noop3.default,
			expandedIndices: [],
			selectedIndices: []
		};
	},
	render: function render() {
		var _this = this;

		var _props = this.props,
		    children = _props.children,
		    className = _props.className,
		    style = _props.style,
		    selectedIndices = _props.selectedIndices,
		    expandedIndices = _props.expandedIndices,
		    passThroughs = _objectWithoutProperties(_props, ['children', 'className', 'style', 'selectedIndices', 'expandedIndices']);

		var itemChildProps = (0, _map3.default)((0, _componentTypes.findTypes)(this.props, VerticalListMenu.Item), 'props');

		return _react2.default.createElement(
			'ul',
			_extends({}, (0, _componentTypes.omitProps)(passThroughs, VerticalListMenu), {
				className: cx('&', className),
				style: style
			}),
			(0, _map3.default)(itemChildProps, function (itemChildProp, index) {
				var _itemChildProp$hasExp = itemChildProp.hasExpander,
				    hasExpander = _itemChildProp$hasExp === undefined ? false : _itemChildProp$hasExp,
				    _itemChildProp$isActi = itemChildProp.isActionable,
				    isActionable = _itemChildProp$isActi === undefined ? true : _itemChildProp$isActi,
				    _itemChildProp$Collap = itemChildProp.Collapsible,
				    collapsibleProps = _itemChildProp$Collap === undefined ? _Collapsible2.default.getDefaultProps() : _itemChildProp$Collap;


				var itemChildrenAsArray = _react2.default.Children.toArray(itemChildProp.children);

				// Was not able to get `child.Type` to work correctly, I suspect this
				// is due to the way we wrap components with createLucidComponentDefinition
				var listChildren = (0, _filter3.default)(itemChildrenAsArray, function (child) {
					return (0, _get3.default)(child, 'type.displayName', '') === 'VerticalListMenu';
				});
				var otherChildren = (0, _filter3.default)(itemChildrenAsArray, function (child) {
					return (0, _get3.default)(child, 'type.displayName', '') !== 'VerticalListMenu';
				});

				// If the prop is found on the child, it should override what was
				// passed in at the top level for selectedIndices and expandedIndices
				var actualIsExpanded = (0, _has3.default)(itemChildProp, 'isExpanded') ? (0, _get3.default)(itemChildProp, 'isExpanded', true) : (0, _includes3.default)(expandedIndices, index);

				var actualIsSelected = (0, _has3.default)(itemChildProp, 'isSelected') ? (0, _get3.default)(itemChildProp, 'isSelected', false) : (0, _includes3.default)(selectedIndices, index);

				return _react2.default.createElement(
					'li',
					_extends({
						key: index
					}, itemChildProp.passThroughs, {
						className: cx('&-Item', itemChildProp.className)
					}),
					_react2.default.createElement(
						'div',
						{
							className: cx('&-Item-content', {
								'&-Item-content-is-selected': actualIsSelected,
								'&-Item-content-is-actionable': isActionable
							}),
							onClick: (0, _partial3.default)(_this.handleClickItem, index, itemChildProp)
						},
						_react2.default.createElement(
							'div',
							{ className: cx('&-Item-content-text') },
							otherChildren
						),
						hasExpander ? _react2.default.createElement(
							'div',
							{
								className: cx('&-Item-expander'),
								onClick: (0, _partial3.default)(_this.handleToggle, index, itemChildProp)
							},
							_react2.default.createElement(_ChevronIcon2.default, {
								direction: actualIsExpanded ? 'up' : 'down'
							})
						) : null
					),
					!(0, _isEmpty3.default)(listChildren) ? _react2.default.createElement(
						_Collapsible2.default,
						_extends({}, collapsibleProps, {
							className: cx('&-Item-nested-list'),
							isExpanded: actualIsExpanded
						}),
						listChildren
					) : null
				);
			}),
			children
		);
	},
	handleToggle: function handleToggle(index, itemChildProp, event) {
		var onToggle = itemChildProp.onToggle;

		// Prevent the user from also selecting the current item.

		event.stopPropagation();

		this.props.onToggle(index, { event: event, props: itemChildProp });

		if (onToggle) {
			onToggle(index, { event: event, props: itemChildProp });
		}
	},
	handleClickItem: function handleClickItem(index, itemChildProp, event) {
		var onSelect = itemChildProp.onSelect;


		this.props.onSelect(index, { event: event, props: itemChildProp });

		if (onSelect) {
			onSelect(index, { event: event, props: itemChildProp });
		}
	}
});

exports.default = (0, _stateManagement.buildHybridComponent)(VerticalListMenu);
exports.VerticalListMenuDumb = VerticalListMenu;