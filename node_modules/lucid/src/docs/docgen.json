{
  "Accordion.Header": {
    "displayName": "Header",
    "description": "",
    "componentRef": "ExpanderPanel.Header"
  },
  "Accordion": {
    "description": "This is a container that renders panels and controls its expansion/retraction.",
    "displayName": "Accordion",
    "methods": [
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "isExpanded",
            "type": null
          },
          {
            "name": "index",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "selectedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates which item is expanded."
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks on the component's header of an item.\n\nSignature: `(itemIndex, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "Header": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "prop alternative to Header child component\npassed through to the underlying ExpanderPanel"
      }
    },
    "childComponents": [
      {
        "displayName": "Header",
        "description": "",
        "componentRef": "ExpanderPanel.Header"
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ],
      "madeFrom": [
        "ExpanderPanel"
      ]
    }
  },
  "Autocomplete": {
    "description": "A text input with suggested values displayed in an attached menu.",
    "displayName": "Autocomplete",
    "methods": [
      {
        "name": "handleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionIndex",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleInput",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getInputValue",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setInputValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleInputKeydown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleControlClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root elements."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to root element."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the Autocomplete from being clicked or focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "suggestions": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Array of suggested text input values shown in drop menu.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text value of the input.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "DropMenu": {
        "type": {
          "name": "shape",
          "value": "DropMenu.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Object of DropMenu props which are passed thru to the underlying DropMenu component.",
        "defaultValue": {
          "value": "DropMenu.getDefaultProps()",
          "computed": true
        }
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the input value changes.\nHas the signature `(value, {props, event}) => {}` where value is a string.",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a suggestion is selected from the menu.\nHas the signature `(optionIndex, {props, event}) => {}` where optionIndex is a number.",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onExpand": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when menu is expected to expand.\nHas the signature `({props, event}) => {}`.",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "controls",
        "text"
      ],
      "madeFrom": [
        "DropMenu"
      ]
    }
  },
  "Axis": {
    "description": "*For use within an `svg`*\n\nAxes are used to help render human-readable reference marks on charts. They\ncan either be horizontal or vertical and really only need a scale to be able\nto draw properly.\n\nThis component is a very close sister to d3's svg axis and most of the logic\nwas ported from there.",
    "displayName": "Axis",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "scale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "Must be a d3 scale. Lucid exposes the `lucid.d3Scale` library for use\nhere."
      },
      "innerTickSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Size of the ticks for each discrete tick mark.",
        "defaultValue": {
          "value": "6",
          "computed": false
        }
      },
      "outerTickSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Size of the tick marks found at the beginning and end of the axis. It's\ncommon to set this to `0` to remove them.",
        "defaultValue": {
          "value": "6",
          "computed": false
        }
      },
      "tickFormat": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function that can format ticks. Generally this shouldn't be\nneeded since d3 has very good default formatters for most data.\n\nSignature: `(tick) => {}`"
      },
      "ticks": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "If you need fine grained control over the axis ticks, you can pass them\nin this array."
      },
      "tickPadding": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Determines the spacing between each tick and its text.",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "orient": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines the orientation of the ticks. `left` and `right` will\ngenerate a vertical axis, whereas `top` and `bottom` will generate a\nhorizontal axis.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "tickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Control the number of ticks displayed.\n\nIf the scale is time based or linear, this number acts a \"hint\" per the\ndefault behavior of D3. If it's an ordinal scale, this number is treated\nas an absolute number of ticks to display and is powered by our own\nutility function `discreteTicks`.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "chart primitives"
      ]
    }
  },
  "AxisLabel": {
    "description": "*For use within an `svg`*\n\nCentered labels for axes that typically are fit into the margins of a chart.",
    "displayName": "AxisLabel",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Height of the margin this label should fit into."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Width of the margin this label should fit into."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Strings should match an existing color class unless they start with a\n'#' for specific colors. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'`",
        "defaultValue": {
          "value": "'#000'",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Contents of the label, should only ever be a string since we use a `text`\nunder the hood."
      },
      "orient": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine orientation of the label."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "chart primitives"
      ]
    }
  },
  "Badge": {
    "description": "`Badge` is a quick utility component to create a badge around any\nelement(s). Do not wrap existing `Icon`s in a badge, rather add the\n`isBadge` prop to any Icon component to turn it into a badge.",
    "displayName": "Badge",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "class names that are appended to the defaults"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "any valid React children"
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ]
    }
  },
  "Banner": {
    "description": "A basic Banner. Any props that are not explicitly called out below will be\npassed through to the native `Banner` component.\n\nShort single line content can be passed in as a simple string. Multi line\nmessages should be passed wrapped in a `<p>` tag.\n\nIt is valid to use `strong` or `em` within a `Banner` message.",
    "displayName": "Banner",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "hasIcon": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Pass in a bool to display predefined icon based on `kind`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Pass in a icon component for custom icons within `Banner`.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "isCloseable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set this to `true` if you want to have a `x` close icon.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasRoundedCorners": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set this value to `false` if you want to remove the rounded corners on\nthe `Banner`.  **default is `true`**",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            },
            {
              "value": "'info'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Style variations of the `Banner`.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "isSmall": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to `true` the banner have smaller padding on the inside.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user closes the `Banner`.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "isClosed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `Banner`."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "communication"
      ],
      "madeFrom": [
        "DangerIcon",
        "InfoIcon",
        "SuccessIcon",
        "WarningIcon"
      ]
    }
  },
  "Bar": {
    "description": "*For use within an `svg`*\n\nBars are typically used for bar charts and are pretty much a thin wrapper\naround svg rects.",
    "displayName": "Bar",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "x": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "x coordinate.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "y": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "y coordinate.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Height of the bar.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the bar.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "hasStroke": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines if the bar has a white stroke around it."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Strings should match an existing color class unless they start with a\n'#' for specific colors. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'`",
        "defaultValue": {
          "value": "chartConstants.COLOR_0",
          "computed": true
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "geoms"
      ]
    }
  },
  "BarChart.EmptyStateWrapper": {
    "displayName": "EmptyStateWrapper",
    "description": "",
    "componentRef": "EmptyStateWrapper"
  },
  "BarChart": {
    "description": "Bar charts are great for showing data that fits neatly in to \"buckets\". The\nx axis data must be strings, and the y axis data must be numeric.",
    "displayName": "BarChart",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Height of the chart.",
        "defaultValue": {
          "value": "400",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the chart.",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "shape",
          "value": {
            "top": {
              "name": "number",
              "required": false
            },
            "right": {
              "name": "number",
              "required": false
            },
            "bottom": {
              "name": "number",
              "required": false
            },
            "left": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "An object defining the margins of the chart. These margins typically\ncontain the axis and labels.",
        "defaultValue": {
          "value": "{\n    top: 10,\n    right: 20,\n    bottom: 50,\n    left: 80,\n}",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "Data for the chart. E.g.\n\n    [\n      { x: 'Monday'    , y: 1 } ,\n      { x: 'Tuesday'   , y: 2 } ,\n      { x: 'Wednesday' , y: 3 } ,\n      { x: 'Thursday'  , y: 2 } ,\n      { x: 'Friday'    , y: 5 } ,\n    ]"
      },
      "legend": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "An object with human readable names for fields that will be used for\nlegends and tooltips. E.g:\n\n    {\n      x: 'Date',\n      y: 'Impressions',\n    }"
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `LoadingMessage`."
      },
      "hasToolTips": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show tool tips on hover.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasLegend": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show a legend at the bottom of the chart.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "palette": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Takes one of the palettes exported from `lucid.chartConstants`.\nAvailable palettes:\n\n- `PALETTE_6` (default)\n- `PALETTE_30`\n- `PALETTE_MONOCHROME_0_5`\n- `PALETTE_MONOCHROME_1_5`\n- `PALETTE_MONOCHROME_2_5`\n- `PALETTE_MONOCHROME_3_5`\n- `PALETTE_MONOCHROME_4_5`\n- `PALETTE_MONOCHROME_5_5`",
        "defaultValue": {
          "value": "chartConstants.PALETTE_6",
          "computed": true
        }
      },
      "colorMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "You can pass in an object if you want to map x values to\n`lucid.chartConstants` or custom colors:\n\n    {\n      'imps': COLOR_0,\n      'rev': COLOR_3,\n      'clicks': '#abc123',\n    }"
      },
      "xAxisField": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The field we should look up your x data by. Your actual x data must be\nstrings.",
        "defaultValue": {
          "value": "'x'",
          "computed": false
        }
      },
      "xAxisTickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "There are some cases where you need to only show a \"sampling\" of ticks\non the x axis. This number will control that.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "xAxisFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your x axis data. If you don't\nprovide anything, we'll use an identity function.",
        "defaultValue": {
          "value": "_.identity",
          "computed": true
        }
      },
      "xAxisTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set a title for the x axis.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "xAxisTitleColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set a color for the x axis title. Use the color constants exported off\n`lucid.chartConstants`. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'` // custom color hex\n\n`number` is supported only for backwards compatability.",
        "defaultValue": {
          "value": "'#000'",
          "computed": false
        }
      },
      "yAxisFields": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "An array of your y axis fields. Typically this will just be a single\nitem unless you need to display grouped or stacked bars. The order of\nthe array determines the series order in the chart.",
        "defaultValue": {
          "value": "['y']",
          "computed": false
        }
      },
      "yAxisMin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum number the y axis should display. Typically this\nshould be be `0`.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "yAxisMax": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum number the y axis should display. This should almost always\nbe the largest number from your dataset."
      },
      "yAxisFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your y axis data. If you don't\nprovide anything, we use the default D3 number formatter."
      },
      "yAxisIsStacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stack the y axis data instead of showing it as groups. This is only\nuseful if you have multiple `yAxisFields`. Stacking will cause the chart\nto be aggregated by sum.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "yAxisTickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "There are some cases where you need to only show a \"sampling\" of ticks\non the y axis. This number will control that.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "yAxisTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set a title for the y axis.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "yAxisTitleColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set a color for the y axis title. Use the color constants exported off\n`lucid.chartConstants`. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'` // custom color hex\n\n`number` is supported only for backwards compatability.",
        "defaultValue": {
          "value": "'#000'",
          "computed": false
        }
      },
      "yAxisTooltipFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your y axis titles and data in the\ntooltips. The first value is the name of your y field, the second value\nis your post-formatted y value, and the third value is your non-formatted\ny-value.\n\nSignature: `(yField, yValueFormatted, yValue) => {}`",
        "defaultValue": {
          "value": "(yField, yValueFormatted) =>\n    `${yField}: ${yValueFormatted}`",
          "computed": false
        }
      },
      "yAxisTooltipDataFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format data in the tooltips."
      }
    },
    "childComponents": [
      {
        "displayName": "EmptyStateWrapper",
        "description": "",
        "componentRef": "EmptyStateWrapper"
      }
    ],
    "customData": {
      "categories": [
        "visualizations",
        "charts"
      ],
      "madeFrom": [
        "ContextMenu",
        "ToolTip"
      ]
    }
  },
  "Bars": {
    "description": "*For use within an `svg`*\n\nBars are typically used to represent categorical data and can be stacked or\ngrouped.",
    "displayName": "Bars",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": true,
        "description": "De-normalized data\n\n    [\n      { x: 'one', y0: 1, y1: 2, y2: 3, y3: 5 },\n      { x: 'two', y0: 2, y1: 3, y2: 4, y3: 6 },\n      { x: 'three', y0: 2, y1: 4, y2: 5, y3: 6 },\n      { x: 'four', y0: 3, y1: 6, y2: 7, y3: 7 },\n      { x: 'five', y0: 4, y1: 8, y2: 9, y3: 8 },\n    ]"
      },
      "legend": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "An object with human readable names for fields that  will be used for\ntooltips. E.g:\n\n    {\n      rev: 'Revenue',\n      imps: 'Impressions',\n    }"
      },
      "hasToolTips": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show tool tips on hover.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "palette": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Takes one of the palettes exported from `lucid.chartConstants`.\nAvailable palettes:\n\n- `PALETTE_6` (default)\n- `PALETTE_30`\n- `PALETTE_MONOCHROME_0_5`\n- `PALETTE_MONOCHROME_1_5`\n- `PALETTE_MONOCHROME_2_5`\n- `PALETTE_MONOCHROME_3_5`\n- `PALETTE_MONOCHROME_4_5`\n- `PALETTE_MONOCHROME_5_5`",
        "defaultValue": {
          "value": "chartConstants.PALETTE_6",
          "computed": true
        }
      },
      "colorMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "You can pass in an object if you want to map fields to\n`lucid.chartConstants` or custom colors:\n\n    {\n      'imps': COLOR_0,\n      'rev': COLOR_3,\n      'clicks': '#abc123',\n    }"
      },
      "xScale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "The scale for the x axis. Must be a d3 band scale. Lucid exposes the\n`lucid.d3Scale.scaleBand` library for use here."
      },
      "xField": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The field we should look up your x data by.",
        "defaultValue": {
          "value": "'x'",
          "computed": false
        }
      },
      "xFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function to format the x data.",
        "defaultValue": {
          "value": "_.identity",
          "computed": true
        }
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "The scale for the y axis. Must be a d3 scale. Lucid exposes the\n`lucid.d3Scale` library for use here."
      },
      "yFields": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "The field(s) we should look up your y data by. Each entry represents a\nseries. Your actual y data should be numeric.",
        "defaultValue": {
          "value": "['y']",
          "computed": false
        }
      },
      "yFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function to format the y data.",
        "defaultValue": {
          "value": "_.identity",
          "computed": true
        }
      },
      "yStackedMax": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Typically this number can be derived from the yScale. However when we're\n`isStacked` we need to calculate a new domain for the yScale based on\nthe sum of the data. If you need explicit control of the y max when\nstacking, pass it in here."
      },
      "yTooltipFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your y axis titles and data in the\ntooltips. The first value is the name of your y field, the second value\nis your post-formatted y value, and the third value is your non-formatted\ny-value.\n\nSignature: `(yField, yValueFormatted, yValue) => {}`",
        "defaultValue": {
          "value": "(yField, yValueFormatted) =>\n    `${yField}: ${yValueFormatted}`",
          "computed": false
        }
      },
      "isStacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "This will stack the data instead of grouping it. In order to stack the\ndata we have to calculate a new domain for the y scale that is based on\nthe `sum` of the data.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "colorOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sometimes you might not want the colors to start rotating at the blue\ncolor, this number will be added the bar index in determining which\ncolor the bars are.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "chart primitives"
      ],
      "madeFrom": [
        "Bar",
        "ToolTip",
        "Legend"
      ]
    }
  },
  "Breadcrumb.SeparatorIcon": {
    "displayName": "SeparatorIcon",
    "description": "",
    "componentRef": "SeparatorIcon"
  },
  "Breadcrumb.Item": {
    "description": "",
    "displayName": "Item",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "Breadcrumb": {
    "description": "Navigation component to show a user's place in a navigation hierarchy and\nprovide links to return to higher points in the hierarchy",
    "displayName": "Breadcrumb",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "All children should be `Breadcrumb.Item`s. Others are ignored."
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      }
    },
    "childComponents": [
      {
        "displayName": "SeparatorIcon",
        "description": "",
        "componentRef": "SeparatorIcon"
      },
      {
        "description": "",
        "displayName": "Item",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": ""
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "navigation"
      ],
      "madeFrom": [
        "SeparatorIcon"
      ]
    }
  },
  "Button": {
    "description": "A basic button. Any props that are not explicitly called out below will be\npassed through to the native `button` component.",
    "displayName": "Button",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the Button by greying it out",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isActive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Activates the Button by giving it a \"pressed down\" look",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults"
      },
      "hasOnlyIcon": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set this to `true` if you want the Button to only contain\nan icon.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            }
          ]
        },
        "required": false,
        "description": "Any valid React children"
      },
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'link'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            },
            {
              "value": "'info'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Style variations of the Button"
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'short'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Size variations of the Button"
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks the `Button`.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Form element type variations of Button. Defaults to 'button' to avoid\nbeing triggered by 'Enter' anywhere on the page. Passed through to DOM\nButton.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "controls",
        "buttons"
      ]
    }
  },
  "ButtonGroup.Button": {
    "description": "Renders a `<Button`> inside the `ButtonGroup`.",
    "displayName": "Button",
    "methods": []
  },
  "ButtonGroup": {
    "description": "Button groups allow you to pair buttons together to form a seamless cluster.\nAny props not explicitly called out are spread on to the root component.",
    "displayName": "ButtonGroup",
    "methods": [
      {
        "name": "handleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ event, props: childProps }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A function that is called with the index of the child button clicked.\n`props` refers to the child button props.\n\nSignature: `(selectedIndex, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "All children should be `ButtonGroup.Button`s and they support the same\nprops as `Button`s.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selectedIndices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "An array of currently selected `ButtonGroup.Button`s indices. You can\nalso pass the prop `isActive` to individual `ButtonGroup.Button`\ncomponents.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Renders a `<Button`> inside the `ButtonGroup`.",
        "displayName": "Button",
        "methods": []
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "buttons"
      ],
      "madeFrom": [
        "Button"
      ]
    }
  },
  "CalendarMonth": {
    "description": "A single calendar month based on `react-day-picker`.",
    "displayName": "CalendarMonth",
    "methods": [
      {
        "name": "modifierRange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "day",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "modifierFrom",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "day",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "modifierTo",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "day",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "monthOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The offset of the rendered month, where 0 is the `initialMonth`. Negative\nvalues will show previous months.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "initialMonth": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Sets the month of the calendar. The 0 value for the `monthOffset`\nprop refers to this month.",
        "defaultValue": {
          "value": "new Date()",
          "computed": false
        }
      },
      "cursor": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Set the cursor to target date. Primarily used to preview expected ranges\nwhen the cursor is on a target date.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "from": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Sets the start date in a date range.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "to": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Sets the end date in a date range.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selectMode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'day'",
              "computed": false
            },
            {
              "value": "'from'",
              "computed": false
            },
            {
              "value": "'to'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The next selection that is expected. Primarily used to preview expected\nranges when the cursor is on a target date.",
        "defaultValue": {
          "value": "'day'",
          "computed": false
        }
      },
      "shouldComponentUpdate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Used to skip re-rendering of this component when true. Primarily used\nfor CalendarMonths which are rendered out of view.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "helpers"
      ]
    }
  },
  "Checkbox": {
    "description": "This is a checkbox. It's a component that is in one of two particular states\nat any given moment. It features a custom visualization of the native\ncheckbox button control to reflect its current state.\n\nIt uses a hidden native checkbox control under the hood but leverages other\nHTML elements to visualize its state.",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "handleSpanClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClicked",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "isIndeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the component should appear in an \"indeterminate\"\nor \"partially checked\" state. This prop takes precedence over\n`isSelected`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the component should appear and act disabled by\nhaving a \"greyed out\" palette and ignoring user interactions.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that the component is in the \"selected\" state when true\nand in the \"unselected\" state when false. This props is ignored if\n`isIndeterminate` is `true`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks on the component or when they press the\nspace key while the component is in focus.\n\nSignature: `(isSelected, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "controls",
        "toggles"
      ]
    }
  },
  "CheckboxLabeled.Label": {
    "description": "",
    "displayName": "Label",
    "methods": [],
    "propName": "Label",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to identify the purpose of this checkbox to the user -- can\nbe any renderable content."
      }
    }
  },
  "CheckboxLabeled": {
    "description": "This is a composite of the `Checkbox` component and the native `label`\nelement.",
    "displayName": "CheckboxLabeled",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "Label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Child element whose children are used to identify the purpose of this\ncheckbox to the user."
      },
      "isIndeterminate": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isDisabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelected": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "composes": [
      "../Checkbox/Checkbox"
    ],
    "childComponents": [
      {
        "description": "",
        "displayName": "Label",
        "methods": [],
        "propName": "Label",
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Used to identify the purpose of this checkbox to the user -- can\nbe any renderable content."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "toggles"
      ],
      "extend": "Checkbox",
      "madeFrom": [
        "Checkbox"
      ]
    }
  },
  "Collapsible": {
    "description": "This is a simple container that can render content as expanded or collapsed.",
    "displayName": "Collapsible",
    "methods": [
      {
        "name": "storeRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": true,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Expandable content."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that the component is in the \"expanded\" state when true\nand in the \"unexpanded\" state when false.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isAnimated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show an animated transition for alternating values of `isExpanded`.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isMountControlled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, do not render children when fully collapsed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "mountControlThreshold": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If `isMountControlled` is true, this value sets is the minimum height\nthe container needs to reach to not render any children.",
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      },
      "rootType": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Pass in a custom root element type.",
        "defaultValue": {
          "value": "'div'",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "utility"
      ]
    }
  },
  "ContextMenu.Target": {
    "description": "Renders an element of `elementType` (defaults to `<span>`) that the menu `FlyOut` anchors to.",
    "displayName": "Target",
    "methods": [],
    "props": {
      "elementType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "'span'",
          "computed": false
        }
      }
    }
  },
  "ContextMenu.FlyOut": {
    "description": "",
    "displayName": "FlyOut",
    "methods": [],
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "ContextMenu": {
    "description": "A ContextMenu component is used to render a target and a flyout which is positioned relative to the target.",
    "displayName": "ContextMenu",
    "methods": [
      {
        "name": "handleBodyClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getFlyoutPosition",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "alignFlyOut",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "`children` should include exactly one ContextMenu.Target and one ContextMenu.FlyOut."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'down'",
              "computed": false
            },
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "direction of the FlyOut relative to Target. Defaults to `'down'`.",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      },
      "directonOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "the px offset along the axis of the direction",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "alignment": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "alignment of the Flyout relative to Target in the cross axis from `direction` Defaults to `'start'`",
        "defaultValue": {
          "value": "'start'",
          "computed": false
        }
      },
      "alignmentOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "the px offset along the axis of the alignment"
      },
      "getAlignmentOffset": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "an alternative to `alignmentOffset`, a function that is applied with the width/height of the flyout. the result is used as the `alignmentOffset`",
        "defaultValue": {
          "value": "_.constant(0)",
          "computed": true
        }
      },
      "minWidthOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of px's to grow or shrink the minWidth of the FlyOut",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the FlyOut will render or not. Defaults to `true`.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onClickOut": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a click event happenens outside of the ContextMenu, with the signature `({ props, event }) => { ... }`",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "portalId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `id` of the FlyOut portal element that is appended to `document.body`. Defaults to a generated `id`.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Renders an element of `elementType` (defaults to `<span>`) that the menu `FlyOut` anchors to.",
        "displayName": "Target",
        "methods": [],
        "props": {
          "elementType": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": "",
            "defaultValue": {
              "value": "'span'",
              "computed": false
            }
          }
        }
      },
      {
        "description": "",
        "displayName": "FlyOut",
        "methods": [],
        "props": {
          "style": {
            "type": {
              "name": "object"
            },
            "required": false,
            "description": ""
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "utility"
      ],
      "madeFrom": [
        "Portal"
      ]
    }
  },
  "DataTable.Column": {
    "description": "Renders a `Th` for the table. It accepts all the props of `Table.Th`",
    "displayName": "Column",
    "methods": [],
    "propName": "Column",
    "props": {
      "field": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "DataTable.ColumnGroup": {
    "description": "Renders a group of `Th`s.  It accepts all the props of Table.Th",
    "displayName": "ColumnGroup",
    "methods": [],
    "propName": "ColumnGroup",
    "props": {
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "DataTable.EmptyStateWrapper": {
    "displayName": "EmptyStateWrapper",
    "description": "",
    "componentRef": "EmptyStateWrapper"
  },
  "DataTable": {
    "description": "`DataTable` provides a simple abstraction over the `Table` component to make it easier to define data-driven tables and render an array of objects.",
    "displayName": "DataTable",
    "methods": [
      {
        "name": "handleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rowIndex",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRowClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rowIndex",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSort",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "field",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "shouldColumnHandleSort",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "Array of objects to be rendered in the table. Object keys match the `field` of each defined `DataTable.Column`."
      },
      "emptyCellText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text to display in cells which have no data.",
        "defaultValue": {
          "value": "'--'",
          "computed": false
        }
      },
      "isActionable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render each row item to be navigable, allowing `onRowClick` to be triggered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isFullWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the table will be set to fill the width of its parent container."
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `LoadingMessage`."
      },
      "isSelectable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render a checkbox in the first column allowing `onSelect` and `onSelectAll` to be triggered.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the root container."
      },
      "minRows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum number of rows to rendered. If not enough data is provided, the remainder will be shown as empty rows.",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "onRowClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Handler for row click. Signature is `(object, index, { props, event }) => {...}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Handler for checkbox selection. Signature is `(object, index, { props, event }) => {...}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onSelectAll": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Handler for checkbox selection in the table header. Signature is `({ props, event }) => {...}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onSort": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Handler for column header click (for sorting). Signature is `(field, { props, event }) => {...}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "Column": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element*\n\nUsed to define a column of the table. It accepts the same props as `Table.Th` in addition to:\n\n- the required prop `field`\n- the optional prop `title`"
      },
      "ColumnGroup": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element*\n\nUsed to Group defined `Column`s in the table. It accepts the same props as `Table.Th` in addition to:\n\n- the optional prop `title`"
      }
    },
    "childComponents": [
      {
        "description": "Renders a `Th` for the table. It accepts all the props of `Table.Th`",
        "displayName": "Column",
        "methods": [],
        "propName": "Column",
        "props": {
          "field": {
            "type": {
              "name": "string"
            },
            "required": true,
            "description": ""
          },
          "title": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": ""
          }
        }
      },
      {
        "description": "Renders a group of `Th`s.  It accepts all the props of Table.Th",
        "displayName": "ColumnGroup",
        "methods": [],
        "propName": "ColumnGroup",
        "props": {
          "title": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": ""
          }
        }
      },
      {
        "displayName": "EmptyStateWrapper",
        "description": "",
        "componentRef": "EmptyStateWrapper"
      }
    ],
    "customData": {
      "categories": [
        "table"
      ],
      "madeFrom": [
        "Checkbox",
        "EmptyStateWrapper",
        "ScrollTable"
      ]
    }
  },
  "DateSelect.CalendarMonth": {
    "description": "Child component to pass thru props to underlying CalendarMonth.",
    "displayName": "CalendarMonth",
    "methods": [],
    "propName": "CalendarMonth"
  },
  "DateSelect": {
    "description": "Date selection component capabaple of supporting single date and date range\nselections.",
    "displayName": "DateSelect",
    "methods": [
      {
        "name": "handleDayClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "day",
            "type": null
          },
          {
            "name": "{ disabled }",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDayMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "day",
            "type": null
          },
          {
            "name": "{ disabled }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDayMouseLeave",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handlePrev",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNext",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "monthsShown": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of calendar months to show. Min 1, suggested max 3. Actual max is\n6.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "calendarsRendered": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of calendar months rendered at any given time (including those\nout of view).\n\nIn practice it should be at least (2 * monthsShown) + 2. It's got some\nissues that still need to be ironed out but it works.",
        "defaultValue": {
          "value": "6",
          "computed": false
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The offset of the leftmost month in view, where 0 is the `initialMonth`.\nNegative values will show previous months.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "from": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Sets the start date in a date range.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "to": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Sets the end date in a date range.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selectMode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'day'",
              "computed": false
            },
            {
              "value": "'from'",
              "computed": false
            },
            {
              "value": "'to'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The next selection that is expected. Primarily used to preview expected\nranges when the cursor is on a target date."
      },
      "initialMonth": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "Sets first month in view on render. The 0 value for the `offset` prop\nrefers to this month.",
        "defaultValue": {
          "value": "new Date()",
          "computed": false
        }
      },
      "selectedDays": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Sets selected days. Passed through to `CalendarMonth` ->\n`react-day-picker`. Can be a `Date`, array of `Date`s or a function with\nthe signature `(date) => Boolean`.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "disabledDays": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Sets disabled days. Passed through to `CalendarMonth` ->\n`react-day-picker`. Can be a `Date`, array of `Date`s or a function with\nthe signature `(date) => Boolean`.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "showDivider": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display a divider between each month.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSwipe": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when user's swipe would change the month `offset`. Callback\npasses number of months swiped by the user (positive for forward swipes,\nnegative for backwards swipes).\n\nSignature: `(monthsSwiped, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onPrev": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when user clicks the previous button.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onNext": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when user clicks the next button.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onSelectDate": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when user selects a date. Callback passes a Date object as the\nfirst argument.\n\nSignature: `(selectedDate, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "isFontSizeRelative": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render initial font size relative to size of the component so it scales with the calendar size.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "showCursorHighlight": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Highlight dates and ranges based on cursor position.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Child component to pass thru props to underlying CalendarMonth.",
        "displayName": "CalendarMonth",
        "methods": [],
        "propName": "CalendarMonth"
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "selectors"
      ],
      "madeFrom": [
        "InfiniteSlidePanel",
        "CalendarMonth"
      ]
    }
  },
  "Dialog.Header": {
    "description": "Renders a `<header>`.",
    "displayName": "Header",
    "methods": [],
    "propName": "Header"
  },
  "Dialog.Footer": {
    "description": "Renders a `<footer>`.",
    "displayName": "Footer",
    "methods": [],
    "propName": "Footer"
  },
  "Dialog": {
    "description": "Dialog is used to pop open a window so the user doesn't lose the context of\nthe page behind it. Extra props are spread through to the underlying `Overlay`",
    "displayName": "Dialog",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Size variations that only affect the width of the dialog. All the sizes\nwill grow in height until they get too big, at which point they will\nscroll inside.",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "Header": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "*Child Element* - Header contents. Only one `Header` is used."
      },
      "Footer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "*Child Element* - Footer contents. Only one `Footer` is used."
      }
    },
    "composes": [
      "../Overlay/Overlay"
    ],
    "childComponents": [
      {
        "description": "Renders a `<header>`.",
        "displayName": "Header",
        "methods": [],
        "propName": "Header"
      },
      {
        "description": "Renders a `<footer>`.",
        "displayName": "Footer",
        "methods": [],
        "propName": "Footer"
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ],
      "extend": "Overlay",
      "madeFrom": [
        "Portal",
        "Overlay"
      ]
    }
  },
  "DragCaptureZone": {
    "description": "This is a helper component used to capture mouse events to determine when the\nuser starts, is and stops dragging.",
    "displayName": "DragCaptureZone",
    "methods": [
      {
        "name": "handleDrag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragEnd",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragStart",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragCancel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "onDrag": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called as the user drags the mouse.\n\nSignature: `({ dx, dy, pageX, pageY }, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onDragEnd": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user releases the mouse button after having dragged.\n\nSignature: `({ dx, dy, pageX, pageY }, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onDragStart": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user presses the mouse button down while over the\ncomponent.\n\nSignature: `({ dx, dy, pageX, pageY }, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onDragCancel": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the drag event is canceled due to user interaction.\nFor example: if a system alert pops up during a touch event.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "utility"
      ]
    }
  },
  "DropMenu.Header": {
    "description": "An optional header to be displayed within the expanded Flyout, above all `Option`s.",
    "displayName": "Header",
    "methods": [],
    "propName": "Header"
  },
  "DropMenu.Control": {
    "description": "Renders a `<div>` that acts as the control target which the flyout menu is anchored to. Only one `Control` is used.",
    "displayName": "Control",
    "methods": [],
    "propName": "Control"
  },
  "DropMenu.OptionGroup": {
    "description": "A special kind of `Option` that is always rendered at the top of the menu and has an `optionIndex` of `null`. Useful for unselect.",
    "displayName": "OptionGroup",
    "methods": [],
    "propName": "OptionGroup",
    "props": {
      "isHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "hides the `OptionGroup` from the list.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "DropMenu.Option": {
    "description": "Renders a `<div>` that acts as an option in the menu.",
    "displayName": "Option",
    "methods": [],
    "propName": "Option",
    "props": {
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "disables selection of the `Option`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "hides the `Option` from the list.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isWrapped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "controls wrapping of the text.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "DropMenu.NullOption": {
    "description": "A special kind of `Option` that is always rendered at the top of the menu and has an `optionIndex` of `null` used for deselecting.",
    "displayName": "NullOption",
    "methods": [],
    "propName": "NullOption"
  },
  "DropMenu.ContextMenu": {
    "description": "Props that are passed through to the underling ContextMenu.",
    "displayName": "ContextMenu",
    "methods": [],
    "propName": "ContextMenu"
  },
  "DropMenu": {
    "description": "This is a helper component used to render a menu of options attached to any control. Supports option groups with and without labels as well as special options with a `null` index for unselect.",
    "displayName": "DropMenu",
    "methods": [
      {
        "name": "getPreprocessedOptionData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeydown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseFocusOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionIndex",
            "type": null
          },
          {
            "name": "optionProps",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionIndex",
            "type": null
          },
          {
            "name": "optionProps",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionProps",
            "type": null
          },
          {
            "name": "optionIndex",
            "type": null
          },
          {
            "name": "isGrouped",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "preprocessOptionData",
        "docblock": null,
        "modifiers": [
          "static"
        ],
        "params": [
          {
            "name": "props",
            "type": null
          },
          {
            "name": "ParentType",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be instances of {`DropMenu.Control`, `DropMenu.Option`, `DropMenu.OptionGroup`, `DropMenu.Nulloption`}. Other direct child elements will not render."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root elements. Applies to *both* the control and the flyout menu."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to root element."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the DropMenu from being clicked or focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Renders the flyout menu adjacent to the control.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'down'",
              "computed": false
            },
            {
              "value": "'up'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the direction the flyout menu will render relative to the control.",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      },
      "alignment": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the alignment the flyout menu will render relative to the control.",
        "defaultValue": {
          "value": "'start'",
          "computed": false
        }
      },
      "selectedIndices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "An array of currently selected `DropMenu.Option` indices.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "focusedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The currently focused index of `DropMenu.Option`. Can also be `null`.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "portalId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `id` of the flyout menu portal element that is appended to `document.body`. Defaults to a generated id."
      },
      "flyOutStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the ContextMenu FlyOut element.",
        "defaultValue": {
          "value": "{ maxHeight: '18em' }",
          "computed": false
        }
      },
      "optionContainerStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the option container element."
      },
      "onExpand": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when collapsed and the control is clicked, or when the control has focus and the Down Arrow is pressed.\nHas the signature `({ props, event }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onCollapse": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when expanded and the user clicks the control or outside of the menu, or when the control has focus and the Escape key is pressed\nHas the signature `({ props, event }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when an option is clicked, or when an option has focus and the Enter key is pressed.\nHas the signature `(optionIndex, {props, event}) => {}` where optionIndex can be a number or `null`.",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onFocusNext": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when expanded and the the Down Arrow key is pressed. Not called when focus is on the last option.\nHas the signature `({ props, event }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onFocusPrev": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when expanded and the the Up Arrow key is pressed. Not called when focus is on the first option.\nHas the signature `({ props, event }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onFocusOption": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the mouse moves over an option.\nHas the signature `(optionIndex) => {}` where optionIndex can be a number or `null`.",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "Control": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - The control target which the flyout menu is anchored to. Only one `Control` is used."
      },
      "Option": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - These are menu options. The `optionIndex` is in-order of rendering regardless of group nesting, starting with index `0`.\nEach `Option` may be passed a prop called `isDisabled` to disable selection of that `Option`.\nAny other props pass to Option will be available from the `onSelect` handler."
      },
      "OptionGroup": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - Used to group `Option`s within the menu. Any non-`Option`s passed in will be rendered as a label for the group."
      },
      "NullOption": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - A special kind of `Option` that is always rendered at the top of the menu and has an `optionIndex` of `null`. Useful for unselect."
      },
      "Header": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - An optional header to be displayed within the expanded Flyout, above all `Option`s."
      },
      "ContextMenu": {
        "defaultValue": {
          "value": "ContextMenu.getDefaultProps()",
          "computed": true
        }
      }
    },
    "childComponents": [
      {
        "description": "An optional header to be displayed within the expanded Flyout, above all `Option`s.",
        "displayName": "Header",
        "methods": [],
        "propName": "Header"
      },
      {
        "description": "Renders a `<div>` that acts as the control target which the flyout menu is anchored to. Only one `Control` is used.",
        "displayName": "Control",
        "methods": [],
        "propName": "Control"
      },
      {
        "description": "A special kind of `Option` that is always rendered at the top of the menu and has an `optionIndex` of `null`. Useful for unselect.",
        "displayName": "OptionGroup",
        "methods": [],
        "propName": "OptionGroup",
        "props": {
          "isHidden": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "hides the `OptionGroup` from the list.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          }
        }
      },
      {
        "description": "Renders a `<div>` that acts as an option in the menu.",
        "displayName": "Option",
        "methods": [],
        "propName": "Option",
        "props": {
          "isDisabled": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "disables selection of the `Option`.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "isHidden": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "hides the `Option` from the list.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "isWrapped": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "controls wrapping of the text.",
            "defaultValue": {
              "value": "true",
              "computed": false
            }
          }
        }
      },
      {
        "description": "A special kind of `Option` that is always rendered at the top of the menu and has an `optionIndex` of `null` used for deselecting.",
        "displayName": "NullOption",
        "methods": [],
        "propName": "NullOption"
      },
      {
        "description": "Props that are passed through to the underling ContextMenu.",
        "displayName": "ContextMenu",
        "methods": [],
        "propName": "ContextMenu"
      }
    ],
    "customData": {
      "categories": [
        "helpers"
      ],
      "madeFrom": [
        "ContextMenu"
      ]
    }
  },
  "EmptyStateWrapper.Body": {
    "description": "Body content for the message to display when there is no data.",
    "displayName": "Body",
    "methods": [],
    "propName": "Body"
  },
  "EmptyStateWrapper.Title": {
    "description": "Title text for the message to display when there is no data.",
    "displayName": "Title",
    "methods": [],
    "propName": "Title"
  },
  "EmptyStateWrapper": {
    "description": "A wrapper which can display either a `LoadingIndicator` or `OverlayWrapper`.",
    "displayName": "EmptyStateWrapper",
    "methods": [],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "isEmpty": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `EmptyMessage`"
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `LoadingMessage`."
      },
      "Body": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element*\n\nThe element to display in the body of the overlay."
      },
      "Title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element*\n\nThe element to display in the title of the overlay."
      }
    },
    "childComponents": [
      {
        "description": "Body content for the message to display when there is no data.",
        "displayName": "Body",
        "methods": [],
        "propName": "Body"
      },
      {
        "description": "Title text for the message to display when there is no data.",
        "displayName": "Title",
        "methods": [],
        "propName": "Title"
      }
    ],
    "customData": {
      "categories": [
        "utility"
      ],
      "madeFrom": [
        "LoadingIndicator",
        "OverlayWrapper"
      ]
    }
  },
  "Expander.Label": {
    "description": "Renders a `<span>` to be shown next to the expander icon.",
    "displayName": "Label",
    "methods": [],
    "propName": "Label",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to identify the purpose of this switch to the user -- can be\nany renderable content."
      }
    }
  },
  "Expander": {
    "description": "This is a container that provides a toggle that controls when the content is\nshown.",
    "displayName": "Expander",
    "methods": [
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Expandable content."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that the component is in the \"expanded\" state when true\nand in the \"unexpanded\" state when false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks on the component's header.\n\nSignature: `(isExpanded, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "Label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Child element whose children represents content to be shown next to\nthe expander icon."
      },
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'simple'",
              "computed": false
            },
            {
              "value": "'highlighted'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Renders different variants of Expander. 'simple' is default. 'highlighted' is more prominant.",
        "defaultValue": {
          "value": "'simple'",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Renders a `<span>` to be shown next to the expander icon.",
        "displayName": "Label",
        "methods": [],
        "propName": "Label",
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Used to identify the purpose of this switch to the user -- can be\nany renderable content."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ],
      "madeFrom": [
        "ChevronIcon"
      ]
    }
  },
  "ExpanderPanel.Header": {
    "description": "Renders a `<span>` of content next to the `ChevronIcon` in the `Panel.Header`",
    "displayName": "Header",
    "methods": [],
    "propName": "Header",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to identify the purpose of this switch to the user -- can be\nany renderable content."
      }
    }
  },
  "ExpanderPanel": {
    "description": "This is a container that provides a toggle that controls when the content is\nshown.",
    "displayName": "ExpanderPanel",
    "methods": [
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Expandable content."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that the component is in the \"expanded\" state when true\nand in the \"unexpanded\" state when false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that the component is in the \"disabled\" state when true\nand in the \"enabled\" state when false."
      },
      "hasPadding": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the presence of padding on the inner content.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks on the component's header.\n\nSignature: `(isExpanded, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "Header": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "prop alternative to Header child component\npassed through to the underlying ExpanderPanel"
      }
    },
    "childComponents": [
      {
        "description": "Renders a `<span>` of content next to the `ChevronIcon` in the `Panel.Header`",
        "displayName": "Header",
        "methods": [],
        "propName": "Header",
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Used to identify the purpose of this switch to the user -- can be\nany renderable content."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ],
      "madeFrom": [
        "ChevronIcon",
        "Expander",
        "Panel"
      ]
    }
  },
  "Grid.Cell": {
    "description": "Renders an `<article>` as the grid cell",
    "displayName": "Cell",
    "methods": [],
    "props": {
      "isFull": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill all twelve columns of the primary grid axis"
      },
      "isHalf": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill six columns of the primary grid axis"
      },
      "isThird": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill four columns of the primary grid axis"
      },
      "isQuarter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill three columns of the primary grid axis"
      },
      "is2": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 2 columns of 12"
      },
      "is3": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 3 columns of 12"
      },
      "is4": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 4 columns of 12"
      },
      "is5": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 5 columns of 12"
      },
      "is6": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 6 columns of 12"
      },
      "is7": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 7 columns of 12"
      },
      "is8": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 8 columns of 12"
      },
      "is9": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 9 columns of 12"
      },
      "is10": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 10 columns of 12"
      },
      "is11": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "fill 11 columns of 12"
      },
      "isOffsetQuarter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "offset a grid cell by three columns"
      },
      "isOffsetThird": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "offset a grid cell by four columns"
      },
      "isOffsetHalf": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "offset a grid cell by six columns"
      }
    }
  },
  "Grid": {
    "description": "This component is designed to be used in Composites as a layout tool.\nYou can use the Grid components themselves or create your own components using the Grid styles from Grid.less.\nPlease see examples for more information.",
    "displayName": "Grid",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "isVertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "explicitly set the primary axis of the grid to Y"
      },
      "isHorizontal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "explicitly set the primary axis of the grid to X"
      },
      "isGutterless": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "a grid without padding separating grid cells"
      },
      "isMultiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allow Grids to wrap multiple lines"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React component"
      }
    },
    "childComponents": [
      {
        "description": "Renders an `<article>` as the grid cell",
        "displayName": "Cell",
        "methods": [],
        "props": {
          "isFull": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill all twelve columns of the primary grid axis"
          },
          "isHalf": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill six columns of the primary grid axis"
          },
          "isThird": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill four columns of the primary grid axis"
          },
          "isQuarter": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill three columns of the primary grid axis"
          },
          "is2": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 2 columns of 12"
          },
          "is3": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 3 columns of 12"
          },
          "is4": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 4 columns of 12"
          },
          "is5": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 5 columns of 12"
          },
          "is6": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 6 columns of 12"
          },
          "is7": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 7 columns of 12"
          },
          "is8": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 8 columns of 12"
          },
          "is9": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 9 columns of 12"
          },
          "is10": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 10 columns of 12"
          },
          "is11": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "fill 11 columns of 12"
          },
          "isOffsetQuarter": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "offset a grid cell by three columns"
          },
          "isOffsetThird": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "offset a grid cell by four columns"
          },
          "isOffsetHalf": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "offset a grid cell by six columns"
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ]
    }
  },
  "AddURLIcon": {
    "description": "Add URL",
    "displayName": "AddURLIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "AnalyzeDataIcon": {
    "description": "Typically used to show the user that further data analysis is available.",
    "displayName": "AnalyzeDataIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "ArrowIcon": {
    "description": "An arrow icon.",
    "displayName": "ArrowIcon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'down'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "direction variations of the icon",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "viewBox": {
        "defaultValue": {
          "value": "'0 0 16 16'",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "AsteriskIcon": {
    "description": "An asterisk icon.",
    "displayName": "AsteriskIcon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "viewBox": {
        "defaultValue": {
          "value": "'0 0 18 18'",
          "computed": false
        }
      },
      "size": {
        "defaultValue": {
          "value": "18",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "BeakerIcon": {
    "description": "A Beaker icon.",
    "displayName": "BeakerIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "BellIcon": {
    "description": "Typically used for notifications.",
    "displayName": "BellIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "CalendarIcon": {
    "description": "An icon for calendar-y things.",
    "displayName": "CalendarIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "CaretIcon": {
    "description": "A caret icon.",
    "displayName": "CaretIcon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'down'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "direction variations of the icon",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      },
      "viewBox": {
        "defaultValue": {
          "value": "'0 3 16 8'",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "CheckIcon": {
    "description": "A check icon.",
    "displayName": "CheckIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "ChevronIcon": {
    "description": "A chevron icon.",
    "displayName": "ChevronIcon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'down'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "direction variations of the icon",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "ChevronThinIcon": {
    "description": "A flat, thin chevron icon for directional navigation.",
    "displayName": "ChevronThinIcon",
    "methods": [],
    "isPrivateComponent": true,
    "props": {
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "direction variations of the icon",
        "defaultValue": {
          "value": "'right'",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "ClockIcon": {
    "description": "Typically used for time-sensitive stuff.",
    "displayName": "ClockIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "CrossIcon": {
    "description": "A cross icon.",
    "displayName": "CrossIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "DangerIcon": {
    "description": "DANGER WILL ROBINSON DANGER",
    "displayName": "DangerIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "CrossIcon",
      "madeFrom": [
        "CrossIcon"
      ]
    }
  },
  "DangerLightIcon": {
    "description": "DANGER WILL ROBINSON DANGER",
    "displayName": "DangerLightIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "DataViewIcon": {
    "description": "Typically used to guide users to more detailed data.",
    "displayName": "DataViewIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "DownloadIcon": {
    "description": "Typically used to denote that something is available for download.",
    "displayName": "DownloadIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "DownloadTableDataIcon": {
    "description": "Typically used to denote that the table has data that's available for\ndownload. Usually clicking should kick off the download.",
    "displayName": "DownloadTableDataIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "DuplicateIcon": {
    "description": "Typically used when something can be duplicated.",
    "displayName": "DuplicateIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "EditIcon": {
    "description": "An edit icon.",
    "displayName": "EditIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "EditPageIcon": {
    "description": "A page edit icon.",
    "displayName": "EditPageIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "EligibilityIcon": {
    "description": "An eligibility icon.",
    "displayName": "EligibilityIcon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "eligibility": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'both'",
              "computed": false
            },
            {
              "value": "'neither'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Eligibility variations of the icon.",
        "defaultValue": {
          "value": "'neither'",
          "computed": false
        }
      },
      "isDisabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "EqualsIcon": {
    "description": "An equals icon.",
    "displayName": "EqualsIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "FileIcon": {
    "description": "An icon for a file.",
    "displayName": "FileIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "FilterIcon": {
    "description": "Typically used to denote that something is filterable.",
    "displayName": "FilterIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "FourSquaresIcon": {
    "description": "Description.",
    "displayName": "FourSquaresIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "GripperHorizontalIcon": {
    "description": "A horizontal gripper icon.",
    "displayName": "GripperHorizontalIcon",
    "methods": [],
    "isPrivateComponent": true,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "GripperVerticalIcon": {
    "description": "A vertical gripper icon.",
    "displayName": "GripperVerticalIcon",
    "methods": [],
    "isPrivateComponent": true,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "HelpIcon": {
    "description": "Help me Rhonda.",
    "displayName": "HelpIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "HomeIcon": {
    "description": "RUNHOME Jack! No, no, no, HOMERUN Jack!",
    "displayName": "HomeIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "Icon": {
    "description": "A basic svg icon. Any props that are not explicitly called out below will be\npassed through to the native `svg` component.",
    "displayName": "Icon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the `svg`."
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Classes that are appended to the component defaults. This prop is run\nthrough the `classnames` library."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Size variations of the icons. `size` directly effects height and width\nbut the developer should also be conscious of the relationship with\n`viewBox`.",
        "defaultValue": {
          "value": "16",
          "computed": false
        }
      },
      "viewBox": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "`viewBox` is very important for SVGs. You can think of `viewBox` as the\n\"artboard\" for our SVG while `size` is the presented height and width.",
        "defaultValue": {
          "value": "'0 0 16 16'",
          "computed": false
        }
      },
      "aspectRatio": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Any valid SVG aspect ratio.",
        "defaultValue": {
          "value": "'xMidYMid meet'",
          "computed": false
        }
      },
      "isBadge": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Add badge styling.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isClickable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds styling that makes the icon appear clickable."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds styling that makes the icon appear disabled.\nAlso forces isClickable to be false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Any valid React children."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ]
    }
  },
  "ImageIcon": {
    "description": "An icon for a file.",
    "displayName": "ImageIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "InfoIcon": {
    "description": "An info icon.",
    "displayName": "InfoIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "InfoLightIcon": {
    "description": "A light info icon.",
    "displayName": "InfoLightIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "LinkedIcon": {
    "description": "Get linked in with this fresh new icon!",
    "displayName": "LinkedIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "LoadingIcon": {
    "description": "A loading icon.",
    "displayName": "LoadingIcon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "speed": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fast'",
              "computed": false
            },
            {
              "value": "'normal'",
              "computed": false
            },
            {
              "value": "'slow'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The speed of rotation of the spinner. Defaults to 'normal'",
        "defaultValue": {
          "value": "'normal'",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "LockedIcon": {
    "description": "You shall not pass!",
    "displayName": "LockedIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "MaximizeIcon": {
    "description": "A maximize icon.",
    "displayName": "MaximizeIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "MinimizeIcon": {
    "description": "A minimize icon.",
    "displayName": "MinimizeIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "MinusCircleIcon": {
    "description": "Description.",
    "displayName": "MinusCircleIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "MinusCircleLightIcon": {
    "description": "Description.",
    "displayName": "MinusCircleLightIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "MinusIcon": {
    "description": "A minus icon.",
    "displayName": "MinusIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "NewWindowIcon": {
    "description": "A new window icon.",
    "displayName": "NewWindowIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "OutwardArrowsIcon": {
    "description": "Typically used to denote width, height, or aspect ratio.",
    "displayName": "OutwardArrowsIcon",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            },
            {
              "value": "'diagonal'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determines the kind of arrows you want to display. `horizontal` is\nusually used for width. `vertical` is usually used for height.\n`diagonal` is usually used for aspect ratio.",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      }
    },
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "PlusIcon": {
    "description": "A plus icon.",
    "displayName": "PlusIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "QuestionMarkCircleIcon": {
    "description": "Description.",
    "displayName": "QuestionMarkCircleIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "RefreshIcon": {
    "description": "A refresh icon.",
    "displayName": "RefreshIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "ResizeIcon": {
    "description": "A resize icon.",
    "displayName": "ResizeIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "SearchIcon": {
    "description": "A search icon.",
    "displayName": "SearchIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "SeparatorIcon": {
    "description": "An Separator icon.",
    "displayName": "SeparatorIcon",
    "methods": [],
    "isPrivateComponent": true,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "SettingsIcon": {
    "description": "A settings icon.",
    "displayName": "SettingsIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "ShoppingCartIcon": {
    "description": "Buy buy buy!",
    "displayName": "ShoppingCartIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "StarIcon": {
    "description": "You're a shooting star!",
    "displayName": "StarIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "StarOutlineIcon": {
    "description": "It's gone supernova.",
    "displayName": "StarOutlineIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "StopwatchIcon": {
    "description": "A Stopwatch Icon.",
    "displayName": "StopwatchIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "SuccessIcon": {
    "description": "A success icon.",
    "displayName": "SuccessIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "CheckIcon",
      "madeFrom": [
        "CheckIcon"
      ]
    }
  },
  "SuccessLightIcon": {
    "description": "Nothing like a mild success in the morning to get the blood flowing!",
    "displayName": "SuccessLightIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "SwitchIcon": {
    "description": "A swap icon.",
    "displayName": "SwitchIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "TableGearIcon": {
    "description": "A table configuration Icon.",
    "displayName": "TableGearIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "UnlinkedIcon": {
    "description": "For all those times you just need to break away.",
    "displayName": "UnlinkedIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "UnlockedIcon": {
    "description": "Unlock it.",
    "displayName": "UnlockedIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "UploadIcon": {
    "description": "Upload files",
    "displayName": "UploadIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "UserIcon": {
    "description": "You, sir.",
    "displayName": "UserIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "ViewIcon": {
    "description": "Would you just look at it?!",
    "displayName": "ViewIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "WarningIcon": {
    "description": "A warning Icon.",
    "displayName": "WarningIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "WarningLightIcon": {
    "description": "Diet version.",
    "displayName": "WarningLightIcon",
    "methods": [],
    "isPrivateComponent": false,
    "composes": [
      "../Icon"
    ],
    "childComponents": [],
    "customData": {
      "categories": [
        "visual design",
        "icons"
      ],
      "extend": "Icon",
      "madeFrom": [
        "Icon"
      ]
    }
  },
  "InfiniteSlidePanel.Slide": {
    "description": "",
    "displayName": "Slide",
    "methods": [],
    "propName": "Slide"
  },
  "InfiniteSlidePanel": {
    "description": "A container for rendering an infinite set of horizontal slides. Translation\nbetween slides is controlled by passing in a new `offset`.  Can hook into\ntouch events to update the `offset`. This component is made from SlidePanel,\nso it accepts the same props.",
    "displayName": "InfiniteSlidePanel",
    "methods": [],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "func"
            }
          ]
        },
        "required": false,
        "description": "The only allowed child is a render function which is passed the current\nslide's offset and returns the slide contents:\n  `(slideOffset) => { //returns React.PropTypes.node }`\nAlternatively, you could pass one <InfiniteSlidePanel.Slide {...}>\nelement with the render function. The only reason do to the latter is to\npass addiontal props to the slide element."
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The offset of the left-most rendered slide.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "slidesToShow": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max number of viewable slides to show simultaneously.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "onSwipe": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a user's swipe would change the offset. Callback passes\nnumber of slides by the user (positive for forward swipes, negative for\nbackwards swipes).\n\nSignature: `(slidesSwiped, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "totalSlides": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of slides rendered at any given time. A good rule-of-thumb is\nthat this should be at least 4 times the `slidesToShow` value.",
        "defaultValue": {
          "value": "8",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "",
        "displayName": "Slide",
        "methods": [],
        "propName": "Slide"
      }
    ],
    "customData": {
      "categories": [
        "helpers"
      ],
      "madeFrom": [
        "SlidePanel"
      ]
    }
  },
  "Legend.Item": {
    "description": "Renders a `<li>` that describes the data series.",
    "displayName": "Item",
    "methods": [],
    "props": {
      "hasPoint": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "hasLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Strings should match an existing color class unless they start with a\n'#' for specific colors. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'`"
      },
      "pointKind": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      }
    }
  },
  "Legend": {
    "description": "Contrary to the other chart primitives, this component is not rendered in\nsvg. In order to sanely render horizontal legends, we need to know the width\nof the text elements ahead of rendering time. Since we're using a variable\nwidth font, the only way I know of to correctly get the width is with the\nDOM function `getComputedTextLength`. Variable widths are much more easy to\nimplement outside of svg.",
    "displayName": "Legend",
    "methods": [
      {
        "name": "handleItemClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          },
          {
            "name": "props",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "orient": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'horizontal'",
              "computed": false
            },
            {
              "value": "'vertical'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Determine orientation of the legend.",
        "defaultValue": {
          "value": "'vertical'",
          "computed": false
        }
      },
      "hasBorders": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show the legend borders. Turn this off if you want to put the legend in\na `ToolTip` for example.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isReversed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Reverse the order of items in the legend.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Renders a `<li>` that describes the data series.",
        "displayName": "Item",
        "methods": [],
        "props": {
          "hasPoint": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": ""
          },
          "hasLine": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": ""
          },
          "color": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": "Strings should match an existing color class unless they start with a\n'#' for specific colors. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'`"
          },
          "pointKind": {
            "type": {
              "name": "number"
            },
            "required": false,
            "description": ""
          },
          "onClick": {
            "type": {
              "name": "func"
            },
            "required": false,
            "description": ""
          },
          "className": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": "Class names that are appended to the defaults."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "visualizations",
        "chart primitives"
      ]
    }
  },
  "Line": {
    "description": "*For use within an `svg`*\n\nLines are typically used for line charts and are pretty much a thin wrapper\naround svg paths.",
    "displayName": "Line",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "d": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The path for the line."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Strings should match an existing color class unless they start with a\n'#' for specific colors. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'`",
        "defaultValue": {
          "value": "chartConstants.COLOR_0",
          "computed": true
        }
      },
      "isDotted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display a dotted line.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "geoms"
      ]
    }
  },
  "LineChart.EmptyStateWrapper": {
    "displayName": "EmptyStateWrapper",
    "description": "",
    "componentRef": "EmptyStateWrapper"
  },
  "LineChart": {
    "description": "The line chart presents data over time. Currently only dates are supported\non the x axis and numeric values on the y. If you need discrete values on\nthe x axis, consider using the `BarChart` instead.",
    "displayName": "LineChart",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Height of the chart.",
        "defaultValue": {
          "value": "400",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the chart.",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "shape",
          "value": {
            "top": {
              "name": "number",
              "required": false
            },
            "right": {
              "name": "number",
              "required": false
            },
            "bottom": {
              "name": "number",
              "required": false
            },
            "left": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "An object defining the margins of the chart. These margins will contain\nthe axis and labels.",
        "defaultValue": {
          "value": "{\n    top: 10,\n    right: 80,\n    bottom: 65,\n    left: 80,\n}",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "Data for the chart. E.g.\n\n    [\n      { x: new Date('2015-01-01') , y: 1 } ,\n      { x: new Date('2015-01-02') , y: 2 } ,\n      { x: new Date('2015-01-03') , y: 3 } ,\n      { x: new Date('2015-01-04') , y: 2 } ,\n      { x: new Date('2015-01-05') , y: 5 } ,\n    ]"
      },
      "legend": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "An object with human readable names for fields that will be used for\nlegends and tooltips. E.g:\n\n    {\n      x: 'Date',\n      y: 'Impressions',\n    }"
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `LoadingMessage`."
      },
      "hasToolTips": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show tool tips on hover.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasLegend": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show a legend at the bottom of the chart.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "palette": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Takes one of the palettes exported from `lucid.chartConstants`.\nAvailable palettes:\n\n- `PALETTE_6` (default)\n- `PALETTE_30`\n- `PALETTE_MONOCHROME_0_5`\n- `PALETTE_MONOCHROME_1_5`\n- `PALETTE_MONOCHROME_2_5`\n- `PALETTE_MONOCHROME_3_5`\n- `PALETTE_MONOCHROME_4_5`\n- `PALETTE_MONOCHROME_5_5`",
        "defaultValue": {
          "value": "chartConstants.PALETTE_6",
          "computed": true
        }
      },
      "colorMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "You can pass in an object if you want to map fields to\n`lucid.chartConstants` or custom colors:\n\n    {\n      'imps': COLOR_0,\n      'rev': COLOR_3,\n      'clicks': '#abc123',\n    }"
      },
      "xAxisField": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The field we should look up your x data by. The data must be valid\njavascript dates.",
        "defaultValue": {
          "value": "'x'",
          "computed": false
        }
      },
      "xAxisMin": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "The minimum date the x axis should display. Typically this will be the\nsmallest items from your dataset."
      },
      "xAxisMax": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "The maximum date the x axis should display. This should almost always be\nthe largest date from your dataset."
      },
      "xAxisFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your x axis data. If you don't\nprovide anything, we use the default D3 date variable formatter."
      },
      "xAxisTooltipFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your x axis dates in the tooltips.",
        "defaultValue": {
          "value": "d3TimeFormat.timeFormat('%a %x %X')",
          "computed": true
        }
      },
      "xAxisTickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "There are some cases where you need to only show a \"sampling\" of ticks\non the x axis. This number will control that.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "xAxisTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set a title for the x axis.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "xAxisTitleColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set a color for the x axis title. Use the color constants exported off\n`lucid.chartConstants`. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'` // custom color hex\n\n`number` is supported only for backwards compatability.",
        "defaultValue": {
          "value": "'#000'",
          "computed": false
        }
      },
      "yAxisFields": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "An array of your y axis fields. Typically this will just be a single\nitem unless you need to display multiple lines. The order of the array\ndetermines the series order in the chart.",
        "defaultValue": {
          "value": "['y']",
          "computed": false
        }
      },
      "yAxisMin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum number the y axis should display. Typically this should be\n`0`.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "yAxisMax": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum number the y axis should display. This should almost always\nbe the largest number from your dataset."
      },
      "yAxisFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your y axis data. If you don't\nprovide anything, we use the default D3 formatter."
      },
      "yAxisIsStacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stack the y axis data. This is only useful if you have multiple\n`yAxisFields`. Stacking will cause the chart to be aggregated by sum.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "yAxisHasPoints": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display points along with the y axis lines.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "yAxisTickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "There are some cases where you need to only show a \"sampling\" of ticks\non the y axis. This number will control that.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "yAxisTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set a title for the y axis.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "yAxisTitleColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set a color for the y axis title. Use the color constants exported off\n`lucid.chartConstants`. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'` // custom color hex\n\n`number` is supported only for backwards compatability.",
        "defaultValue": {
          "value": "'#000'",
          "computed": false
        }
      },
      "yAxisTooltipFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your y axis titles and data in the\ntooltips. The first value is the name of your y field, the second value\nis your post-formatted y value, and the third value is your non-formatted\ny-value.\n\nSignature: `(yField, yValueFormatted, yValue) => {}`",
        "defaultValue": {
          "value": "(yField, yValueFormatted) =>\n    `${yField}: ${yValueFormatted}`",
          "computed": false
        }
      },
      "yAxisTooltipDataFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format data in the tooltips."
      },
      "yAxisColorOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the starting index where colors start rotating for points and lines\nalong the y axis.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "y2AxisFields": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "An array of your y2 axis fields. Typically this will just be a single\nitem unless you need to display multiple lines. The order of the array\ndetermines the series order in the chart.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "y2AxisMin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum number the y2 axis should display. Typically this should be\n`0`.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "y2AxisMax": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum number the y2 axis should display. This should almost always\nbe the largest number from your dataset."
      },
      "y2AxisFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your y2 axis data. If you don't\nprovide anything, we use the default D3 formatter."
      },
      "y2AxisTooltipDataFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format data in the tooltips."
      },
      "y2AxisIsStacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Stack the y2 axis data. This is only useful if you have multiple\n`y2AxisFields`. Stacking will cause the chart to be aggregated by sum.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "y2AxisHasPoints": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display points along with the y2 axis lines.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "y2AxisTickCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "There are some cases where you need to only show a \"sampling\" of ticks\non the y2 axis. This number will control that.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "y2AxisTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set a title for the y2 axis.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "y2AxisTitleColor": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set a color for the y2 axis title. Use the color constants exported off\n`lucid.chartConstants`. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'` // custom color hex\n\n`number` is supported only for backwards compatability.",
        "defaultValue": {
          "value": "'#000'",
          "computed": false
        }
      },
      "y2AxisColorOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the starting index where colors start rotating for points and lines\nalong the y2 axis.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "displayName": "EmptyStateWrapper",
        "description": "",
        "componentRef": "EmptyStateWrapper"
      }
    ],
    "customData": {
      "categories": [
        "visualizations",
        "charts"
      ],
      "madeFrom": [
        "ContextMenu",
        "ToolTip"
      ]
    }
  },
  "Lines": {
    "description": "*For use within an `svg`*\n\nLines are typically used to represent continuous data and can be stacked.",
    "displayName": "Lines",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "top": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Top"
      },
      "left": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Left"
      },
      "palette": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Takes one of the palettes exported from `lucid.chartConstants`.\nAvailable palettes:\n\n- `PALETTE_6` (default)\n- `PALETTE_30`\n- `PALETTE_MONOCHROME_0_5`\n- `PALETTE_MONOCHROME_1_5`\n- `PALETTE_MONOCHROME_2_5`\n- `PALETTE_MONOCHROME_3_5`\n- `PALETTE_MONOCHROME_4_5`\n- `PALETTE_MONOCHROME_5_5`",
        "defaultValue": {
          "value": "chartConstants.PALETTE_6",
          "computed": true
        }
      },
      "colorMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "You can pass in an object if you want to map fields to\n`lucid.chartConstants` or custom colors:\n\n    {\n      'imps': COLOR_0,\n      'rev': COLOR_3,\n      'clicks': '#abc123',\n    }"
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": true,
        "description": "De-normalized data, e.g.\n\n\n    [\n      { x: 'one'   , y: 1 },\n      { x: 'two'   , y: 2 },\n      { x: 'three' , y: 2 },\n      { x: 'four'  , y: 3 },\n      { x: 'five'  , y: 4 },\n    ]\n\n\nOr (be sure to set `yFields` to `['y0', 'y1', 'y2', 'y3']`)\n\n    [\n      { x: 'one'   , y0: 1  , y1: 2 , y2: 3 , y3: 5 },\n      { x: 'two'   , y0: 2  , y1: 3 , y2: 4 , y3: 6 },\n      { x: 'three' , y0: 2  , y1: 4 , y2: 5 , y3: 6 },\n      { x: 'four'  , y0: 3  , y1: 6 , y2: 7 , y3: 7 },\n      { x: 'five'  , y0: 4  , y1: 8 , y2: 9 , y3: 8 },\n      { x: 'six'   , y0: 20 , y1: 8 , y2: 9 , y3: 1 },\n    ]"
      },
      "xScale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "The scale for the x axis. Must be a d3 scale. Lucid exposes the\n`lucid.d3Scale` library for use here."
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "The scale for the y axis. Must be a d3 scale. Lucid exposes the\n`lucid.d3Scale` library for use here."
      },
      "yStackedMax": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Typically this number can be derived from the yScale. However when we're\n`isStacked` we need to calculate a new domain for the yScale based on\nthe sum of the data. If you need explicit control of the y max when\nstacking, pass it in here."
      },
      "xField": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The field we should look up your x data by.",
        "defaultValue": {
          "value": "'x'",
          "computed": false
        }
      },
      "yFields": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "The field(s) we should look up your y data by. Each entry represents a\nseries. Your actual y data should be numeric.",
        "defaultValue": {
          "value": "['y']",
          "computed": false
        }
      },
      "isStacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "This will stack the data instead of grouping it. In order to stack the\ndata we have to calculate a new domain for the y scale that is based on\nthe `sum` of the data.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "colorOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sometimes you might not want the colors to start rotating at the blue\ncolor, this number will be added the line index in determining which\ncolor the lines are.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "chart primitives"
      ],
      "madeFrom": [
        "Line"
      ]
    }
  },
  "LoadingIndicator.LoadingMessage": {
    "displayName": "LoadingMessage",
    "description": "",
    "componentRef": "LoadingMessage"
  },
  "LoadingIndicator": {
    "description": "A loading indicator wrapper with optional overlay.",
    "displayName": "LoadingIndicator",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "hasOverlay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set this to `false` if you don't want the semi-transparent overlay over\nthe wrapped content",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `LoadingMessage` and overlay.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overlayKind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'light'",
              "computed": false
            },
            {
              "value": "'dark'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Style variations for the overlay behind the loading indicator.",
        "defaultValue": {
          "value": "'light'",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "displayName": "LoadingMessage",
        "description": "",
        "componentRef": "LoadingMessage"
      }
    ],
    "customData": {
      "categories": [
        "communication"
      ],
      "madeFrom": [
        "OverlayWrapper",
        "LoadingMessage"
      ]
    }
  },
  "LoadingMessage.Icon": {
    "description": "Renders the `Icon` element passed in",
    "displayName": "Icon",
    "methods": [],
    "propName": "Icon"
  },
  "LoadingMessage.Title": {
    "description": "Renders an `<h3>` that represents the title of the `LoadingMessage`.\nDefaults to the string \"Loading\".",
    "displayName": "Title",
    "methods": [],
    "propName": "Title"
  },
  "LoadingMessage.Body": {
    "description": "Renders an `<span>` that represents the body of the `LoadingMessage`.",
    "displayName": "Body",
    "methods": [],
    "propName": "Body"
  },
  "LoadingMessage": {
    "description": "A loading message.",
    "displayName": "LoadingMessage",
    "methods": [],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "Icon": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Custom Icon element (alias for `LoadingMessage.Icon`)"
      },
      "Title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Custom Title element (alias for `LoadingMessage.Title`)"
      },
      "Body": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Custom Body element (alias for `LoadingMessage.Body`)"
      }
    },
    "childComponents": [
      {
        "description": "Renders the `Icon` element passed in",
        "displayName": "Icon",
        "methods": [],
        "propName": "Icon"
      },
      {
        "description": "Renders an `<h3>` that represents the title of the `LoadingMessage`.\nDefaults to the string \"Loading\".",
        "displayName": "Title",
        "methods": [],
        "propName": "Title"
      },
      {
        "description": "Renders an `<span>` that represents the body of the `LoadingMessage`.",
        "displayName": "Body",
        "methods": [],
        "propName": "Body"
      }
    ],
    "customData": {
      "categories": [
        "communication"
      ],
      "madeFrom": [
        "LoadingIcon"
      ]
    }
  },
  "Overlay": {
    "description": "Overlay is used to block user interaction with the rest of the app until they\nhave completed something.",
    "displayName": "Overlay",
    "methods": [
      {
        "name": "handleDocumentKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDivRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "divDOMNode",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBackgroundClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Generally you should only have a single child element so the centering\nworks correctly."
      },
      "isShown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls visibility.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isModal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines if it shows with a gray background. If `false`, the\nbackground will be rendered but will be invisible, except for the\ncontents, and it won't capture any of the user click events.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "portalId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set your own id for the `Portal` is that is opened up to contain the\ncontents. In practice you should never need to set this manually."
      },
      "onEscape": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fired when the user hits escape.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onBackgroundClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fired when the user clicks on the background, this may or may not be\nvisible depending on `isModal`.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "utility"
      ],
      "madeFrom": [
        "Portal"
      ]
    }
  },
  "OverlayWrapper.Message": {
    "description": "",
    "displayName": "Message",
    "methods": [],
    "propName": "Message",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      }
    }
  },
  "OverlayWrapper": {
    "description": "A wrapper with optional overlay to wrap content. `Overlay` is meant for overlaying an entire page, while this component is meant to wrap another component and cover its content.",
    "displayName": "OverlayWrapper",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "isVisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls whether the message should be displayed over the wrapped content."
      },
      "hasOverlay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set this to `false` if you don't want the semi-transparent overlay over\nthe wrapped content.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "overlayKind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'light'",
              "computed": false
            },
            {
              "value": "'dark'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Style variations for the overlay behind the message.",
        "defaultValue": {
          "value": "'light'",
          "computed": false
        }
      },
      "Message": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "*Child Element*\n\nThe Message to display in the overlay."
      }
    },
    "childComponents": [
      {
        "description": "",
        "displayName": "Message",
        "methods": [],
        "propName": "Message",
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Any valid React children."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "utility"
      ]
    }
  },
  "Paginator": {
    "description": "A paginator with page size selector.",
    "displayName": "Paginator",
    "methods": [
      {
        "name": "handleTextFieldChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "pageNum",
            "type": null
          },
          {
            "name": "{ props, event }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root elements."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to root element."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the Paginator from being clicked or focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasPageSizeSelector": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the page size selector. Defaults to false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selectedPageIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "0-indexed currently selected page number",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "selectedPageSizeIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "currently selected page size option index",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "SingleSelect": {
        "type": {
          "name": "shape",
          "value": "SingleSelect.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Object of SingleSelect props which are passed thru to the underlying\nSingleSelect component for the page size selector.",
        "defaultValue": {
          "value": "{\n    ...SingleSelect.getDefaultProps(),\n    selectedIndex: 0,\n}",
          "computed": false
        }
      },
      "totalPages": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "number to display in `of ${totalPages}`, calculated from `totalPages` and\nselected page size by default."
      },
      "totalCount": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "total number of items across all pages",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "pageSizeOptions": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "array of numbers representing page size options",
        "defaultValue": {
          "value": "[10, 50, 100]",
          "computed": false
        }
      },
      "TextField": {
        "type": {
          "name": "shape",
          "value": "TextField.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Object of TextField props which are passed thru to the underlying TextField component.",
        "defaultValue": {
          "value": "TextField.getDefaultProps()",
          "computed": true
        }
      },
      "onPageSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a page is selected.\nHas the signature `(pageIndex, totalPages, {props, event}) => {}` where pageIndex is a number.",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onPageSizeSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a page size is selected.\nHas the signature `(pageSizeIndex, {props, event}) => {}` where pageSizeIndex is a number."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "navigation"
      ],
      "madeFrom": [
        "ArrowIcon",
        "TextField",
        "Button",
        "SingleSelect"
      ]
    }
  },
  "Panel.Header": {
    "description": "Content displayed at the top of the panel.",
    "displayName": "Header",
    "methods": [],
    "propName": "Header"
  },
  "Panel.Footer": {
    "description": "Content displayed at the bottom of the panel.",
    "displayName": "Footer",
    "methods": [],
    "propName": "Footer"
  },
  "Panel": {
    "description": "Panel is used to wrap content to better organize elements in window.",
    "displayName": "Panel",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "Header": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "*Child Element* - Header contents. Only one `Header` is used."
      },
      "Footer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "*Child Element* - Footer contents. Only one `Footer` is used."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Generally you should only have a single child element so the centering\nworks correctly."
      },
      "isGutterless": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, creates a content section with no padding.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasMargin": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to false, removes margin around the Panel",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to root element."
      },
      "isScrollable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, makes content overflow scrollable, when Panel has a set height.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Content displayed at the top of the panel.",
        "displayName": "Header",
        "methods": [],
        "propName": "Header"
      },
      {
        "description": "Content displayed at the bottom of the panel.",
        "displayName": "Footer",
        "methods": [],
        "propName": "Footer"
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ]
    }
  },
  "PieChart": {
    "description": "Pie charts are used for categorical data when you want to show the relative\nsize of each category to the whole. We use similar \"x\" and \"y\" terms to keep\nparity with the other charts even though pie charts are really just key value\nbased.",
    "displayName": "PieChart",
    "methods": [
      {
        "name": "handleMouseOver",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseOut",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the root container."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Height of the chart.",
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the chart.",
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "shape",
          "value": {
            "top": {
              "name": "number",
              "required": false
            },
            "right": {
              "name": "number",
              "required": false
            },
            "bottom": {
              "name": "number",
              "required": false
            },
            "left": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "An object defining the margins of the chart. These margins typically\ncontain the axis and labels.",
        "defaultValue": {
          "value": "{\n    top: 10,\n    right: 10,\n    bottom: 10,\n    left: 10,\n}",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "Data for the chart. E.g.\n\n    [\n      { x: 'Monday'    , y: 1 } ,\n      { x: 'Tuesday'   , y: 2 } ,\n      { x: 'Wednesday' , y: 3 } ,\n      { x: 'Thursday'  , y: 2 } ,\n      { x: 'Friday'    , y: 5 } ,\n    ]"
      },
      "hasToolTips": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show tool tips on hover.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasStroke": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines if the pie slices have a stroke around them.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "palette": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Takes one of the palettes exported from `lucid.chartConstants`.\nAvailable palettes:\n\n- `PALETTE_6` (default)\n- `PALETTE_30`\n- `PALETTE_MONOCHROME_0_5`\n- `PALETTE_MONOCHROME_1_5`\n- `PALETTE_MONOCHROME_2_5`\n- `PALETTE_MONOCHROME_3_5`\n- `PALETTE_MONOCHROME_4_5`\n- `PALETTE_MONOCHROME_5_5`",
        "defaultValue": {
          "value": "chartConstants.PALETTE_6",
          "computed": true
        }
      },
      "colorMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "You can pass in an object if you want to map x values to\n`lucid.chartConstants` or custom colors:\n\n    {\n      'imps': COLOR_0,\n      'rev': COLOR_3,\n      'clicks': '#abc123',\n    }"
      },
      "ToolTip": {
        "type": {
          "name": "shape",
          "value": "ToolTip.propTypes",
          "computed": true
        },
        "required": false,
        "description": "An object of ToolTip props that are passed through to the underlying\nToolTip component.",
        "defaultValue": {
          "value": "ToolTip.getDefaultProps()",
          "computed": true
        }
      },
      "isDonut": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show the pie chart as a donut with a hollow center.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isHovering": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the tooltip and the size of the currently\nhovered slice.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hoveringIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Determines which slice to scale up and which data to display in he tooltip.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "onMouseOver": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user hovers over a slice.\n\nSignature: `(index, {props, event}) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onMouseOut": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user hovers away from either the pie or the tooltip.\n\nSignature: `({props, event}) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "donutWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of the donut in px.",
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      },
      "xAxisField": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The field we should look up your x data by. The data should be strings.",
        "defaultValue": {
          "value": "'x'",
          "computed": false
        }
      },
      "xAxisFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your x axis data.",
        "defaultValue": {
          "value": "_.identity",
          "computed": true
        }
      },
      "yAxisField": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The field we should look up your y data by. The data should be numeric.",
        "defaultValue": {
          "value": "'y'",
          "computed": false
        }
      },
      "yAxisFormatter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "An optional function used to format your y axis data.",
        "defaultValue": {
          "value": "_.identity",
          "computed": true
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "charts"
      ],
      "madeFrom": [
        "ToolTip"
      ]
    }
  },
  "Point": {
    "description": "*For use within an `svg`*\n\nPoints are typically used for scatter plots or overlaying shapes on lines.",
    "displayName": "Point",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "hasStroke": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines if the point has a white stroke around it.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "x": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "x coordinate",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "y": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "y coordinate",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "kind": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Zero-based set of shapes. It's recommended that you pass the index of\nyour array for shapes.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Strings should match an existing color class unless they start with a\n'#' for specific colors. E.g.:\n\n- `COLOR_0`\n- `COLOR_GOOD`\n- `'#123abc'`",
        "defaultValue": {
          "value": "chartConstants.COLOR_0",
          "computed": true
        }
      },
      "scale": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Scale up the size of the symbol. 2 would be double the original size.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "geoms"
      ]
    }
  },
  "Points": {
    "description": "*For use within an `svg`*\n\nPut some points on that data.",
    "displayName": "Points",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "palette": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "Takes one of the palettes exported from `lucid.chartConstants`.\nAvailable palettes:\n\n- `PALETTE_6` (default)\n- `PALETTE_30`\n- `PALETTE_MONOCHROME_0_5`\n- `PALETTE_MONOCHROME_1_5`\n- `PALETTE_MONOCHROME_2_5`\n- `PALETTE_MONOCHROME_3_5`\n- `PALETTE_MONOCHROME_4_5`\n- `PALETTE_MONOCHROME_5_5`",
        "defaultValue": {
          "value": "chartConstants.PALETTE_6",
          "computed": true
        }
      },
      "colorMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "You can pass in an object if you want to map fields to\n`lucid.chartConstants` or custom colors:\n\n    {\n      'imps': COLOR_0,\n      'rev': COLOR_3,\n      'clicks': '#abc123',\n    }"
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": true,
        "description": "De-normalized data, e.g.\n\n\n    [\n      { x: 'one'   , y: 1 },\n      { x: 'two'   , y: 2 },\n      { x: 'three' , y: 2 },\n      { x: 'four'  , y: 3 },\n      { x: 'five'  , y: 4 },\n    ]\n\n\nOr (be sure to set `yFields` to `['y0', 'y1', 'y2', 'y3']`)\n\n    [\n      { x: 'one'   , y0: 1  , y1: 2 , y2: 3 , y3: 5 },\n      { x: 'two'   , y0: 2  , y1: 3 , y2: 4 , y3: 6 },\n      { x: 'three' , y0: 2  , y1: 4 , y2: 5 , y3: 6 },\n      { x: 'four'  , y0: 3  , y1: 6 , y2: 7 , y3: 7 },\n      { x: 'five'  , y0: 4  , y1: 8 , y2: 9 , y3: 8 },\n      { x: 'six'   , y0: 20 , y1: 8 , y2: 9 , y3: 1 },\n    ]"
      },
      "xScale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "The scale for the x axis. Must be a d3 scale. Lucid exposes the\n`lucid.d3Scale` library for use here."
      },
      "yScale": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "The scale for the y axis. Must be a d3 scale. Lucid exposes the\n`lucid.d3Scale` library for use here."
      },
      "xField": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The field we should look up your x data by.",
        "defaultValue": {
          "value": "'x'",
          "computed": false
        }
      },
      "yFields": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "The field(s) we should look up your y data by. Each entry represents a\nseries. Your actual y data should be numeric.",
        "defaultValue": {
          "value": "['y']",
          "computed": false
        }
      },
      "yStackedMax": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Typically this number can be derived from the yScale. However when we're\n`isStacked` we need to calculate a new domain for the yScale based on\nthe sum of the data. If you need explicit control of the y max when\nstacking, pass it in here."
      },
      "colorOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sometimes you might not want the colors to start rotating at the blue\ncolor, this number will be added the line index in determining which\ncolor the lines are.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "hasStroke": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display a stroke around each of the points.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isStacked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "This will stack the data. In order to stack the data we have to\ncalculate a new domain for the y scale that is based on the `sum` of the\ndata.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "visualizations",
        "chart primitives"
      ],
      "madeFrom": [
        "Point"
      ]
    }
  },
  "Portal": {
    "description": "A Portal component is used to render content in a container that is appended\nto `document.body`.",
    "displayName": "Portal",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "any valid React children"
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "portalId": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "The `id` of the portal element that is appended to `document.body`."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "utility"
      ]
    }
  },
  "RadioButton": {
    "description": "This is a toggle -- a component that is in one of two particular states at\nany given moment in time -- that features a custom visualization of the\nnative radio button control to reflect its current state.\n\nThe radio button is different from a standard toggle in that when it is in\nthe selected state user events do not cause it to toggle to the unselected\nstate so the `onSelect` function is called only when `isSelected` is false.\n\nIt uses a hidden native radio button control under the hood but leverages\nother HTML elements to visualize its state.\n\nAny props that are not explicitly defined in `propTypes` are spread onto the\nnative control.",
    "displayName": "RadioButton",
    "methods": [
      {
        "name": "handleSpanClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClicked",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the component should appear and act disabled by\nhaving a \"greyed out\" palette and ignoring user interactions.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that the component is in the \"selected\" state when true\nand in the \"unselected\" state when false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks on the component or when they press the\nspace key while the component is in focus, and only called when the\ncomponent is in the unselected state.\n\nSignature: `(true, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "controls",
        "toggles"
      ]
    }
  },
  "RadioButtonLabeled.Label": {
    "description": "",
    "displayName": "Label",
    "methods": [],
    "propName": "Label",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to identify the purpose of this radio button to the user --\ncan be any renderable content."
      }
    }
  },
  "RadioButtonLabeled": {
    "description": "This is a composite of the `RadioButton` component and the native `label`\nelement.",
    "displayName": "RadioButtonLabeled",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "Label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Child element whose children are used to identify the purpose of this\nradio button to the user."
      },
      "isDisabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelected": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "composes": [
      "../RadioButton/RadioButton"
    ],
    "childComponents": [
      {
        "description": "",
        "displayName": "Label",
        "methods": [],
        "propName": "Label",
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Used to identify the purpose of this radio button to the user --\ncan be any renderable content."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "toggles"
      ],
      "extend": "RadioButton",
      "madeFrom": [
        "RadioButton"
      ]
    }
  },
  "RadioGroup.RadioButton": {
    "displayName": "RadioButton",
    "description": "",
    "componentRef": "RadioButton"
  },
  "RadioGroup.Label": {
    "description": "Support radio button labels as `RadioGroup.Label` component which can\nbe provided as a child of a `RadioGroup.RadioButton` component.",
    "displayName": "Label",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "RadioGroup": {
    "description": "This is a group of related radio buttons whose values are mutually exclusive\nand one whom must be selected any given moment in time.\n\nAny props that are not explicitly defined in `propTypes` are spread onto the\nroot element.",
    "displayName": "RadioGroup",
    "methods": [
      {
        "name": "handleSelected",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "isSelected",
            "type": null
          },
          {
            "name": "{ event, props: childProps }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be instances of `RadioGroup.RadioButton` which supports the\nsame props as `RadioButton`."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Passed along to the `RadioGroup.RadioButton` children whose `name`\nprops are ignored.",
        "defaultValue": {
          "value": "_.uniqueId(`${cx('&')}-`)",
          "computed": true
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks on one of the child radio buttons or when\nthey press the space key while one is in focus, and only called when\nthe component is in the unselected state. `props` refers to the child\n`RadioButton` props.\n\nSignature: `(selectedIndex, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "selectedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates which of the `RadioGroup.RadioButton` children is currently\nselected. The index of the last `RadioGroup.RadioButton` child with\n`isSelected` equal to true takes precedence over this prop.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether all `RadioGroup.RadioButton` children should appear and act disabled by\nhaving a \"greyed out\" palette and ignoring user interactions.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "displayName": "RadioButton",
        "description": "",
        "componentRef": "RadioButton"
      },
      {
        "description": "Support radio button labels as `RadioGroup.Label` component which can\nbe provided as a child of a `RadioGroup.RadioButton` component.",
        "displayName": "Label",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": ""
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "toggles"
      ],
      "madeFrom": [
        "RadioButton"
      ]
    }
  },
  "Resizer": {
    "description": "This is a helper component used for getting the width and height of a\ncontaining element. This component doesn't take normal children. It expects\nyou to pass a single function for children. It will then call that function\nwith new `width` and `height` values if the container size changes.",
    "displayName": "Resizer",
    "methods": [
      {
        "name": "handleResize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ offsetWidth, offsetHeight }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root elements."
      },
      "children": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "A function that returns your rendered content with the signature:\n\n`(width, height) => {}`"
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "utility"
      ]
    }
  },
  "ScrollTable.Thead": {
    "displayName": "Thead",
    "description": "",
    "componentRef": "Table.Thead"
  },
  "ScrollTable.Tbody": {
    "displayName": "Tbody",
    "description": "",
    "componentRef": "Table.Tbody"
  },
  "ScrollTable.Tr": {
    "displayName": "Tr",
    "description": "",
    "componentRef": "Table.Tr"
  },
  "ScrollTable.Th": {
    "displayName": "Th",
    "description": "",
    "componentRef": "Table.Th"
  },
  "ScrollTable.Td": {
    "displayName": "Td",
    "description": "",
    "componentRef": "Table.Td"
  },
  "ScrollTable": {
    "description": "Table in a scrollable container.",
    "displayName": "ScrollTable",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "{Thead, Tbody, Tr, Th, Td} are the child components of Scrolltable, same as Table."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the root container."
      },
      "tableWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set the width of the Table inside the scrollable container."
      },
      "hasWordWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the Table contents to not allow word wrapping.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasBorder": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "render the table with borders on the outer edge",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "displayName": "Thead",
        "description": "",
        "componentRef": "Table.Thead"
      },
      {
        "displayName": "Tbody",
        "description": "",
        "componentRef": "Table.Tbody"
      },
      {
        "displayName": "Tr",
        "description": "",
        "componentRef": "Table.Tr"
      },
      {
        "displayName": "Th",
        "description": "",
        "componentRef": "Table.Th"
      },
      {
        "displayName": "Td",
        "description": "",
        "componentRef": "Table.Td"
      }
    ],
    "customData": {
      "categories": [
        "table"
      ],
      "madeFrom": [
        "Table"
      ]
    }
  },
  "SearchableMultiSelect.Option": {
    "description": "A selectable option in the list.",
    "displayName": "Option",
    "methods": [],
    "propName": "Option",
    "composes": [
      "../DropMenu/DropMenu"
    ]
  },
  "SearchableMultiSelect.SearchField": {
    "description": "Passes props through to the `SearchField` component.",
    "displayName": "SearchField",
    "methods": [],
    "propName": "SearchField",
    "composes": [
      "../SearchField/SearchField"
    ]
  },
  "SearchableMultiSelect.OptionGroup": {
    "description": "Groups `Option`s together with a non-selectable heading.",
    "displayName": "OptionGroup",
    "methods": [],
    "propName": "OptionGroup",
    "composes": [
      "../DropMenu/DropMenu"
    ]
  },
  "SearchableMultiSelect.SelectionLabel": {
    "description": "Label for the selected section header.",
    "displayName": "SelectionLabel",
    "methods": [],
    "propName": "SelectionLabel"
  },
  "SearchableMultiSelect": {
    "description": "A control used to select multiple options from a dropdown list using a\nSearchField.",
    "displayName": "SearchableMultiSelect",
    "methods": [
      {
        "name": "handleDropMenuSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionIndex",
            "type": null
          },
          {
            "name": "{ event, props }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleCheckboxSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "_isSelected",
            "type": null
          },
          {
            "name": "{\n    // TODO: make sure the consumer can do callbackId somehow\n    event,\n    props: { callbackId: optionIndex },\n}",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectionRemove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ event, props, props: { callbackId: optionIndex } }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRemoveAll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSearch",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "searchText",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderUnderlinedChildren",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "childText",
            "type": null
          },
          {
            "name": "searchText",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ optionProps, optionIndex }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be instances of {`SearchableMultiSelect.Option`}. Other direct child elements will not render."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the control from being clicked or focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays a LoadingIcon to allow for asynchronous loading of options.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "maxMenuHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The max height of the fly-out menu."
      },
      "onSearch": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user enters a value to search for; the set of visible\nOptions will be filtered using the value.\n\nSignature: `(searchText, firstVisibleIndex, {props, event}) => {}`\n\n`searchText` is the value from the `SearchField` and `firstVisibleIndex`\nis the index of the first option that will be visible after filtering."
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when an option is selected.\n\nSignature: `(optionIndex, {props, event}) => {}`\n\n`optionIndex` is the new `selectedIndex` or `null`."
      },
      "onRemoveAll": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks to remove all selections.\n\nSignature: `({props, event}) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "optionFilter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The function that will be run against each Option's props to determine\nwhether it should be visible or not. The default behavior of the\nfunction is to match, ignoring case, against any text node descendant of\nthe `Option`.\n\nSignature: `(searchText, optionProps) => {}`\n\nIf `true` is returned, the option will be visible. If `false`, the\noption will not be visible.",
        "defaultValue": {
          "value": "propsSearch",
          "computed": true
        }
      },
      "searchText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The current search text to filter the list of options by.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "selectedIndices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "An array of currently selected `SearchableMultiSelect.Option` indices or\n`null` if nothing is selected.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "DropMenu": {
        "type": {
          "name": "shape",
          "value": "DropMenu.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Object of DropMenu props which are passed through to the underlying\nDropMenu component.",
        "defaultValue": {
          "value": "DropMenu.getDefaultProps()",
          "computed": true
        }
      },
      "Option": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - These are menu options. Each `Option` may be passed a\nprop called `isDisabled` to disable selection of that `Option`. Any\nother props pass to Option will be available from the `onSelect`\nhandler.\n\nIt also support the `Selection` prop that can be used to forward along\nprops to the underlying `Selection` component."
      },
      "responsiveMode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Adjusts the display of this component. This should typically be driven\nby screen size. Currently `small` and `large` are explicitly handled\nby this component.",
        "defaultValue": {
          "value": "'large'",
          "computed": false
        }
      },
      "hasRemoveAll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the \"remove all\" button that's shown with the\nselected items.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasSelections": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the visibility of the `Selection` component that appears below\nthe search field.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "A selectable option in the list.",
        "displayName": "Option",
        "methods": [],
        "propName": "Option",
        "composes": [
          "../DropMenu/DropMenu"
        ]
      },
      {
        "description": "Passes props through to the `SearchField` component.",
        "displayName": "SearchField",
        "methods": [],
        "propName": "SearchField",
        "composes": [
          "../SearchField/SearchField"
        ]
      },
      {
        "description": "Groups `Option`s together with a non-selectable heading.",
        "displayName": "OptionGroup",
        "methods": [],
        "propName": "OptionGroup",
        "composes": [
          "../DropMenu/DropMenu"
        ]
      },
      {
        "description": "Label for the selected section header.",
        "displayName": "SelectionLabel",
        "methods": [],
        "propName": "SelectionLabel"
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "selectors"
      ],
      "madeFrom": [
        "Checkbox",
        "SearchField",
        "DropMenu",
        "LoadingIcon",
        "Selection"
      ]
    }
  },
  "SearchableSelect.Placeholder": {
    "description": "Content this is displayed when nothing is selected.",
    "displayName": "Placeholder",
    "methods": [],
    "propName": "Placeholder"
  },
  "SearchableSelect.Option": {
    "description": "A selectable option in the list.",
    "displayName": "Option",
    "methods": [],
    "propName": "Option",
    "composes": [
      "../DropMenu/DropMenu"
    ]
  },
  "SearchableSelect.OptionGroup": {
    "description": "Groups `Option`s together with a non-selectable heading.",
    "displayName": "OptionGroup",
    "methods": [],
    "propName": "OptionGroup",
    "composes": [
      "../DropMenu/DropMenu"
    ]
  },
  "SearchableSelect": {
    "description": "A selector control (like native `<select>`) which is used to select a single option from a dropdown list using a SearchField.\nSupports option groups with and without labels.",
    "displayName": "SearchableSelect",
    "methods": [
      {
        "name": "handleSearch",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "searchText",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderUnderlinedChildren",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "childText",
            "type": null
          },
          {
            "name": "searchText",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOption",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionProps",
            "type": null
          },
          {
            "name": "optionIndex",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be instances of {`SearchableSelect.Placeholder`, `SearchableSelect.Option`, `SearchableSelect.OptionGroup`}. Other direct child elements will not render."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root elements. Applies to *both* the control and the flyout menu."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to root element."
      },
      "hasReset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows user to reset the `optionIndex` to `null` if they select the placeholder at the top of the options list.\nIf `false`, it will not render the placeholder in the menu.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the SearchableSelect from being clicked or focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isLoading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Displays a centered LoadingIcon to allow for asynchronous loading of options.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelectionHighlighted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies primary color styling to the control when an item is selected. Defaults to true.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "maxMenuHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The max height of the fly-out menu."
      },
      "onSearch": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user enters a value to search for; the set of visible Options will be filtered using the value.\nHas the signature `(searchText, firstVisibleIndex, {props, event}) => {}` where `searchText` is the value from the `SearchField` and `firstVisibleIndex` is the index of the first option that will be visible after filtering."
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when an option is selected.\nHas the signature `(optionIndex, {props, event}) => {}` where `optionIndex` is the new `selectedIndex` or `null`."
      },
      "optionFilter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "The function that will be run against each Option's props to determine\nwhether it should be visible or not. The default behavior of the\nfunction is to match, ignoring case, against any text node descendant of\nthe `Option`.\n\nHas the signature `(searchText, optionProps)`\nIf `true`, option will be visible. If `false`, the option will not be visible.",
        "defaultValue": {
          "value": "propsSearch",
          "computed": true
        }
      },
      "searchText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The current search text to filter the list of options by.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selectedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The currently selected `SearchableSelect.Option` index or `null` if nothing is selected.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "DropMenu": {
        "type": {
          "name": "shape",
          "value": "DropMenu.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Object of DropMenu props which are passed thru to the underlying DropMenu component.",
        "defaultValue": {
          "value": "DropMenu.getDefaultProps()",
          "computed": true
        }
      },
      "Placeholder": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - The content rendered in the control when there is no option is selected. Also rendered in the option list to remove current selection."
      },
      "Option": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - These are menu options. The `optionIndex` is in-order of rendering regardless of group nesting, starting with index `0`.\nEach `Option` may be passed a prop called `isDisabled` to disable selection of that `Option`.\nAny other props pass to Option will be available from the `onSelect` handler."
      },
      "OptionGroup": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - Used to group `Option`s within the menu. Any non-`Option`s passed in will be rendered as a label for the group."
      }
    },
    "childComponents": [
      {
        "description": "Content this is displayed when nothing is selected.",
        "displayName": "Placeholder",
        "methods": [],
        "propName": "Placeholder"
      },
      {
        "description": "A selectable option in the list.",
        "displayName": "Option",
        "methods": [],
        "propName": "Option",
        "composes": [
          "../DropMenu/DropMenu"
        ]
      },
      {
        "description": "Groups `Option`s together with a non-selectable heading.",
        "displayName": "OptionGroup",
        "methods": [],
        "propName": "OptionGroup",
        "composes": [
          "../DropMenu/DropMenu"
        ]
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "selectors"
      ],
      "madeFrom": [
        "DropMenu",
        "SearchField"
      ]
    }
  },
  "SearchField.TextField": {
    "displayName": "TextField",
    "description": "",
    "componentRef": "TextField"
  },
  "SearchField.Icon": {
    "description": "Icon this is displayed on the right side of the SearchField. Any of the\nlucid `*Icon` components should work.",
    "displayName": "Icon",
    "methods": [],
    "propName": "Icon"
  },
  "SearchField": {
    "description": "This is a wrapper around TextField that styles it for a search use-case. The\nicon and TextField are customizable through child components.",
    "displayName": "SearchField",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an event every time the user types text into the TextField.\n\nSignature: `(value, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onChangeDebounced": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an event, debounced by `debounceLevel`, when the user types text\ninto the TextField.\n\nSignature: `(value, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "debounceLevel": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of milliseconds to debounce the `onChangeDebounced` callback.\nOnly useful if you provide an `onChangeDebounced` handler.",
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "onSubmit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an event when the user hits \"enter\" from the SearchField.\n\nSignature: `(value, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set the value of the input.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "isValid": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Controls the highlighting of the search icon. Should be passed `true` when\nthe search text is valid, e.g. contains enough characters to perform a search."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the SearchField by greying it out.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "placeholder value"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "Icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Icon this is displayed on the right side of the SearchField. Any of the\nlucid `*Icon` components should work."
      }
    },
    "childComponents": [
      {
        "displayName": "TextField",
        "description": "",
        "componentRef": "TextField"
      },
      {
        "description": "Icon this is displayed on the right side of the SearchField. Any of the\nlucid `*Icon` components should work.",
        "displayName": "Icon",
        "methods": [],
        "propName": "Icon"
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "text"
      ],
      "madeFrom": [
        "TextField",
        "SearchIcon"
      ]
    }
  },
  "Selection.Label": {
    "description": "",
    "displayName": "Label",
    "methods": [],
    "propName": "Label"
  },
  "Selection.Icon": {
    "description": "",
    "displayName": "Icon",
    "methods": [],
    "propName": "Icon"
  },
  "Selection": {
    "description": "Used to indicate selections. It's very similar to `Tag` but is meant to be\nused in areas of the UI that have more space available to them.",
    "displayName": "Selection",
    "methods": [
      {
        "name": "handleRemove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'default'",
              "computed": false
            },
            {
              "value": "'container'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            },
            {
              "value": "'info'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Applies an icon and styles for the kind of selection.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "isRemovable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Shows or hides the little \"x\" for a given item.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasBackground": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Gives the selection a background. This is desirable when you only have\none level of nested selections.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isBold": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Make the content text bold. This is desirable when you only have\none level of nested selections.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onRemove": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the close button is clicked.\n\nSignature: `({ props, event }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "Label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label of the component."
      },
      "Icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Display a custom icon for the selection. Generally you shouldn't need\nthis prop since the `kind` prop will pick the correct icon for you."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Arbitrary children."
      },
      "responsiveMode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'medium'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Adjusts the display of this component. This should typically be driven\nby screen size. Currently `small` and `large` are explicitly handled\nby this component.",
        "defaultValue": {
          "value": "'large'",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "",
        "displayName": "Label",
        "methods": [],
        "propName": "Label"
      },
      {
        "description": "",
        "displayName": "Icon",
        "methods": [],
        "propName": "Icon"
      }
    ],
    "customData": {
      "categories": [
        "communication"
      ]
    }
  },
  "Sidebar.Bar": {
    "description": "Content to be placed alongside the Primary pane.",
    "displayName": "Bar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Sidebar content. Also can define <Sidebar.Title> here as well."
      },
      "title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set the title of the Sidebar. (alias for `Title` and `Sidebar.Title`)"
      },
      "Title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set the title of the Sidebar. (alias for `title` and `Sidebar.Title`)"
      },
      "hasGutters": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Adds default padding to the sidebar content.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "Sidebar.Primary": {
    "description": "Main pane content that will have a paired `Bar`.",
    "displayName": "Primary",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content rendered beside the Sidebar."
      }
    }
  },
  "Sidebar.Title": {
    "description": "Content that will be displayed as the title of the Bar. It's only shown\nwhen the user has the Bar expanded.",
    "displayName": "Title",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Sidebar title."
      }
    }
  },
  "Sidebar": {
    "description": "`Sidebar` renders a collapsible, resizeable side bar panel next to primary content.",
    "displayName": "Sidebar",
    "methods": [
      {
        "name": "handleExpanderClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleResizing",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "width",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleResize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "width",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Style object that gets applied to the outer element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Direct children must be types {Sidebar.Primary, Sidebar.Bar, Sidebar.Title}.\nAll content is composed as children of these respective elements."
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Sets the starting width of the Bar.",
        "defaultValue": {
          "value": "250",
          "computed": false
        }
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Force the Sidebar to be expanded or collapsed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isAnimated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows animated expand and collapse behavior.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Render the Sidebar to the left or right of primary content.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "isResizeDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable user resizing of the Sidebar.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set the title of the Sidebar. (alias for `Title` and `Sidebar.Title`)"
      },
      "Title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set the title of the Sidebar. (alias for `title` and `Sidebar.Title`)"
      },
      "onResizing": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user is currently resizing the Sidebar.\n\nSignature: `(width, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onResize": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user resizes the Sidebar.\n\nSignature: `(width, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user expands or collapses the Sidebar.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [
      {
        "description": "Content to be placed alongside the Primary pane.",
        "displayName": "Bar",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Sidebar content. Also can define <Sidebar.Title> here as well."
          },
          "title": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Set the title of the Sidebar. (alias for `Title` and `Sidebar.Title`)"
          },
          "Title": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Set the title of the Sidebar. (alias for `title` and `Sidebar.Title`)"
          },
          "hasGutters": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Adds default padding to the sidebar content.",
            "defaultValue": {
              "value": "true",
              "computed": false
            }
          }
        }
      },
      {
        "description": "Main pane content that will have a paired `Bar`.",
        "displayName": "Primary",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Primary content rendered beside the Sidebar."
          }
        }
      },
      {
        "description": "Content that will be displayed as the title of the Bar. It's only shown\nwhen the user has the Bar expanded.",
        "displayName": "Title",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Sidebar title."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ]
    }
  },
  "SingleSelect.Placeholder": {
    "description": "Content this is displayed when nothing is selected.",
    "displayName": "Placeholder",
    "methods": [],
    "propName": "Placeholder"
  },
  "SingleSelect.Option": {
    "description": "A selectable option in the list.",
    "displayName": "Option",
    "methods": [],
    "propName": "Option",
    "composes": [
      "../DropMenu/DropMenu"
    ]
  },
  "SingleSelect.OptionGroup": {
    "description": "Groups `Option`s together with a non-selectable heading.",
    "displayName": "OptionGroup",
    "methods": [],
    "propName": "OptionGroup",
    "composes": [
      "../DropMenu/DropMenu"
    ]
  },
  "SingleSelect": {
    "description": "A selector control (like native `<select>`) which is used to select a single option from a dropdown list.\nSupports option groups with and without labels.",
    "displayName": "SingleSelect",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Should be instances of {`SingleSelect.Placeholder`, `SingleSelect.Option`, `SingleSelect.OptionGroup`}. Other direct child elements will not render."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root elements. Applies to *both* the control and the flyout menu."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to root element."
      },
      "isSelectionHighlighted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies primary color styling to the control when an item is selected. Defaults to true.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hasReset": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows user to reset the `optionIndex` to `null` if they select the placeholder at the top of the options list.\nIf `false`, it will not render the placeholder in the menu.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the SingleSelect from being clicked or focused.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selectedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The currently selected `SingleSelect.Option` index or `null` if nothing is selected.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "maxMenuHeight": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "The max height of the fly-out menu."
      },
      "DropMenu": {
        "type": {
          "name": "shape",
          "value": "DropMenu.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Object of DropMenu props which are passed thru to the underlying DropMenu component.",
        "defaultValue": {
          "value": "DropMenu.getDefaultProps()",
          "computed": true
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when an option is selected.\nHas the signature `(optionIndex, {props, event}) => {}` where `optionIndex` is the new `selectedIndex` or `null` and `props` are the `props` for the selected `Option`."
      },
      "Placeholder": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - The content rendered in the control when there is no option is selected. Also rendered in the option list to remove current selection."
      },
      "Option": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - These are menu options. The `optionIndex` is in-order of rendering regardless of group nesting, starting with index `0`.\nEach `Option` may be passed a prop called `isDisabled` to disable selection of that `Option`.\nAny other props pass to Option will be available from the `onSelect` handler."
      },
      "OptionGroup": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element* - Used to group `Option`s within the menu. Any non-`Option`s passed in will be rendered as a label for the group."
      }
    },
    "childComponents": [
      {
        "description": "Content this is displayed when nothing is selected.",
        "displayName": "Placeholder",
        "methods": [],
        "propName": "Placeholder"
      },
      {
        "description": "A selectable option in the list.",
        "displayName": "Option",
        "methods": [],
        "propName": "Option",
        "composes": [
          "../DropMenu/DropMenu"
        ]
      },
      {
        "description": "Groups `Option`s together with a non-selectable heading.",
        "displayName": "OptionGroup",
        "methods": [],
        "propName": "OptionGroup",
        "composes": [
          "../DropMenu/DropMenu"
        ]
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "selectors"
      ],
      "madeFrom": [
        "DropMenu"
      ]
    }
  },
  "SlidePanel.Slide": {
    "description": "",
    "displayName": "Slide",
    "methods": [],
    "propName": "Slide"
  },
  "SlidePanel": {
    "description": "A container for rendering a set of horizontal slides at at a particular\noffset. Translation between slides is controlled by passing in a new `offset`.\nCan hook into touch events to update the `offset`.",
    "displayName": "SlidePanel",
    "methods": [
      {
        "name": "handleTouchStart",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTouchMove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleTouchEnd",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "SlidePanel.Slide elements are passed in as children."
      },
      "slidesToShow": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Max number of viewable slides to show simultaneously.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The offset of the left-most rendered slide.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "isAnimated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Animate slides transitions from changes in `offset`.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isLooped": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Slides are rendered in a continuous loop, where the first slide repeats\nafter the last slide and vice-versa. DOM elements are re-ordered and\nre-used.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSwipe": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a user's swipe would change the offset. Callback passes\nnumber of slides by the user (positive for forward swipes, negative for\nbackwards swipes).\n\nSignature: `(slidesSwiped, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [
      {
        "description": "",
        "displayName": "Slide",
        "methods": [],
        "propName": "Slide"
      }
    ],
    "customData": {
      "categories": [
        "helpers"
      ]
    }
  },
  "SplitButton.Button": {
    "description": "One of many potential `Button`s to render in this `SplitButton`. The\nfirst `Button` will be used as the Primary button, while all others will\nbe rendered within the `DropMenu` below.",
    "displayName": "Button",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "The children to render within the `Button`."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables selection of the `Button`."
      },
      "onClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks the `Button`.\n\nSignature: `({ event, props }) => {}`"
      }
    }
  },
  "SplitButton": {
    "description": "SplitButtons allow you to combine a single main `Button` together with a\nlist of additional Buttons with actions which will be rendered within a\nDropMenu.",
    "displayName": "SplitButton",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "optionIndex",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleButtonClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "buttonProps",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "DropMenu": {
        "type": {
          "name": "shape",
          "value": "DropMenu.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Object of DropMenu props which are passed through to the underlying\nDropMenu component.",
        "defaultValue": {
          "value": "DropMenu.getDefaultProps()",
          "computed": true
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "All children should be `ButtonGroup.Button`s and they support the same\nprops as `Button`s."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'down'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sets the direction the flyout menu will render relative to the\nSplitButton.",
        "defaultValue": {
          "value": "'down'",
          "computed": false
        }
      },
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            },
            {
              "value": "'info'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Style variations of the SplitButton."
      },
      "size": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'short'",
              "computed": false
            },
            {
              "value": "'small'",
              "computed": false
            },
            {
              "value": "'large'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Size variations of the SplitButton."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Form element type variations of SplitButton. Defaults to 'button' to avoid\nbeing triggered by 'Enter' anywhere on the page. Passed through to DOM\nButton.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "One of many potential `Button`s to render in this `SplitButton`. The\nfirst `Button` will be used as the Primary button, while all others will\nbe rendered within the `DropMenu` below.",
        "displayName": "Button",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "The children to render within the `Button`."
          },
          "isDisabled": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Disables selection of the `Button`."
          },
          "onClick": {
            "type": {
              "name": "func"
            },
            "required": false,
            "description": "Called when the user clicks the `Button`.\n\nSignature: `({ event, props }) => {}`"
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "buttons"
      ],
      "madeFrom": [
        "Button",
        "DropMenu"
      ]
    }
  },
  "SplitHorizontal.TopPane": {
    "description": "Top pane of the split.",
    "displayName": "TopPane",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set height of this pane."
      },
      "isPrimary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full height.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "SplitHorizontal.BottomPane": {
    "description": "Bottom pane of the split.",
    "displayName": "BottomPane",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set height of this pane."
      },
      "isPrimary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full height.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "SplitHorizontal.Divider": {
    "description": "The area that separates the split panes. Can be dragged to resize them.",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      }
    }
  },
  "SplitHorizontal": {
    "description": "`SplitHorizontal` renders a vertical split.",
    "displayName": "SplitHorizontal",
    "methods": [
      {
        "name": "getPanes",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "applyDeltaToSecondaryHeight",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dY",
            "type": null
          },
          {
            "name": "isExpanded",
            "type": null
          },
          {
            "name": "secondaryStartRect",
            "type": null
          },
          {
            "name": "secondaryRef",
            "type": null
          },
          {
            "name": "secondary",
            "type": null
          },
          {
            "name": "bottom",
            "type": null
          },
          {
            "name": "innerRef",
            "type": null
          },
          {
            "name": "primaryRef",
            "type": null
          },
          {
            "name": "collapseShift",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "expandSecondary",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "collapseSecondary",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "collapseAmount",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "disableAnimation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "innerRef",
            "type": null
          },
          {
            "name": "secondaryRef",
            "type": null
          },
          {
            "name": "primaryRef",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "resetAnimation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "innerRef",
            "type": null
          },
          {
            "name": "secondaryRef",
            "type": null
          },
          {
            "name": "primaryRef",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragStart",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDrag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ dY }",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragEnd",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ dY }",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "storeRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Direct children must be types {Splitvertical.Toppane, Splitvertical.Divider, Splitvertical.BottomPane}.\nAll content is composed as children of these respective elements."
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render as expanded or collapsed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isAnimated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows animated expand and collapse behavior.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onResizing": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user is currently resizing the split with the Divider.\n\nSignature: `(height, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onResize": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user resizes the split with the Divider.\n\nSignature: `(height, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "collapseShift": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Use this prop to shift the collapsed position by a known value.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Top pane of the split.",
        "displayName": "TopPane",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Any valid React children."
          },
          "height": {
            "type": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            "required": false,
            "description": "Set height of this pane."
          },
          "isPrimary": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full height.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          }
        }
      },
      {
        "description": "Bottom pane of the split.",
        "displayName": "BottomPane",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Any valid React children."
          },
          "height": {
            "type": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            "required": false,
            "description": "Set height of this pane."
          },
          "isPrimary": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full height.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          }
        }
      },
      {
        "description": "The area that separates the split panes. Can be dragged to resize them.",
        "displayName": "Divider",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Any valid React children."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "helpers"
      ],
      "madeFrom": [
        "DragCaptureZone"
      ]
    }
  },
  "SplitVertical.LeftPane": {
    "description": "Left pane of the split.",
    "displayName": "LeftPane",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set width of this pane."
      },
      "isPrimary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full width.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "SplitVertical.RightPane": {
    "description": "Right pane of the split.",
    "displayName": "RightPane",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      },
      "width": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set width of this pane."
      },
      "isPrimary": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full width.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "SplitVertical.Divider": {
    "description": "The area that separates the split panes. Can be dragged to resize them.",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Any valid React children."
      }
    }
  },
  "SplitVertical": {
    "description": "`SplitVertical` renders a vertical split.",
    "displayName": "SplitVertical",
    "methods": [
      {
        "name": "getPanes",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "applyDeltaToSecondaryWidth",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "dX",
            "type": null
          },
          {
            "name": "isExpanded",
            "type": null
          },
          {
            "name": "secondaryStartRect",
            "type": null
          },
          {
            "name": "secondaryRef",
            "type": null
          },
          {
            "name": "secondary",
            "type": null
          },
          {
            "name": "right",
            "type": null
          },
          {
            "name": "innerRef",
            "type": null
          },
          {
            "name": "primaryRef",
            "type": null
          },
          {
            "name": "collapseShift",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "expandSecondary",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "collapseSecondary",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "collapseAmount",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "disableAnimation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "innerRef",
            "type": null
          },
          {
            "name": "secondaryRef",
            "type": null
          },
          {
            "name": "primaryRef",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "resetAnimation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "innerRef",
            "type": null
          },
          {
            "name": "secondaryRef",
            "type": null
          },
          {
            "name": "primaryRef",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragStart",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDrag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ dX }",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragEnd",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ dX }",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "storeRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": true,
    "props": {
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Direct children must be types {Splitvertical.Leftpane, Splitvertical.Divider, Splitvertical.RightPane}.\nAll content is composed as children of these respective elements."
      },
      "isResizeable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows draggable resizing of the SplitVertical",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render as expanded or collapsed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isAnimated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows animated expand and collapse behavior.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onResizing": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user is currently resizing the split with the Divider.\n\nSignature: `(width, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onResize": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user resizes the split with the Divider.\n\nSignature: `(width, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "collapseShift": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Use this prop to shift the collapsed position by a known value.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "Left pane of the split.",
        "displayName": "LeftPane",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Any valid React children."
          },
          "width": {
            "type": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            "required": false,
            "description": "Set width of this pane."
          },
          "isPrimary": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full width.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          }
        }
      },
      {
        "description": "Right pane of the split.",
        "displayName": "RightPane",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Any valid React children."
          },
          "width": {
            "type": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ]
            },
            "required": false,
            "description": "Set width of this pane."
          },
          "isPrimary": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define this pane as the primary content pane. When the split is collapsed, this pane becomes full width.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          }
        }
      },
      {
        "description": "The area that separates the split panes. Can be dragged to resize them.",
        "displayName": "Divider",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Any valid React children."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "helpers"
      ]
    }
  },
  "StickySection": {
    "description": "`StickySection` can be wrapped around any content to make it _stick_ to the\ntop edge of the screen when a user scrolls beyond its initial location.",
    "displayName": "StickySection",
    "methods": [
      {
        "name": "handleScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getContainerRect",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "any valid React children"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the root container."
      },
      "lowerBound": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Pixel value from the top of the document. When scrolled passed, the\nsticky header is no longer sticky, and renders normally."
      },
      "viewportWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of section when it sticks to the top edge of the screen. When\nomitted, it defaults to the last width of the section."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "helpers"
      ]
    }
  },
  "Submarine.Bar": {
    "description": "",
    "displayName": "Bar",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Submarine content. Also can define <Submarine.Title> here as well."
      },
      "Title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set the title of the Submarine. (alias for `Submarine.Title`)"
      }
    }
  },
  "Submarine.Primary": {
    "description": "",
    "displayName": "Primary",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Primary content rendered beside the Submarine."
      }
    }
  },
  "Submarine.Title": {
    "description": "",
    "displayName": "Title",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Submarine title."
      }
    }
  },
  "Submarine": {
    "description": "`Submarine` renders a collapsible, resizeable side bar panel next to primary content.",
    "displayName": "Submarine",
    "methods": [
      {
        "name": "handleExpanderClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleResizing",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "height",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleResize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "height",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Direct children must be types {Submarine.Primary, Submarine.Bar, Submarine.Title}.\nAll content is composed as children of these respective elements."
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Sets the starting height of the Bar.",
        "defaultValue": {
          "value": "250",
          "computed": false
        }
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Force the Submarine to be expanded or collapsed.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isHidden": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates if the Submarine should be shown or not.\nThis will override the value of isExpanded.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isTitleShownCollapsed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates if the Title should be shown when the Submarine is collapsed",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isAnimated": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows animated expand and collapse behavior.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'top'",
              "computed": false
            },
            {
              "value": "'bottom'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Render the Submarine to the top or bottom of primary content.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "isResizeDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable user resizing of the Submarine.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "Title": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Set the title of the Submarine."
      },
      "onResizing": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user is currently resizing the Submarine.\n\nSignature: `(height, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onResize": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user resizes the Submarine.\n\nSignature: `(height, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user expands or collapses the Submarine.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [
      {
        "description": "",
        "displayName": "Bar",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Submarine content. Also can define <Submarine.Title> here as well."
          },
          "Title": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Set the title of the Submarine. (alias for `Submarine.Title`)"
          }
        }
      },
      {
        "description": "",
        "displayName": "Primary",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Primary content rendered beside the Submarine."
          }
        }
      },
      {
        "description": "",
        "displayName": "Title",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Submarine title."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "layout"
      ],
      "madeFrom": [
        "SplitHorizontal",
        "ChevronIcon",
        "GripperHorizontalIcon"
      ]
    }
  },
  "Switch": {
    "description": "This is a toggle -- a component that is in one of two particular states at\nany given moment in time -- that uses a visualization of a physical on/off\nswitch made popular by smartphone OSes to reflect its current state.\n\nIt uses a hidden native check box control under the hood but leverages other\nHTML elements to visualize its state.",
    "displayName": "Switch",
    "methods": [
      {
        "name": "handleClicked",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the component should appear and act disabled by\nhaving a \"greyed out\" palette and ignoring user interactions.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that the component is in the \"selected\" state when true\nand in the \"unselected\" state when false.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks on the component or when they press the\nspace key while the component is in focus.\n\nSignature: `(isSelected, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "controls",
        "toggles"
      ]
    }
  },
  "SwitchLabeled.Label": {
    "description": "Label to be shown alongside the switch.",
    "displayName": "Label",
    "methods": [],
    "propName": "Label",
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Used to identify the purpose of this switch to the user -- can be\nany renderable content."
      }
    }
  },
  "SwitchLabeled": {
    "description": "This is a composite of the `Switch` component and the native `label`\nelement.",
    "displayName": "SwitchLabeled",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "Label": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Child element whose children are used to identify the purpose of this\nswitch to the user."
      },
      "isDisabled": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelected": {
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelect": {
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "composes": [
      "../Switch/Switch"
    ],
    "childComponents": [
      {
        "description": "Label to be shown alongside the switch.",
        "displayName": "Label",
        "methods": [],
        "propName": "Label",
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "Used to identify the purpose of this switch to the user -- can be\nany renderable content."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "toggles"
      ],
      "extend": "Switch",
      "madeFrom": [
        "Switch"
      ]
    }
  },
  "Table.Thead": {
    "description": "`Thead` renders <thead>.",
    "displayName": "Thead",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "any valid React children"
      }
    }
  },
  "Table.Tbody": {
    "description": "`Tbody` renders <tbody>.",
    "displayName": "Tbody",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "any valid React children"
      }
    }
  },
  "Table.Tr": {
    "description": "`Tr` renders <tr>.",
    "displayName": "Tr",
    "methods": [],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "any valid React children"
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies disabled styles to the row.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies styles to the row for when the row is selected, usually by a checkbox.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isActive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies active styles to the row, usually when the row has been clicked.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isActionable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Applies styles to the row, used to show if a row is clickable / can be made active.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "Table.Th": {
    "description": "`Th` renders <th>.",
    "displayName": "Th",
    "methods": [
      {
        "name": "getWidth",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClickCapture",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDragEnded",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "coordinates",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragStarted",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "coordinates",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragged",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "coordinates",
            "type": null
          },
          {
            "name": "{ event }",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Aligns the content of a cell. Can be `left`, `center`, or `right`.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "any valid React children"
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "hasBorderRight": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should be `true` to render a right border."
      },
      "hasBorderLeft": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should be `true` to render a left border."
      },
      "isResizable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Styles the cell to indicate it should be resizable and sets up drag-\nrelated events to enable this resizing functionality.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isSortable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Styles the cell to allow column sorting."
      },
      "isSorted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Renders a caret icon to show that the column is sorted.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onResize": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called as the user drags the resize handle to resize the column atop\nwhich this table header cell sits."
      },
      "sortDirection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Sets the direction of the caret icon when `isSorted` is also set.",
        "defaultValue": {
          "value": "'up'",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to root element."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Sets the width of the cell."
      },
      "isFirstRow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the first row."
      },
      "isLastRow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the last row."
      },
      "isFirstCol": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the first column."
      },
      "isLastCol": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the last column."
      },
      "isFirstSingle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being the first 1-height cell in the row."
      }
    }
  },
  "Table.Td": {
    "description": "`Td` renders <td>.",
    "displayName": "Td",
    "methods": [],
    "props": {
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Aligns the content of a cell. Can be `left`, `center`, or `right`.",
        "defaultValue": {
          "value": "'left'",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
      },
      "hasBorderRight": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should be `true` to render a right border.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasBorderLeft": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should be `true` to render a left border.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isFirstRow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the first row."
      },
      "isLastRow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the last row."
      },
      "isFirstCol": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the first column."
      },
      "isLastCol": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being in the last column."
      },
      "isFirstSingle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Define the cell as being the first 1-height cell in the row."
      }
    }
  },
  "Table": {
    "description": "`Table` provides the most basic components to create a lucid table.\nIt is recommended to create a wrapper around this component rather than using it directly in an app.",
    "displayName": "Table",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to the root container."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "density": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'compressed'",
              "computed": false
            },
            {
              "value": "'extended'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Adjusts the row density of the table to have more or less spacing.",
        "defaultValue": {
          "value": "'extended'",
          "computed": false
        }
      },
      "hasLightHeader": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows light header.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasBorder": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Render the table with borders on the outer edge.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasWordWrap": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables word wrapping in tables cells.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "`Thead` renders <thead>.",
        "displayName": "Thead",
        "methods": [],
        "props": {
          "className": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
          },
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "any valid React children"
          }
        }
      },
      {
        "description": "`Tbody` renders <tbody>.",
        "displayName": "Tbody",
        "methods": [],
        "props": {
          "className": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
          },
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "any valid React children"
          }
        }
      },
      {
        "description": "`Tr` renders <tr>.",
        "displayName": "Tr",
        "methods": [],
        "props": {
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "any valid React children"
          },
          "className": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
          },
          "isDisabled": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Applies disabled styles to the row.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "isSelected": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Applies styles to the row for when the row is selected, usually by a checkbox.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "isActive": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Applies active styles to the row, usually when the row has been clicked.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "isActionable": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Applies styles to the row, used to show if a row is clickable / can be made active.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          }
        }
      },
      {
        "description": "`Th` renders <th>.",
        "displayName": "Th",
        "methods": [
          {
            "name": "getWidth",
            "docblock": null,
            "modifiers": [],
            "params": [],
            "returns": null
          },
          {
            "name": "handleClickCapture",
            "docblock": null,
            "modifiers": [],
            "params": [
              {
                "name": "event",
                "type": null
              }
            ],
            "returns": null
          },
          {
            "name": "handleMouseEnter",
            "docblock": null,
            "modifiers": [],
            "params": [],
            "returns": null
          },
          {
            "name": "handleMouseUp",
            "docblock": null,
            "modifiers": [],
            "params": [],
            "returns": null
          },
          {
            "name": "handleDragEnded",
            "docblock": null,
            "modifiers": [],
            "params": [
              {
                "name": "coordinates",
                "type": null
              },
              {
                "name": "{ event }",
                "type": null
              }
            ],
            "returns": null
          },
          {
            "name": "handleDragStarted",
            "docblock": null,
            "modifiers": [],
            "params": [
              {
                "name": "coordinates",
                "type": null
              },
              {
                "name": "{ event }",
                "type": null
              }
            ],
            "returns": null
          },
          {
            "name": "handleDragged",
            "docblock": null,
            "modifiers": [],
            "params": [
              {
                "name": "coordinates",
                "type": null
              },
              {
                "name": "{ event }",
                "type": null
              }
            ],
            "returns": null
          }
        ],
        "props": {
          "align": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": "Aligns the content of a cell. Can be `left`, `center`, or `right`.",
            "defaultValue": {
              "value": "'left'",
              "computed": false
            }
          },
          "children": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "any valid React children"
          },
          "className": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
          },
          "hasBorderRight": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Should be `true` to render a right border."
          },
          "hasBorderLeft": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Should be `true` to render a left border."
          },
          "isResizable": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Styles the cell to indicate it should be resizable and sets up drag-\nrelated events to enable this resizing functionality.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "isSortable": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Styles the cell to allow column sorting."
          },
          "isSorted": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Renders a caret icon to show that the column is sorted.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "onResize": {
            "type": {
              "name": "func"
            },
            "required": false,
            "description": "Called as the user drags the resize handle to resize the column atop\nwhich this table header cell sits."
          },
          "sortDirection": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": "Sets the direction of the caret icon when `isSorted` is also set.",
            "defaultValue": {
              "value": "'up'",
              "computed": false
            }
          },
          "style": {
            "type": {
              "name": "object"
            },
            "required": false,
            "description": "Styles that are passed through to root element."
          },
          "width": {
            "type": {
              "name": "number"
            },
            "required": false,
            "description": "Sets the width of the cell."
          },
          "isFirstRow": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the first row."
          },
          "isLastRow": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the last row."
          },
          "isFirstCol": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the first column."
          },
          "isLastCol": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the last column."
          },
          "isFirstSingle": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being the first 1-height cell in the row."
          }
        }
      },
      {
        "description": "`Td` renders <td>.",
        "displayName": "Td",
        "methods": [],
        "props": {
          "align": {
            "type": {
              "name": "string"
            },
            "required": false,
            "description": "Aligns the content of a cell. Can be `left`, `center`, or `right`.",
            "defaultValue": {
              "value": "'left'",
              "computed": false
            }
          },
          "className": {
            "type": {
              "name": "any"
            },
            "required": false,
            "description": "Appended to the component-specific class names set on the root\nelement. Value is run through the `classnames` library."
          },
          "hasBorderRight": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Should be `true` to render a right border.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "hasBorderLeft": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Should be `true` to render a left border.",
            "defaultValue": {
              "value": "false",
              "computed": false
            }
          },
          "isFirstRow": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the first row."
          },
          "isLastRow": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the last row."
          },
          "isFirstCol": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the first column."
          },
          "isLastCol": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being in the last column."
          },
          "isFirstSingle": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Define the cell as being the first 1-height cell in the row."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "table"
      ],
      "madeFrom": [
        "CaretIcon",
        "DragCaptureZone"
      ]
    }
  },
  "Tabs.Tab": {
    "description": "Content that will be rendered in a tab. Be sure to nest a Title inside\neach Tab or provide it as a prop. Props other than `isDisabled`, `isSelected`,\nand `Title` can be inferred from the parent `Tabs` component, but directly\nprovided `props` will take precedence.",
    "displayName": "Tab",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "propName": "Tab",
    "props": {
      "index": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The index of this `Tab` within the list of `Tabs`."
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Styles a `Tab` as disabled. This is typically used with\n`isProgressive` to disable steps that have not been completed\nand should not be selected until the current step has been\ncompleted."
      },
      "isLastTab": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, this `Tab` is the last `Tab` in the list of `Tabs`."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` then the active `Tab` will appear open on the bottom."
      },
      "isProgressive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `Tab` will appear as a `Progressive` tab."
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true`, the `Tab` will appear selected."
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback for when the user clicks a `Tab`. Called with the index of the\n`Tab` that was clicked."
      },
      "Title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content to be rendered as the `Title` of the `Tab`."
      },
      "isNavigation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` component will be styled to be more visually prominent for use with page-level navigation."
      }
    }
  },
  "Tabs.Title": {
    "description": "Titles can be provided as a child or prop to a Tab.",
    "displayName": "Title",
    "methods": [],
    "propName": "Title"
  },
  "Tabs": {
    "description": "`Tabs` provides tabbed navigation. It has a flexible interface that allows\ntab content to be passed as regular React children or through props.",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "handleClicked",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          },
          {
            "name": "tabProps",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "selectedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates which of the `Tabs.Tab` children is currently selected. The\nindex of the last `Tabs.Tab` child with `isSelected` equal to `true`\ntakes precedence over this prop.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback for when the user clicks a tab. Called with the index of the\ntab that was clicked.",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` then the active tab will appear open on the bottom.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isProgressive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Style the tabs as a progression. This is typically used for a work flow\nwhere the user needs to move forward and backward through a series of\nsteps.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasMultilineTitle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the multiline className. This is typically used for styling the Tab.Title bar\nfor improved readability when there are multiple React elements in the tab headers.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "hasFullWidthTabs": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` the width will be evenly distributed to all tabs.  `False` typically used in conjunction with `Tab.width`",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "isNavigation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` component will be styled to be more visually prominent for use with page-level navigation.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "Tab": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "*Child Element*\n\nCan be used to define one or more individual `Tab`s in the sequence of `Tabs`."
      }
    },
    "childComponents": [
      {
        "description": "Content that will be rendered in a tab. Be sure to nest a Title inside\neach Tab or provide it as a prop. Props other than `isDisabled`, `isSelected`,\nand `Title` can be inferred from the parent `Tabs` component, but directly\nprovided `props` will take precedence.",
        "displayName": "Tab",
        "methods": [
          {
            "name": "handleClick",
            "docblock": null,
            "modifiers": [],
            "params": [
              {
                "name": "event",
                "type": null
              }
            ],
            "returns": null
          }
        ],
        "propName": "Tab",
        "props": {
          "index": {
            "type": {
              "name": "number"
            },
            "required": false,
            "description": "The index of this `Tab` within the list of `Tabs`."
          },
          "isDisabled": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Styles a `Tab` as disabled. This is typically used with\n`isProgressive` to disable steps that have not been completed\nand should not be selected until the current step has been\ncompleted."
          },
          "isLastTab": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "If `true`, this `Tab` is the last `Tab` in the list of `Tabs`."
          },
          "isOpen": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "If `true` then the active `Tab` will appear open on the bottom."
          },
          "isProgressive": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "If `true`, the `Tab` will appear as a `Progressive` tab."
          },
          "isSelected": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "If `true`, the `Tab` will appear selected."
          },
          "onSelect": {
            "type": {
              "name": "func"
            },
            "required": false,
            "description": "Callback for when the user clicks a `Tab`. Called with the index of the\n`Tab` that was clicked."
          },
          "Title": {
            "type": {
              "name": "node"
            },
            "required": false,
            "description": "The content to be rendered as the `Title` of the `Tab`."
          },
          "isNavigation": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "If `true` component will be styled to be more visually prominent for use with page-level navigation."
          }
        }
      },
      {
        "description": "Titles can be provided as a child or prop to a Tab.",
        "displayName": "Title",
        "methods": [],
        "propName": "Title"
      }
    ],
    "customData": {
      "categories": [
        "navigation"
      ]
    }
  },
  "Tag": {
    "description": "Organizes items into removable items or groups. Can be nested to facilitate\ngrouping.",
    "displayName": "Tag",
    "methods": [
      {
        "name": "handleRemove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "isRemovable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Shows or hides the little \"x\" for a given tag."
      },
      "onRemove": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks to remove a tag.\n\nSignature: `({props, event}) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Can contain elements or nested `Tag` components."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "communication"
      ]
    }
  },
  "TextField": {
    "description": "TextField should cover all your text input needs. It is able to handle\nsingle and multi line inputs.",
    "displayName": "TextField",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Styles that are passed through to native control.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "isMultiLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the TextField to multi line mode. Under the hood this will use a\n`textarea` instead of an `input` if set to `true`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isDisabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the TextField by greying it out.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Initial number of rows a multi line TextField should have. Ignored when\nnot in multi-line mode.",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an event every time the user types text into the TextField.\n\nSignature: `(value, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onBlur": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an on the `input`'s onBlur.\n\nSignature: `(currentValue, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onChangeDebounced": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an event, debounced by `debounceLevel`, when the user types text\ninto the TextField.\n\nSignature: `(value, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an event on every keydown\n\nSignature: `({ event, props }) => {}`"
      },
      "onSubmit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Fires an event when the user hits \"enter\" from the TextField. You\nshouldn't use it if you're using `isMultiLine`.\n\nSignature: `(value, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Set the value of the input.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "debounceLevel": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of milliseconds to debounce the `onChangeDebounced` callback.\nOnly useful if you provide an `onChangeDebounced` handler.",
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "lazyLevel": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the holding time, in milliseconds, that the component will wait if\nthe user is typing and the component gets a new `value` prop.\n\nAny time the user hits a key, it starts a timer that prevents state\nchanges from flowing in to the component until the timer has elapsed.\nThis was heavily inspired by the [lazy-input][li] component.\n\n[li]: https://www.npmjs.com/package/lazy-input",
        "defaultValue": {
          "value": "1000",
          "computed": false
        }
      }
    },
    "childComponents": [],
    "customData": {
      "categories": [
        "controls",
        "text"
      ]
    }
  },
  "TextFieldValidated.Error": {
    "description": "Content that will be displayed as an error message.",
    "displayName": "Error",
    "methods": [],
    "propName": "Error"
  },
  "TextFieldValidated": {
    "description": "A composition of TextField and Validation.",
    "displayName": "TextFieldValidated",
    "methods": [
      {
        "name": "focus",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed to the root container."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Passed to the root container."
      },
      "Error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Prop alternative to Error child component"
      }
    },
    "childComponents": [
      {
        "description": "Content that will be displayed as an error message.",
        "displayName": "Error",
        "methods": [],
        "propName": "Error"
      }
    ],
    "customData": {
      "categories": [
        "controls",
        "text"
      ],
      "extend": "TextField",
      "madeFrom": [
        "TextField",
        "Validation"
      ]
    }
  },
  "ToolTip.Target": {
    "description": "The hover target that will trigger the ToolTip to be displayed.",
    "displayName": "Target",
    "methods": []
  },
  "ToolTip.Title": {
    "description": "The title displayed at the top of the ToolTip.",
    "displayName": "Title",
    "methods": []
  },
  "ToolTip.Body": {
    "description": "The body of the ToolTip displayed below the Title.",
    "displayName": "Body",
    "methods": []
  },
  "ToolTip": {
    "description": "A utility component that creates a transient message anchored to another\ncomponent.",
    "displayName": "ToolTip",
    "methods": [
      {
        "name": "handleMouseOut",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseOverFlyout",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleMouseOutFlyout",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleMouseOverTarget",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseOutTarget",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "`children` should include exactly one ToolTip.Target and one ToolTip.FlyOut."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "isCloseable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set this to `true` if you want to have a `x` close icon.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "kind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'primary'",
              "computed": false
            },
            {
              "value": "'success'",
              "computed": false
            },
            {
              "value": "'warning'",
              "computed": false
            },
            {
              "value": "'danger'",
              "computed": false
            },
            {
              "value": "'info'",
              "computed": false
            },
            {
              "value": "'default'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Style variations of the `ToolTip`.",
        "defaultValue": {
          "value": "'default'",
          "computed": false
        }
      },
      "onClose": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user closes the `Banner`.\n\nSignature: `({ event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root target element."
      },
      "flyOutStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root FlyOut element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "flyOutMaxWidth": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "maximum width of the ToolTip FlyOut. Defaults to 200px."
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'down'",
              "computed": false
            },
            {
              "value": "'up'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'left'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "direction of the FlyOut relative to Target. Defaults to `'down'`.",
        "defaultValue": {
          "value": "ContextMenu.UP",
          "computed": true
        }
      },
      "alignment": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "alignment of the Flyout relative to Target in the cross axis from `direction` Defaults to `'start'`",
        "defaultValue": {
          "value": "ContextMenu.CENTER",
          "computed": true
        }
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates whether the ToolTip will render or not. Defaults to `true`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onMouseOver": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when cursor moves over the target\nSignature: `({ props, event }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onMouseOut": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when cursor leaves the target and the ToolTip\nSignature: `({ props, event }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "portalId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The `id` of the FlyOut portal element that is appended to `document.body`. Defaults to a generated `id`.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      }
    },
    "childComponents": [
      {
        "description": "The hover target that will trigger the ToolTip to be displayed.",
        "displayName": "Target",
        "methods": []
      },
      {
        "description": "The title displayed at the top of the ToolTip.",
        "displayName": "Title",
        "methods": []
      },
      {
        "description": "The body of the ToolTip displayed below the Title.",
        "displayName": "Body",
        "methods": []
      }
    ],
    "customData": {
      "categories": [
        "communication"
      ],
      "madeFrom": [
        "ContextMenu"
      ]
    }
  },
  "Validation.Error": {
    "description": "Content that will be displayed as an error message.",
    "displayName": "Error",
    "methods": [],
    "propName": "Error"
  },
  "Validation": {
    "description": "Validation is a wrapper component that's meant to be used by other\ncomponents. Wrap your form components in it and style them accordingly if\nthere's an error.",
    "displayName": "Validation",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "Error": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "In most cases this will be a string, but it also accepts any valid React\nelement. If this is a falsey value, then no error message will be\ndisplayed.\n\nIf this is the literal `true`, it will add the `-is-error` class to the\nwrapper div, but not render the `-error-content` `div`."
      },
      "className": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Classes that are appended to the component defaults. This prop is run\nthrough the `classnames` library."
      },
      "children": {
        "type": {
          "name": "any"
        },
        "required": true,
        "description": "Any valid React children."
      }
    },
    "childComponents": [
      {
        "description": "Content that will be displayed as an error message.",
        "displayName": "Error",
        "methods": [],
        "propName": "Error"
      }
    ],
    "customData": {
      "categories": [
        "helpers"
      ]
    }
  },
  "VerticalListMenu.Item": {
    "description": "A child item that can contain content or another VerticalListMenu.",
    "displayName": "Item",
    "methods": [],
    "props": {
      "hasExpander": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Show or hide the expand button. Should be `true` if you want to nest\nmenus."
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines the visibility of nested menus."
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If `true` then a small bar on the left side of the item will be\nshown indicating this item is selected."
      },
      "isActionable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines the visibility of the small bar on the left when the user\nhovers over the item. This should indicate to the user that an item\nis clickable."
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks the main body of the item.\n\nSignature: `(index, { event, props}) => {}`"
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the user clicks the expand button.\n\nSignature: `(index, { event, props}) => {}`"
      },
      "Collapsible": {
        "type": {
          "name": "shape",
          "value": "Collapsible.propTypes",
          "computed": true
        },
        "required": false,
        "description": "Props that are passed through to the underlying Collapsible\ncomponent if the item has children."
      }
    }
  },
  "VerticalListMenu": {
    "description": "Used primarily for navigation lists. It supports nesting `VerticalListMenu`s\nbelow `VerticalListMenu.Item`s and animating expanding of those sub lists.\nThe default reducer behavior is for only one `VerticalListMenu.Item` to be\nselected at any given time; that is easily overridden by handling `onSelect`\nyourself.",
    "displayName": "VerticalListMenu",
    "methods": [
      {
        "name": "handleToggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          },
          {
            "name": "itemChildProp",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClickItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          },
          {
            "name": "itemChildProp",
            "type": null
          },
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "isPrivateComponent": false,
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Regular `children` aren't really used in this component, but if you do\nadd them they will be placed at the end of the component. You should be\nusing `VerticalListMenu.Item`s instead of regular children."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Appended to the component-specific class names set on the root element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Passed through to the root element."
      },
      "selectedIndices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "Indicates which of the `VerticalListMenu.Item` children are currently\nselected. You can also put the `isSelected` prop directly on the\n`VerticalListMenu.Item`s if you wish.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "expandedIndices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "Indicates which of the `VerticalListMenu.Item` children are currently\nexpanded. You can also put the `isExpanded` prop directly on the\n`VerticalListMenu.Item`s if you wish.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the user selects a `VerticalListMenu.Item`.\n\nSignature: `(index, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      },
      "onToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback fired when the user expands or collapses an expandable `VerticalListMenu.Item`.\n\nSignature: `(index, { event, props }) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [
      {
        "description": "A child item that can contain content or another VerticalListMenu.",
        "displayName": "Item",
        "methods": [],
        "props": {
          "hasExpander": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Show or hide the expand button. Should be `true` if you want to nest\nmenus."
          },
          "isExpanded": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Determines the visibility of nested menus."
          },
          "isSelected": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "If `true` then a small bar on the left side of the item will be\nshown indicating this item is selected."
          },
          "isActionable": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Determines the visibility of the small bar on the left when the user\nhovers over the item. This should indicate to the user that an item\nis clickable."
          },
          "onSelect": {
            "type": {
              "name": "func"
            },
            "required": false,
            "description": "Called when the user clicks the main body of the item.\n\nSignature: `(index, { event, props}) => {}`"
          },
          "onToggle": {
            "type": {
              "name": "func"
            },
            "required": false,
            "description": "Called when the user clicks the expand button.\n\nSignature: `(index, { event, props}) => {}`"
          },
          "Collapsible": {
            "type": {
              "name": "shape",
              "value": "Collapsible.propTypes",
              "computed": true
            },
            "required": false,
            "description": "Props that are passed through to the underlying Collapsible\ncomponent if the item has children."
          }
        }
      }
    ],
    "customData": {
      "categories": [
        "navigation"
      ],
      "madeFrom": [
        "ChevronIcon"
      ]
    }
  },
  "VerticalTabs.Tab": {
    "description": "Content that will be rendered in a tab. Be sure to nest a Title inside\neach Tab or provide it as a prop.",
    "displayName": "Tab",
    "methods": [],
    "propName": "Tab",
    "props": {
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines if the Tab is selected."
      }
    }
  },
  "VerticalTabs.Title": {
    "description": "Titles can be provided as a child or prop to a Tab.",
    "displayName": "Title",
    "methods": [],
    "propName": "Title"
  },
  "VerticalTabs": {
    "description": "`VerticalTabs` provides vertically tabbed navigation. It has a flexible\ninterface that allows tab content to be passed as regular React children or\nthrough props.",
    "displayName": "VerticalTabs",
    "methods": [],
    "isPrivateComponent": false,
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class names that are appended to the defaults."
      },
      "selectedIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates which of the `VerticalTabs.Tab` children is currently\nselected. The index of the last `VerticalTabs.Tab` child with\n`isSelected` equal to `true` takes precedence over this prop.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "onSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback for when the user clicks a tab. Called with the index of the\ntab that was clicked.\n\nSignature: `(index, { event, props}) => {}`",
        "defaultValue": {
          "value": "_.noop",
          "computed": true
        }
      }
    },
    "childComponents": [
      {
        "description": "Content that will be rendered in a tab. Be sure to nest a Title inside\neach Tab or provide it as a prop.",
        "displayName": "Tab",
        "methods": [],
        "propName": "Tab",
        "props": {
          "isSelected": {
            "type": {
              "name": "bool"
            },
            "required": false,
            "description": "Determines if the Tab is selected."
          }
        }
      },
      {
        "description": "Titles can be provided as a child or prop to a Tab.",
        "displayName": "Title",
        "methods": [],
        "propName": "Title"
      }
    ],
    "customData": {
      "categories": [
        "navigation"
      ],
      "madeFrom": [
        "VerticalListMenu"
      ]
    }
  }
}